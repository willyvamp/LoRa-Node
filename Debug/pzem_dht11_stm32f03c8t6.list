
pzem_dht11_stm32f03c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000940c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08009520  08009520  00019520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c8c  08009c8c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009c8c  08009c8c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c8c  08009c8c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c8c  08009c8c  00019c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c90  08009c90  00019c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200001e0  08009e74  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  08009e74  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a75f  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a4  00000000  00000000  0002a968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002ca10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a18  00000000  00000000  0002d500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018728  00000000  00000000  0002df18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b931  00000000  00000000  00046640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d3d  00000000  00000000  00051f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d7cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  000d7d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009504 	.word	0x08009504

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009504 	.word	0x08009504

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
	
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e02:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <DWT_Delay_Init+0x58>)
 8000e0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e0e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000e2e:	bf00      	nop
     __ASM volatile ("NOP");
 8000e30:	bf00      	nop
 __ASM volatile ("NOP");
 8000e32:	bf00      	nop

  /* Check if clock cycle counter has started */
	
			 if(DWT->CYCCNT)
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <DWT_Delay_Init+0x5c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e000      	b.n	8000e42 <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000e40:	2301      	movs	r3, #1
				}
				

		
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000edf0 	.word	0xe000edf0
 8000e50:	e0001000 	.word	0xe0001000

08000e54 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay+0x40>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000e62:	f002 fbed 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <delay+0x44>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9b      	lsrs	r3, r3, #18
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	fb02 f303 	mul.w	r3, r2, r3
 8000e76:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000e78:	bf00      	nop
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <delay+0x40>)
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d3f8      	bcc.n	8000e7a <delay+0x26>
}
 8000e88:	bf00      	nop
 8000e8a:	bf00      	nop
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e0001000 	.word	0xe0001000
 8000e98:	431bde83 	.word	0x431bde83

08000e9c <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b086      	sub	sp, #24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000eb6:	887b      	ldrh	r3, [r7, #2]
 8000eb8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f001 fe23 	bl	8002b14 <HAL_GPIO_Init>
}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fe06 	bl	8002b14 <HAL_GPIO_Init>
}
 8000f08:	bf00      	nop
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <DHT_Start>:


void DHT_Start (void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000f14:	f7ff ff6e 	bl	8000df4 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000f18:	2101      	movs	r1, #1
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <DHT_Start+0x40>)
 8000f1c:	f7ff ffbe 	bl	8000e9c <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000f20:	2200      	movs	r2, #0
 8000f22:	2101      	movs	r1, #1
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <DHT_Start+0x40>)
 8000f26:	f001 ff90 	bl	8002e4a <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000f2a:	f244 6050 	movw	r0, #18000	; 0x4650
 8000f2e:	f7ff ff91 	bl	8000e54 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000f32:	2201      	movs	r2, #1
 8000f34:	2101      	movs	r1, #1
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <DHT_Start+0x40>)
 8000f38:	f001 ff87 	bl	8002e4a <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000f3c:	201e      	movs	r0, #30
 8000f3e:	f7ff ff89 	bl	8000e54 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000f42:	2101      	movs	r1, #1
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <DHT_Start+0x40>)
 8000f46:	f7ff ffc6 	bl	8000ed6 <Set_Pin_Input>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010800 	.word	0x40010800

08000f54 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000f5e:	2032      	movs	r0, #50	; 0x32
 8000f60:	f7ff ff78 	bl	8000e54 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000f64:	2101      	movs	r1, #1
 8000f66:	4811      	ldr	r0, [pc, #68]	; (8000fac <DHT_Check_Response+0x58>)
 8000f68:	f001 ff58 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10e      	bne.n	8000f90 <DHT_Check_Response+0x3c>
	{
		delay (100);
 8000f72:	2064      	movs	r0, #100	; 0x64
 8000f74:	f7ff ff6e 	bl	8000e54 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN))) 
 8000f78:	2101      	movs	r1, #1
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <DHT_Check_Response+0x58>)
 8000f7c:	f001 ff4e 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d002      	beq.n	8000f8c <DHT_Check_Response+0x38>
		{
			Response = 1;
 8000f86:	2301      	movs	r3, #1
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	e001      	b.n	8000f90 <DHT_Check_Response+0x3c>
		}
		else 
		{
			Response = -1;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f90:	bf00      	nop
 8000f92:	2101      	movs	r1, #1
 8000f94:	4805      	ldr	r0, [pc, #20]	; (8000fac <DHT_Check_Response+0x58>)
 8000f96:	f001 ff41 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d1f8      	bne.n	8000f92 <DHT_Check_Response+0x3e>

	return Response;
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40010800 	.word	0x40010800

08000fb0 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71bb      	strb	r3, [r7, #6]
 8000fba:	e037      	b.n	800102c <DHT_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000fbc:	bf00      	nop
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DHT_Read+0x8c>)
 8000fc2:	f001 ff2b 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f8      	beq.n	8000fbe <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000fcc:	2032      	movs	r0, #50	; 0x32
 8000fce:	f7ff ff41 	bl	8000e54 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	4819      	ldr	r0, [pc, #100]	; (800103c <DHT_Read+0x8c>)
 8000fd6:	f001 ff21 	bl	8002e1c <HAL_GPIO_ReadPin>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d10e      	bne.n	8000ffe <DHT_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	f1c3 0307 	rsb	r3, r3, #7
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	b25a      	sxtb	r2, r3
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	71fb      	strb	r3, [r7, #7]
 8000ffc:	e00b      	b.n	8001016 <DHT_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	f1c3 0307 	rsb	r3, r3, #7
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	b25a      	sxtb	r2, r3
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	4313      	orrs	r3, r2
 8001012:	b25b      	sxtb	r3, r3
 8001014:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8001016:	bf00      	nop
 8001018:	2101      	movs	r1, #1
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <DHT_Read+0x8c>)
 800101c:	f001 fefe 	bl	8002e1c <HAL_GPIO_ReadPin>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f8      	bne.n	8001018 <DHT_Read+0x68>
	for (j=0;j<8;j++)
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	3301      	adds	r3, #1
 800102a:	71bb      	strb	r3, [r7, #6]
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9c4      	bls.n	8000fbc <DHT_Read+0xc>
	}
	return i;
 8001032:	79fb      	ldrb	r3, [r7, #7]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010800 	.word	0x40010800

08001040 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	DHT_Start ();
 8001048:	f7ff ff62 	bl	8000f10 <DHT_Start>
	Presence = DHT_Check_Response ();
 800104c:	f7ff ff82 	bl	8000f54 <DHT_Check_Response>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <DHT_GetData+0xa0>)
 8001056:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8001058:	f7ff ffaa 	bl	8000fb0 <DHT_Read>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b20      	ldr	r3, [pc, #128]	; (80010e4 <DHT_GetData+0xa4>)
 8001062:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8001064:	f7ff ffa4 	bl	8000fb0 <DHT_Read>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <DHT_GetData+0xa8>)
 800106e:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8001070:	f7ff ff9e 	bl	8000fb0 <DHT_Read>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <DHT_GetData+0xac>)
 800107a:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 800107c:	f7ff ff98 	bl	8000fb0 <DHT_Read>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <DHT_GetData+0xb0>)
 8001086:	701a      	strb	r2, [r3, #0]

	
	SUM = DHT_Read();
 8001088:	f7ff ff92 	bl	8000fb0 <DHT_Read>
 800108c:	4603      	mov	r3, r0
 800108e:	b29a      	uxth	r2, r3
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <DHT_GetData+0xb4>)
 8001092:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001094:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <DHT_GetData+0xb4>)
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <DHT_GetData+0xa4>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <DHT_GetData+0xa8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <DHT_GetData+0xac>)
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <DHT_GetData+0xb0>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4413      	add	r3, r2
 80010b2:	4299      	cmp	r1, r3
 80010b4:	d10f      	bne.n	80010d6 <DHT_GetData+0x96>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 80010b6:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <DHT_GetData+0xac>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe0a 	bl	8000cd4 <__aeabi_ui2f>
 80010c0:	4602      	mov	r2, r0
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	601a      	str	r2, [r3, #0]
			DHT_Data->Humidity = Rh_byte1;
 80010c6:	4b07      	ldr	r3, [pc, #28]	; (80010e4 <DHT_GetData+0xa4>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fe02 	bl	8000cd4 <__aeabi_ui2f>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000202 	.word	0x20000202
 80010e4:	200001fc 	.word	0x200001fc
 80010e8:	200001fd 	.word	0x200001fd
 80010ec:	200001fe 	.word	0x200001fe
 80010f0:	200001ff 	.word	0x200001ff
 80010f4:	20000200 	.word	0x20000200

080010f8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80010f8:	b4b0      	push	{r4, r5, r7}
 80010fa:	b08f      	sub	sp, #60	; 0x3c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8001100:	f240 13b1 	movw	r3, #433	; 0x1b1
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8001106:	2307      	movs	r3, #7
 8001108:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 800110c:	2307      	movs	r3, #7
 800110e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8001112:	2301      	movs	r3, #1
 8001114:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 8001118:	23ff      	movs	r3, #255	; 0xff
 800111a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 8001124:	2308      	movs	r3, #8
 8001126:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	461d      	mov	r5, r3
 800112c:	f107 040c 	add.w	r4, r7, #12
 8001130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001138:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800113c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	373c      	adds	r7, #60	; 0x3c
 8001144:	46bd      	mov	sp, r7
 8001146:	bcb0      	pop	{r4, r5, r7}
 8001148:	4770      	bx	lr

0800114a <LoRa_reset>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800114a:	b580      	push	{r7, lr}
 800114c:	b082      	sub	sp, #8
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6898      	ldr	r0, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	899b      	ldrh	r3, [r3, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	4619      	mov	r1, r3
 800115e:	f001 fe74 	bl	8002e4a <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001162:	2001      	movs	r0, #1
 8001164:	f001 faf4 	bl	8002750 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6898      	ldr	r0, [r3, #8]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	899b      	ldrh	r3, [r3, #12]
 8001170:	2201      	movs	r2, #1
 8001172:	4619      	mov	r1, r3
 8001174:	f001 fe69 	bl	8002e4a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001178:	2064      	movs	r0, #100	; 0x64
 800117a:	f001 fae9 	bl	8002750 <HAL_Delay>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8001190:	2101      	movs	r1, #1
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f99f 	bl	80014d6 <LoRa_read>
 8001198:	4603      	mov	r3, r0
 800119a:	73bb      	strb	r3, [r7, #14]
	data = read;
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d107      	bne.n	80011b6 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	f023 0307 	bic.w	r3, r3, #7
 80011ac:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	61da      	str	r2, [r3, #28]
 80011b4:	e03e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 80011bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	61da      	str	r2, [r3, #28]
 80011d4:	e02e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d10c      	bne.n	80011f6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80011dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011e0:	f023 0307 	bic.w	r3, r3, #7
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	f043 0303 	orr.w	r3, r3, #3
 80011ea:	b25b      	sxtb	r3, r3
 80011ec:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	61da      	str	r2, [r3, #28]
 80011f4:	e01e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2b05      	cmp	r3, #5
 80011fa:	d10c      	bne.n	8001216 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80011fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001200:	f023 0307 	bic.w	r3, r3, #7
 8001204:	b25b      	sxtb	r3, r3
 8001206:	f043 0305 	orr.w	r3, r3, #5
 800120a:	b25b      	sxtb	r3, r3
 800120c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2205      	movs	r2, #5
 8001212:	61da      	str	r2, [r3, #28]
 8001214:	e00e      	b.n	8001234 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2b06      	cmp	r3, #6
 800121a:	d10b      	bne.n	8001234 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 800121c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001220:	f023 0307 	bic.w	r3, r3, #7
 8001224:	b25b      	sxtb	r3, r3
 8001226:	f043 0306 	orr.w	r3, r3, #6
 800122a:	b25b      	sxtb	r3, r3
 800122c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2206      	movs	r2, #6
 8001232:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	461a      	mov	r2, r3
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f965 	bl	800150a <LoRa_write>
	//HAL_Delay(10);
}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	4613      	mov	r3, r2
 8001256:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	889b      	ldrh	r3, [r3, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	f001 fdf1 	bl	8002e4a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6998      	ldr	r0, [r3, #24]
 800126c:	88fa      	ldrh	r2, [r7, #6]
 800126e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001272:	68b9      	ldr	r1, [r7, #8]
 8001274:	f002 fab8 	bl	80037e8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001278:	bf00      	nop
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fea1 	bl	8003fc6 <HAL_SPI_GetState>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d1f7      	bne.n	800127a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6998      	ldr	r0, [r3, #24]
 800128e:	8b3a      	ldrh	r2, [r7, #24]
 8001290:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001294:	6839      	ldr	r1, [r7, #0]
 8001296:	f002 fbe3 	bl	8003a60 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800129a:	bf00      	nop
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f002 fe90 	bl	8003fc6 <HAL_SPI_GetState>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d1f7      	bne.n	800129c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	889b      	ldrh	r3, [r3, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	f001 fdc7 	bl	8002e4a <HAL_GPIO_WritePin>
}
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	4613      	mov	r3, r2
 80012d2:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	4619      	mov	r1, r3
 80012e0:	f001 fdb3 	bl	8002e4a <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6998      	ldr	r0, [r3, #24]
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ee:	68b9      	ldr	r1, [r7, #8]
 80012f0:	f002 fa7a 	bl	80037e8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012f4:	bf00      	nop
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f002 fe63 	bl	8003fc6 <HAL_SPI_GetState>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d1f7      	bne.n	80012f6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6998      	ldr	r0, [r3, #24]
 800130a:	8b3a      	ldrh	r2, [r7, #24]
 800130c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001310:	6839      	ldr	r1, [r7, #0]
 8001312:	f002 fa69 	bl	80037e8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001316:	bf00      	nop
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4618      	mov	r0, r3
 800131e:	f002 fe52 	bl	8003fc6 <HAL_SPI_GetState>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d1f7      	bne.n	8001318 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6818      	ldr	r0, [r3, #0]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	4619      	mov	r1, r3
 8001334:	f001 fd89 	bl	8002e4a <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	04db      	lsls	r3, r3, #19
 800134e:	115b      	asrs	r3, r3, #5
 8001350:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	0c1b      	lsrs	r3, r3, #16
 8001356:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001358:	7afb      	ldrb	r3, [r7, #11]
 800135a:	461a      	mov	r2, r3
 800135c:	2106      	movs	r1, #6
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f8d3 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001364:	2005      	movs	r0, #5
 8001366:	f001 f9f3 	bl	8002750 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0a1b      	lsrs	r3, r3, #8
 800136e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	461a      	mov	r2, r3
 8001374:	2107      	movs	r1, #7
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f8c7 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 800137c:	2005      	movs	r0, #5
 800137e:	f001 f9e7 	bl	8002750 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	461a      	mov	r2, r3
 800138a:	2108      	movs	r1, #8
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f000 f8bc 	bl	800150a <LoRa_write>
	HAL_Delay(5);
 8001392:	2005      	movs	r0, #5
 8001394:	f001 f9dc 	bl	8002750 <HAL_Delay>
}
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	2b0c      	cmp	r3, #12
 80013ae:	dd01      	ble.n	80013b4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80013b0:	230c      	movs	r3, #12
 80013b2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	dc01      	bgt.n	80013be <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80013ba:	2307      	movs	r3, #7
 80013bc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80013be:	211e      	movs	r1, #30
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f000 f888 	bl	80014d6 <LoRa_read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80013ca:	200a      	movs	r0, #10
 80013cc:	f001 f9c0 	bl	8002750 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	4413      	add	r3, r2
 80013e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
 80013e6:	461a      	mov	r2, r3
 80013e8:	211e      	movs	r1, #30
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f88d 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80013f0:	200a      	movs	r0, #10
 80013f2:	f001 f9ad 	bl	8002750 <HAL_Delay>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 800140a:	78fb      	ldrb	r3, [r7, #3]
 800140c:	461a      	mov	r2, r3
 800140e:	2109      	movs	r1, #9
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f000 f87a 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 8001416:	200a      	movs	r0, #10
 8001418:	f001 f99a 	bl	8002750 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8001434:	78fb      	ldrb	r3, [r7, #3]
 8001436:	2b2c      	cmp	r3, #44	; 0x2c
 8001438:	d801      	bhi.n	800143e <LoRa_setOCP+0x1a>
		current = 45;
 800143a:	232d      	movs	r3, #45	; 0x2d
 800143c:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	2bf0      	cmp	r3, #240	; 0xf0
 8001442:	d901      	bls.n	8001448 <LoRa_setOCP+0x24>
		current = 240;
 8001444:	23f0      	movs	r3, #240	; 0xf0
 8001446:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	2b78      	cmp	r3, #120	; 0x78
 800144c:	d809      	bhi.n	8001462 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	3b2d      	subs	r3, #45	; 0x2d
 8001452:	4a12      	ldr	r2, [pc, #72]	; (800149c <LoRa_setOCP+0x78>)
 8001454:	fb82 1203 	smull	r1, r2, r2, r3
 8001458:	1052      	asrs	r2, r2, #1
 800145a:	17db      	asrs	r3, r3, #31
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e00b      	b.n	800147a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2bf0      	cmp	r3, #240	; 0xf0
 8001466:	d808      	bhi.n	800147a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	331e      	adds	r3, #30
 800146c:	4a0b      	ldr	r2, [pc, #44]	; (800149c <LoRa_setOCP+0x78>)
 800146e:	fb82 1203 	smull	r1, r2, r2, r3
 8001472:	1092      	asrs	r2, r2, #2
 8001474:	17db      	asrs	r3, r3, #31
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800147a:	7bfb      	ldrb	r3, [r7, #15]
 800147c:	3320      	adds	r3, #32
 800147e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	461a      	mov	r2, r3
 8001484:	210b      	movs	r1, #11
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f83f 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 800148c:	200a      	movs	r0, #10
 800148e:	f001 f95f 	bl	8002750 <HAL_Delay>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	66666667 	.word	0x66666667

080014a0 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80014a8:	211e      	movs	r1, #30
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f813 	bl	80014d6 <LoRa_read>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f043 0307 	orr.w	r3, r3, #7
 80014ba:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80014bc:	7bbb      	ldrb	r3, [r7, #14]
 80014be:	461a      	mov	r2, r3
 80014c0:	211e      	movs	r1, #30
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f821 	bl	800150a <LoRa_write>
	HAL_Delay(10);
 80014c8:	200a      	movs	r0, #10
 80014ca:	f001 f941 	bl	8002750 <HAL_Delay>
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}

080014d6 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af02      	add	r7, sp, #8
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	460b      	mov	r3, r1
 80014e0:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80014e2:	78fb      	ldrb	r3, [r7, #3]
 80014e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80014ec:	f107 030f 	add.w	r3, r7, #15
 80014f0:	f107 010e 	add.w	r1, r7, #14
 80014f4:	2201      	movs	r2, #1
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff fea4 	bl	8001248 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001500:	7bfb      	ldrb	r3, [r7, #15]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af02      	add	r7, sp, #8
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	70fb      	strb	r3, [r7, #3]
 8001516:	4613      	mov	r3, r2
 8001518:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 800151a:	78fb      	ldrb	r3, [r7, #3]
 800151c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001520:	b2db      	uxtb	r3, r3
 8001522:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001524:	78bb      	ldrb	r3, [r7, #2]
 8001526:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001528:	f107 030f 	add.w	r3, r7, #15
 800152c:	f107 010e 	add.w	r1, r7, #14
 8001530:	2201      	movs	r2, #1
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	2201      	movs	r2, #1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fec4 	bl	80012c4 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800153c:	bf00      	nop
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LoRa_BurstWrite>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	460b      	mov	r3, r1
 8001552:	72fb      	strb	r3, [r7, #11]
 8001554:	4613      	mov	r3, r2
 8001556:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800155e:	b2db      	uxtb	r3, r3
 8001560:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	f001 fc6c 	bl	8002e4a <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6998      	ldr	r0, [r3, #24]
 8001576:	f107 0117 	add.w	r1, r7, #23
 800157a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800157e:	2201      	movs	r2, #1
 8001580:	f002 f932 	bl	80037e8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8001584:	bf00      	nop
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	4618      	mov	r0, r3
 800158c:	f002 fd1b 	bl	8003fc6 <HAL_SPI_GetState>
 8001590:	4603      	mov	r3, r0
 8001592:	2b01      	cmp	r3, #1
 8001594:	d1f7      	bne.n	8001586 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6998      	ldr	r0, [r3, #24]
 800159a:	7abb      	ldrb	r3, [r7, #10]
 800159c:	b29a      	uxth	r2, r3
 800159e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f002 f920 	bl	80037e8 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80015a8:	bf00      	nop
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fd09 	bl	8003fc6 <HAL_SPI_GetState>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d1f7      	bne.n	80015aa <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	889b      	ldrh	r3, [r3, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	4619      	mov	r1, r3
 80015c6:	f001 fc40 	bl	8002e4a <HAL_GPIO_WritePin>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]

	return 1;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	60f8      	str	r0, [r7, #12]
 80015ee:	60b9      	str	r1, [r7, #8]
 80015f0:	4611      	mov	r1, r2
 80015f2:	461a      	mov	r2, r3
 80015f4:	460b      	mov	r3, r1
 80015f6:	71fb      	strb	r3, [r7, #7]
 80015f8:	4613      	mov	r3, r2
 80015fa:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001602:	2101      	movs	r1, #1
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fdbe 	bl	8001186 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 800160a:	210e      	movs	r1, #14
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f7ff ff62 	bl	80014d6 <LoRa_read>
 8001612:	4603      	mov	r3, r0
 8001614:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	461a      	mov	r2, r3
 800161a:	210d      	movs	r1, #13
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff ff74 	bl	800150a <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	461a      	mov	r2, r3
 8001626:	2122      	movs	r1, #34	; 0x22
 8001628:	68f8      	ldr	r0, [r7, #12]
 800162a:	f7ff ff6e 	bl	800150a <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	2100      	movs	r1, #0
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f7ff ff85 	bl	8001544 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 800163a:	2103      	movs	r1, #3
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fda2 	bl	8001186 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001642:	2112      	movs	r1, #18
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff ff46 	bl	80014d6 <LoRa_read>
 800164a:	4603      	mov	r3, r0
 800164c:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 800164e:	7cfb      	ldrb	r3, [r7, #19]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00a      	beq.n	800166e <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8001658:	22ff      	movs	r2, #255	; 0xff
 800165a:	2112      	movs	r1, #18
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f7ff ff54 	bl	800150a <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8001662:	6979      	ldr	r1, [r7, #20]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fd8e 	bl	8001186 <LoRa_gotoMode>
			return 1;
 800166a:	2301      	movs	r3, #1
 800166c:	e00f      	b.n	800168e <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 800166e:	88bb      	ldrh	r3, [r7, #4]
 8001670:	3b01      	subs	r3, #1
 8001672:	80bb      	strh	r3, [r7, #4]
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d105      	bne.n	8001686 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 800167a:	6979      	ldr	r1, [r7, #20]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7ff fd82 	bl	8001186 <LoRa_gotoMode>
				return 0;
 8001682:	2300      	movs	r3, #0
 8001684:	e003      	b.n	800168e <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f001 f862 	bl	8002750 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800168c:	e7d9      	b.n	8001642 <LoRa_transmit+0x5c>
	}

}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001696:	b580      	push	{r7, lr}
 8001698:	b084      	sub	sp, #16
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ff97 	bl	80015d2 <LoRa_isvalid>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8093 	beq.w	80017d2 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80016ac:	2100      	movs	r1, #0
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fd69 	bl	8001186 <LoRa_gotoMode>
			HAL_Delay(10);
 80016b4:	200a      	movs	r0, #10
 80016b6:	f001 f84b 	bl	8002750 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 80016ba:	2101      	movs	r1, #1
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff0a 	bl	80014d6 <LoRa_read>
 80016c2:	4603      	mov	r3, r0
 80016c4:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f001 f842 	bl	8002750 <HAL_Delay>
			data = read | 0x80;
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d2:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 80016d4:	7bbb      	ldrb	r3, [r7, #14]
 80016d6:	461a      	mov	r2, r3
 80016d8:	2101      	movs	r1, #1
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff15 	bl	800150a <LoRa_write>
			HAL_Delay(100);
 80016e0:	2064      	movs	r0, #100	; 0x64
 80016e2:	f001 f835 	bl	8002750 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4619      	mov	r1, r3
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe27 	bl	8001340 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80016f8:	4619      	mov	r1, r3
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fe7f 	bl	80013fe <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fe8b 	bl	8001424 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 800170e:	2223      	movs	r2, #35	; 0x23
 8001710:	210c      	movs	r1, #12
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff fef9 	bl	800150a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff fec1 	bl	80014a0 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff fe3a 	bl	80013a0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 800172c:	22ff      	movs	r2, #255	; 0xff
 800172e:	211f      	movs	r1, #31
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff feea 	bl	800150a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001740:	011b      	lsls	r3, r3, #4
 8001742:	b2da      	uxtb	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	4413      	add	r3, r2
 8001750:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	461a      	mov	r2, r3
 8001756:	211d      	movs	r1, #29
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fed6 	bl	800150a <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	0a1b      	lsrs	r3, r3, #8
 8001764:	b29b      	uxth	r3, r3
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	2120      	movs	r1, #32
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fecc 	bl	800150a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	2121      	movs	r1, #33	; 0x21
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff fec4 	bl	800150a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8001782:	2140      	movs	r1, #64	; 0x40
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fea6 	bl	80014d6 <LoRa_read>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001794:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	461a      	mov	r2, r3
 800179a:	2140      	movs	r1, #64	; 0x40
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff feb4 	bl	800150a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80017a2:	2101      	movs	r1, #1
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fcee 	bl	8001186 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80017b0:	200a      	movs	r0, #10
 80017b2:	f000 ffcd 	bl	8002750 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80017b6:	2142      	movs	r1, #66	; 0x42
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe8c 	bl	80014d6 <LoRa_read>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80017c2:	7bfb      	ldrb	r3, [r7, #15]
 80017c4:	2b12      	cmp	r3, #18
 80017c6:	d101      	bne.n	80017cc <LoRa_init+0x136>
				return LORA_OK;
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	e004      	b.n	80017d6 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 80017cc:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80017d0:	e001      	b.n	80017d6 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 80017d2:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <transmit_DHT11>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transmit_DHT11(void)
{
 80017e0:	b5b0      	push	{r4, r5, r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af02      	add	r7, sp, #8
	DHT_GetData(&DHT11_Data);
 80017e6:	4817      	ldr	r0, [pc, #92]	; (8001844 <transmit_DHT11+0x64>)
 80017e8:	f7ff fc2a 	bl	8001040 <DHT_GetData>
	temp_value = DHT11_Data.Temperature;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <transmit_DHT11+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a15      	ldr	r2, [pc, #84]	; (8001848 <transmit_DHT11+0x68>)
 80017f2:	6013      	str	r3, [r2, #0]
	rh_value = DHT11_Data.Humidity;
 80017f4:	4b13      	ldr	r3, [pc, #76]	; (8001844 <transmit_DHT11+0x64>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a14      	ldr	r2, [pc, #80]	; (800184c <transmit_DHT11+0x6c>)
 80017fa:	6013      	str	r3, [r2, #0]
	sprintf(value_array, "Temperature: %.1fC    Humidity: %.1f\r\n", temp_value, rh_value);
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <transmit_DHT11+0x68>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f7fe fe11 	bl	8000428 <__aeabi_f2d>
 8001806:	4604      	mov	r4, r0
 8001808:	460d      	mov	r5, r1
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <transmit_DHT11+0x6c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f7fe fe0a 	bl	8000428 <__aeabi_f2d>
 8001814:	4602      	mov	r2, r0
 8001816:	460b      	mov	r3, r1
 8001818:	e9cd 2300 	strd	r2, r3, [sp]
 800181c:	4622      	mov	r2, r4
 800181e:	462b      	mov	r3, r5
 8001820:	490b      	ldr	r1, [pc, #44]	; (8001850 <transmit_DHT11+0x70>)
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <transmit_DHT11+0x74>)
 8001824:	f004 f8b0 	bl	8005988 <siprintf>
	LoRa_transmit(&myLoRa, (uint8_t*)value_array, strlen(value_array), 3000);
 8001828:	480a      	ldr	r0, [pc, #40]	; (8001854 <transmit_DHT11+0x74>)
 800182a:	f7fe fc91 	bl	8000150 <strlen>
 800182e:	4603      	mov	r3, r0
 8001830:	b2da      	uxtb	r2, r3
 8001832:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001836:	4907      	ldr	r1, [pc, #28]	; (8001854 <transmit_DHT11+0x74>)
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <transmit_DHT11+0x78>)
 800183a:	f7ff fed4 	bl	80015e6 <LoRa_transmit>

	//HAL_UART_Transmit(&huart2, (uint8_t *)value_array, strlen(value_array), 1000);
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bdb0      	pop	{r4, r5, r7, pc}
 8001844:	20000204 	.word	0x20000204
 8001848:	2000035c 	.word	0x2000035c
 800184c:	20000360 	.word	0x20000360
 8001850:	08009520 	.word	0x08009520
 8001854:	20000364 	.word	0x20000364
 8001858:	20000250 	.word	0x20000250

0800185c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001862:	f000 ff13 	bl	800268c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001866:	f000 f89f 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 800186a:	f000 f96d 	bl	8001b48 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800186e:	f000 f917 	bl	8001aa0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001872:	f000 f93f 	bl	8001af4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 8001876:	f000 f8dd 	bl	8001a34 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	//PZEM CONFIG
	init_pzem(&PZEM, &huart1, 0x01);
 800187a:	2201      	movs	r2, #1
 800187c:	4942      	ldr	r1, [pc, #264]	; (8001988 <main+0x12c>)
 800187e:	4843      	ldr	r0, [pc, #268]	; (800198c <main+0x130>)
 8001880:	f000 fa25 	bl	8001cce <init_pzem>
	HAL_UART_Receive_IT(PZEM.huart, &PZEM.byteRx[0], 1);
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <main+0x130>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2201      	movs	r2, #1
 800188a:	4941      	ldr	r1, [pc, #260]	; (8001990 <main+0x134>)
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fd7e 	bl	800438e <HAL_UART_Receive_IT>


	//LORA CONFIG
	myLoRa = newLoRa();
 8001892:	4c40      	ldr	r4, [pc, #256]	; (8001994 <main+0x138>)
 8001894:	463b      	mov	r3, r7
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fc2e 	bl	80010f8 <newLoRa>
 800189c:	4625      	mov	r5, r4
 800189e:	463c      	mov	r4, r7
 80018a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	myLoRa.CS_port = NSS_GPIO_Port;
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <main+0x138>)
 80018b2:	4a39      	ldr	r2, [pc, #228]	; (8001998 <main+0x13c>)
 80018b4:	601a      	str	r2, [r3, #0]
	myLoRa.CS_pin = NSS_Pin;
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <main+0x138>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	809a      	strh	r2, [r3, #4]
	myLoRa.reset_port = RST_GPIO_Port;
 80018bc:	4b35      	ldr	r3, [pc, #212]	; (8001994 <main+0x138>)
 80018be:	4a36      	ldr	r2, [pc, #216]	; (8001998 <main+0x13c>)
 80018c0:	609a      	str	r2, [r3, #8]
	myLoRa.reset_pin = RST_Pin;
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <main+0x138>)
 80018c4:	2202      	movs	r2, #2
 80018c6:	819a      	strh	r2, [r3, #12]
	myLoRa.DIO0_port = DIO0_GPIO_Port;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <main+0x138>)
 80018ca:	4a33      	ldr	r2, [pc, #204]	; (8001998 <main+0x13c>)
 80018cc:	611a      	str	r2, [r3, #16]
	myLoRa.DIO0_pin = DIO0_Pin;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <main+0x138>)
 80018d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d4:	829a      	strh	r2, [r3, #20]
	myLoRa.hSPIx = &hspi1;
 80018d6:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <main+0x138>)
 80018d8:	4a30      	ldr	r2, [pc, #192]	; (800199c <main+0x140>)
 80018da:	619a      	str	r2, [r3, #24]

	myLoRa.frequency = 433;             // default = 433 MHz
 80018dc:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <main+0x138>)
 80018de:	f240 12b1 	movw	r2, #433	; 0x1b1
 80018e2:	621a      	str	r2, [r3, #32]
	myLoRa.spredingFactor = SF_7;            // default = SF_7
 80018e4:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <main+0x138>)
 80018e6:	2207      	movs	r2, #7
 80018e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	myLoRa.bandWidth = BW_125KHz;       // default = BW_125KHz
 80018ec:	4b29      	ldr	r3, [pc, #164]	; (8001994 <main+0x138>)
 80018ee:	2207      	movs	r2, #7
 80018f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	myLoRa.crcRate = CR_4_5;          // default = CR_4_5
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <main+0x138>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	myLoRa.power = POWER_20db;      // default = 20db
 80018fc:	4b25      	ldr	r3, [pc, #148]	; (8001994 <main+0x138>)
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	myLoRa.overCurrentProtection = 130;             // default = 100 mA
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <main+0x138>)
 8001906:	2282      	movs	r2, #130	; 0x82
 8001908:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	myLoRa.preamble = 10;              // default = 8;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <main+0x138>)
 800190e:	220a      	movs	r2, #10
 8001910:	851a      	strh	r2, [r3, #40]	; 0x28

	LoRa_reset(&myLoRa);
 8001912:	4820      	ldr	r0, [pc, #128]	; (8001994 <main+0x138>)
 8001914:	f7ff fc19 	bl	800114a <LoRa_reset>
	if (LoRa_init(&myLoRa) == LORA_OK)
 8001918:	481e      	ldr	r0, [pc, #120]	; (8001994 <main+0x138>)
 800191a:	f7ff febc 	bl	8001696 <LoRa_init>
 800191e:	4603      	mov	r3, r0
 8001920:	2bc8      	cmp	r3, #200	; 0xc8
 8001922:	d102      	bne.n	800192a <main+0xce>
	{
		start_Lora = 1;
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <main+0x144>)
 8001926:	2201      	movs	r2, #1
 8001928:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(updateValues(&PZEM))
 800192a:	4818      	ldr	r0, [pc, #96]	; (800198c <main+0x130>)
 800192c:	f000 faae 	bl	8001e8c <updateValues>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f9      	beq.n	800192a <main+0xce>
	  {
//		  voltage = getVol(&PZEM);
//		  sprintf(voltageArray, "%1.f", voltage);
//		  HAL_UART_Transmit(&huart1, (uint8_t *)voltageArray, 5, 1000);
		  if(start_Lora == 1)
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <main+0x144>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d11c      	bne.n	8001978 <main+0x11c>
		  {
			  SPI_Voltage_Transmit(&myLoRa, &PZEM);
 800193e:	4913      	ldr	r1, [pc, #76]	; (800198c <main+0x130>)
 8001940:	4814      	ldr	r0, [pc, #80]	; (8001994 <main+0x138>)
 8001942:	f000 fb81 	bl	8002048 <SPI_Voltage_Transmit>
			  SPI_Current_Transmit(&myLoRa, &PZEM);
 8001946:	4911      	ldr	r1, [pc, #68]	; (800198c <main+0x130>)
 8001948:	4812      	ldr	r0, [pc, #72]	; (8001994 <main+0x138>)
 800194a:	f000 fba7 	bl	800209c <SPI_Current_Transmit>
			  SPI_Power_Transmit(&myLoRa, &PZEM);
 800194e:	490f      	ldr	r1, [pc, #60]	; (800198c <main+0x130>)
 8001950:	4810      	ldr	r0, [pc, #64]	; (8001994 <main+0x138>)
 8001952:	f000 fbcd 	bl	80020f0 <SPI_Power_Transmit>
			  SPI_Energy_Transmit(&myLoRa, &PZEM);
 8001956:	490d      	ldr	r1, [pc, #52]	; (800198c <main+0x130>)
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <main+0x138>)
 800195a:	f000 fbf3 	bl	8002144 <SPI_Energy_Transmit>
			  SPI_Frequency_Transmit(&myLoRa, &PZEM);
 800195e:	490b      	ldr	r1, [pc, #44]	; (800198c <main+0x130>)
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <main+0x138>)
 8001962:	f000 fc19 	bl	8002198 <SPI_Frequency_Transmit>
			  SPI_pF_Transmit(&myLoRa, &PZEM);
 8001966:	4909      	ldr	r1, [pc, #36]	; (800198c <main+0x130>)
 8001968:	480a      	ldr	r0, [pc, #40]	; (8001994 <main+0x138>)
 800196a:	f000 fc3f 	bl	80021ec <SPI_pF_Transmit>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800196e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <main+0x148>)
 8001974:	f001 fa81 	bl	8002e7a <HAL_GPIO_TogglePin>
		  printPower(&huart2, &PZEM);
		  printEnergy(&huart2, &PZEM);
		  printFrequency(&huart2, &PZEM);
		  printpF(&huart2, &PZEM);
		  */
		  transmit_DHT11();
 8001978:	f7ff ff32 	bl	80017e0 <transmit_DHT11>
		  HAL_Delay(2000);
 800197c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001980:	f000 fee6 	bl	8002750 <HAL_Delay>
	  if(updateValues(&PZEM))
 8001984:	e7d1      	b.n	800192a <main+0xce>
 8001986:	bf00      	nop
 8001988:	200002d4 	.word	0x200002d4
 800198c:	2000020c 	.word	0x2000020c
 8001990:	2000022f 	.word	0x2000022f
 8001994:	20000250 	.word	0x20000250
 8001998:	40010c00 	.word	0x40010c00
 800199c:	2000027c 	.word	0x2000027c
 80019a0:	200003c8 	.word	0x200003c8
 80019a4:	40011000 	.word	0x40011000

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b090      	sub	sp, #64	; 0x40
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f003 f96c 	bl	8004c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fa5b 	bl	8002eac <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019fc:	f000 f962 	bl	8001cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f001 fcc8 	bl	80033b0 <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a26:	f000 f94d 	bl	8001cc4 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a38:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <MX_SPI1_Init+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a3e:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4c:	4b12      	ldr	r3, [pc, #72]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a58:	4b0f      	ldr	r3, [pc, #60]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a66:	4b0c      	ldr	r3, [pc, #48]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a68:	2210      	movs	r2, #16
 8001a6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a7e:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a80:	220a      	movs	r2, #10
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a84:	4804      	ldr	r0, [pc, #16]	; (8001a98 <MX_SPI1_Init+0x64>)
 8001a86:	f001 fe2b 	bl	80036e0 <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a90:	f000 f918 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	2000027c 	.word	0x2000027c
 8001a9c:	40013000 	.word	0x40013000

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_USART1_UART_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad8:	f002 fb7a 	bl	80041d0 <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f8ef 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200002d4 	.word	0x200002d4
 8001af0:	40013800 	.word	0x40013800

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f002 fb50 	bl	80041d0 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f8c5 	bl	8001cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000318 	.word	0x20000318
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	f107 0310 	add.w	r3, r7, #16
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	4a39      	ldr	r2, [pc, #228]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	6193      	str	r3, [r2, #24]
 8001b68:	4b37      	ldr	r3, [pc, #220]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b74:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	4a33      	ldr	r2, [pc, #204]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b7a:	f043 0320 	orr.w	r3, r3, #32
 8001b7e:	6193      	str	r3, [r2, #24]
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6193      	str	r3, [r2, #24]
 8001b98:	4b2b      	ldr	r3, [pc, #172]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001baa:	f043 0308 	orr.w	r3, r3, #8
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_GPIO_Init+0x100>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bc2:	4822      	ldr	r0, [pc, #136]	; (8001c4c <MX_GPIO_Init+0x104>)
 8001bc4:	f001 f941 	bl	8002e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS_Pin|RST_Pin, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4820      	ldr	r0, [pc, #128]	; (8001c50 <MX_GPIO_Init+0x108>)
 8001bce:	f001 f93c 	bl	8002e4a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be4:	f107 0310 	add.w	r3, r7, #16
 8001be8:	4619      	mov	r1, r3
 8001bea:	4818      	ldr	r0, [pc, #96]	; (8001c4c <MX_GPIO_Init+0x104>)
 8001bec:	f000 ff92 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4814      	ldr	r0, [pc, #80]	; (8001c54 <MX_GPIO_Init+0x10c>)
 8001c04:	f000 ff86 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS_Pin RST_Pin */
  GPIO_InitStruct.Pin = NSS_Pin|RST_Pin;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480c      	ldr	r0, [pc, #48]	; (8001c50 <MX_GPIO_Init+0x108>)
 8001c20:	f000 ff78 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8001c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <MX_GPIO_Init+0x110>)
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8001c32:	f107 0310 	add.w	r3, r7, #16
 8001c36:	4619      	mov	r1, r3
 8001c38:	4805      	ldr	r0, [pc, #20]	; (8001c50 <MX_GPIO_Init+0x108>)
 8001c3a:	f000 ff6b 	bl	8002b14 <HAL_GPIO_Init>

}
 8001c3e:	bf00      	nop
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40010c00 	.word	0x40010c00
 8001c54:	40010800 	.word	0x40010800
 8001c58:	10110000 	.word	0x10110000

08001c5c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	if(PZEM.rxbufferIndex >30)
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c66:	791b      	ldrb	r3, [r3, #4]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b1e      	cmp	r3, #30
 8001c6c:	d902      	bls.n	8001c74 <HAL_UART_RxCpltCallback+0x18>
	{
		 PZEM.rxbufferIndex=0;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	711a      	strb	r2, [r3, #4]
	}

	if (huart->Instance == UART_PZEM) //queried which uart is used
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a10      	ldr	r2, [pc, #64]	; (8001cbc <HAL_UART_RxCpltCallback+0x60>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d117      	bne.n	8001cae <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(PZEM.huart,&PZEM.byteRx[0], 1);
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2201      	movs	r2, #1
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_UART_RxCpltCallback+0x64>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f002 fb81 	bl	800438e <HAL_UART_Receive_IT>
		PZEM.rxBuffer[PZEM.rxbufferIndex] =PZEM.byteRx[0];
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c8e:	791b      	ldrb	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	4619      	mov	r1, r3
 8001c94:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c96:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001c9c:	440b      	add	r3, r1
 8001c9e:	715a      	strb	r2, [r3, #5]
		PZEM.rxbufferIndex++;
 8001ca0:	4b05      	ldr	r3, [pc, #20]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001ca2:	791b      	ldrb	r3, [r3, #4]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <HAL_UART_RxCpltCallback+0x5c>)
 8001cac:	711a      	strb	r2, [r3, #4]
	}
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	2000020c 	.word	0x2000020c
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	2000022f 	.word	0x2000022f

08001cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cc8:	b672      	cpsid	i
}
 8001cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <Error_Handler+0x8>

08001cce <init_pzem>:
float value = 0.0;
char valueArray[100] = {0};


void init_pzem(pzem *pzem, UART_HandleTypeDef *huart, uint8_t addr)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	71fb      	strb	r3, [r7, #7]
	if(addr < 0x01 || addr > 0xF8)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <init_pzem+0x1a>
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	2bf8      	cmp	r3, #248	; 0xf8
 8001ce6:	d901      	bls.n	8001cec <init_pzem+0x1e>
	{
		addr = PZEM_DEFAULT_ADDR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	71fb      	strb	r3, [r7, #7]
	}
	pzem->_addr = addr;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	79fa      	ldrb	r2, [r7, #7]
 8001cf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pzem->huart = huart;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	68ba      	ldr	r2, [r7, #8]
 8001cf8:	601a      	str	r2, [r3, #0]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <sendCmd8>:
	}
	return 0;
}

void sendCmd8(pzem *pzem, uint8_t cmd, uint16_t rAddr, uint16_t val, uint16_t slave_addr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	4608      	mov	r0, r1
 8001d0e:	4611      	mov	r1, r2
 8001d10:	461a      	mov	r2, r3
 8001d12:	4603      	mov	r3, r0
 8001d14:	72fb      	strb	r3, [r7, #11]
 8001d16:	460b      	mov	r3, r1
 8001d18:	813b      	strh	r3, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
	uint8_t sendBuffer[8]; //send buffer

	if((slave_addr == 0xFFFF) || (slave_addr < 0x01) || (slave_addr > 0xF7))
 8001d1e:	8c3b      	ldrh	r3, [r7, #32]
 8001d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d005      	beq.n	8001d34 <sendCmd8+0x30>
 8001d28:	8c3b      	ldrh	r3, [r7, #32]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <sendCmd8+0x30>
 8001d2e:	8c3b      	ldrh	r3, [r7, #32]
 8001d30:	2bf7      	cmp	r3, #247	; 0xf7
 8001d32:	d903      	bls.n	8001d3c <sendCmd8+0x38>
	{
		slave_addr = pzem->_addr;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d3a:	843b      	strh	r3, [r7, #32]
	}

	sendBuffer[0] = slave_addr;					// set slave address
 8001d3c:	8c3b      	ldrh	r3, [r7, #32]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	743b      	strb	r3, [r7, #16]
	sendBuffer[1] = cmd;						// set command
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	747b      	strb	r3, [r7, #17]
	sendBuffer[2] = (rAddr >> 8) & 0xFF;		// set high byte of register address
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	74bb      	strb	r3, [r7, #18]
	sendBuffer[3] = (rAddr) & 0xFF;				// set low byte of register address
 8001d50:	893b      	ldrh	r3, [r7, #8]
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	74fb      	strb	r3, [r7, #19]
	sendBuffer[4] = (val >> 8) & 0xFF;			// set high byte of register value
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	753b      	strb	r3, [r7, #20]
	sendBuffer[5] = (val) & 0xFF;				// set low byte of register value
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	757b      	strb	r3, [r7, #21]

	setCRC((uint8_t *)sendBuffer, 8);
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	2108      	movs	r1, #8
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f83c 	bl	8001dea <setCRC>
	HAL_UART_Transmit(pzem->huart, sendBuffer, 8, 100);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	f107 0110 	add.w	r1, r7, #16
 8001d7a:	2364      	movs	r3, #100	; 0x64
 8001d7c:	2208      	movs	r2, #8
 8001d7e:	f002 fa74 	bl	800426a <HAL_UART_Transmit>
	HAL_Delay(100);
 8001d82:	2064      	movs	r0, #100	; 0x64
 8001d84:	f000 fce4 	bl	8002750 <HAL_Delay>
}
 8001d88:	bf00      	nop
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <checkCRC>:

uint8_t checkCRC(pzem *pzem, uint8_t len)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	460b      	mov	r3, r1
 8001d9a:	70fb      	strb	r3, [r7, #3]
	uint16_t crc_check, crc_buffer;
	crc_buffer = ((uint16_t)pzem->rxBuffer[len-2]  | (uint16_t)pzem->rxBuffer[len-1] << 8);
 8001d9c:	78fb      	ldrb	r3, [r7, #3]
 8001d9e:	3b02      	subs	r3, #2
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	4413      	add	r3, r2
 8001da4:	795b      	ldrb	r3, [r3, #5]
 8001da6:	b21a      	sxth	r2, r3
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	440b      	add	r3, r1
 8001db0:	795b      	ldrb	r3, [r3, #5]
 8001db2:	021b      	lsls	r3, r3, #8
 8001db4:	b21b      	sxth	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	81fb      	strh	r3, [r7, #14]
	crc_check = CRC16(pzem->rxBuffer, len-2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	1d5a      	adds	r2, r3, #5
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	b29b      	uxth	r3, r3
 8001dc4:	3b02      	subs	r3, #2
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f000 f834 	bl	8001e38 <CRC16>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	81bb      	strh	r3, [r7, #12]

	if(crc_buffer == crc_check)
 8001dd4:	89fa      	ldrh	r2, [r7, #14]
 8001dd6:	89bb      	ldrh	r3, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d101      	bne.n	8001de0 <checkCRC+0x50>
	{
		return 1;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <checkCRC+0x52>
	}
	else
	{
		return 0;
 8001de0:	2300      	movs	r3, #0
	}
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <setCRC>:


void setCRC(uint8_t *buf, uint16_t len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b084      	sub	sp, #16
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]
	if(len <= 2) return;		//sanity check
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d919      	bls.n	8001e30 <setCRC+0x46>

	uint16_t crc = CRC16(buf, len-2);		// crc of data
 8001dfc:	887b      	ldrh	r3, [r7, #2]
 8001dfe:	3b02      	subs	r3, #2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 f817 	bl	8001e38 <CRC16>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	81fb      	strh	r3, [r7, #14]

	// Write high and low byte to last positions of sendBuffer
	buf[len - 1] = (crc >> 8) & 0xFF;		// high byte
 8001e0e:	89fb      	ldrh	r3, [r7, #14]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b299      	uxth	r1, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	b2ca      	uxtb	r2, r1
 8001e1e:	701a      	strb	r2, [r3, #0]
	buf[len - 2] = crc & 0xFF;				// low byte
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	3b02      	subs	r3, #2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	89fa      	ldrh	r2, [r7, #14]
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	701a      	strb	r2, [r3, #0]
 8001e2e:	e000      	b.n	8001e32 <setCRC+0x48>
	if(len <= 2) return;		//sanity check
 8001e30:	bf00      	nop

}
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <CRC16>:
    0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
    0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040
};

uint16_t CRC16(const volatile uint8_t *data, uint16_t len)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
    uint8_t nTemp; // CRC table index
    uint16_t crc = 0xFFFF; // Default value
 8001e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e48:	81fb      	strh	r3, [r7, #14]

    while (len--)
 8001e4a:	e012      	b.n	8001e72 <CRC16+0x3a>
    {
        nTemp = (*data++) ^ crc;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	607a      	str	r2, [r7, #4]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	89fb      	ldrh	r3, [r7, #14]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4053      	eors	r3, r2
 8001e5c:	737b      	strb	r3, [r7, #13]
        crc >>= 8;
 8001e5e:	89fb      	ldrh	r3, [r7, #14]
 8001e60:	0a1b      	lsrs	r3, r3, #8
 8001e62:	81fb      	strh	r3, [r7, #14]
        crc ^= (uint16_t)crcTable[nTemp];
 8001e64:	7b7b      	ldrb	r3, [r7, #13]
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <CRC16+0x50>)
 8001e68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001e6c:	89fb      	ldrh	r3, [r7, #14]
 8001e6e:	4053      	eors	r3, r2
 8001e70:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	807a      	strh	r2, [r7, #2]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e7      	bne.n	8001e4c <CRC16+0x14>
    }
    return crc;
 8001e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr
 8001e88:	080095d0 	.word	0x080095d0

08001e8c <updateValues>:

uint8_t updateValues(pzem *pzem)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	6078      	str	r0, [r7, #4]
	sendCmd8(pzem, (uint8_t)CMD_RIR, 0x00, 0x0A, (uint16_t)pzem->_addr);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	230a      	movs	r3, #10
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff2d 	bl	8001d04 <sendCmd8>
//	while(isrPzem);
//	isrPzem = 1;
	if(checkCRC(pzem, 25))
 8001eaa:	2119      	movs	r1, #25
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff6f 	bl	8001d90 <checkCRC>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80bb 	beq.w	8002030 <updateValues+0x1a4>
	{
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	7a1b      	ldrb	r3, [r3, #8]
 8001ebe:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	7a52      	ldrb	r2, [r2, #9]
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001ec4:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[4])/10.0;
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fa8c 	bl	80003e4 <__aeabi_ui2d>
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	4b5a      	ldr	r3, [pc, #360]	; (800203c <updateValues+0x1b0>)
 8001ed2:	f7fe fc2b 	bl	800072c <__aeabi_ddiv>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fdf3 	bl	8000ac8 <__aeabi_d2f>
 8001ee2:	4602      	mov	r2, r0
		pzem->values.voltage = ((uint32_t)pzem->rxBuffer[3] << 8 | // Raw voltage in 0.1V
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	; 0x28
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7a9b      	ldrb	r3, [r3, #10]
 8001eec:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[6] |
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	7ad2      	ldrb	r2, [r2, #11]
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001ef2:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	7b1b      	ldrb	r3, [r3, #12]
 8001ef8:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[6] |
 8001efa:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	7b5b      	ldrb	r3, [r3, #13]
 8001f00:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[7] << 24 |
 8001f02:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[8] << 16) / 1000.0;
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fa6d 	bl	80003e4 <__aeabi_ui2d>
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <updateValues+0x1b4>)
 8001f10:	f7fe fc0c 	bl	800072c <__aeabi_ddiv>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fdd4 	bl	8000ac8 <__aeabi_d2f>
 8001f20:	4602      	mov	r2, r0
		pzem->values.current = ((uint32_t)pzem->rxBuffer[5] << 8 | // Raw current in 0.001A
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	62da      	str	r2, [r3, #44]	; 0x2c

		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7b9b      	ldrb	r3, [r3, #14]
 8001f2a:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[10] |
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	7bd2      	ldrb	r2, [r2, #15]
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001f30:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[11] << 24 |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	7c1b      	ldrb	r3, [r3, #16]
 8001f36:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[10] |
 8001f38:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7c5b      	ldrb	r3, [r3, #17]
 8001f3e:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[11] << 24 |
 8001f40:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[12] << 16) / 10.0;
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe fa4e 	bl	80003e4 <__aeabi_ui2d>
 8001f48:	f04f 0200 	mov.w	r2, #0
 8001f4c:	4b3b      	ldr	r3, [pc, #236]	; (800203c <updateValues+0x1b0>)
 8001f4e:	f7fe fbed 	bl	800072c <__aeabi_ddiv>
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4610      	mov	r0, r2
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f7fe fdb5 	bl	8000ac8 <__aeabi_d2f>
 8001f5e:	4602      	mov	r2, r0
		pzem->values.power =   ((uint32_t)pzem->rxBuffer[9] << 8 | // Raw power in 0.1W
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30

		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7c9b      	ldrb	r3, [r3, #18]
 8001f68:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[14] |
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	7cd2      	ldrb	r2, [r2, #19]
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001f6e:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[15] << 24 |
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7d1b      	ldrb	r3, [r3, #20]
 8001f74:	061b      	lsls	r3, r3, #24
								(uint32_t)pzem->rxBuffer[14] |
 8001f76:	431a      	orrs	r2, r3
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7d5b      	ldrb	r3, [r3, #21]
 8001f7c:	041b      	lsls	r3, r3, #16
								(uint32_t)pzem->rxBuffer[15] << 24 |
 8001f7e:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[16] << 16) / 1000.0;
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fa2f 	bl	80003e4 <__aeabi_ui2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <updateValues+0x1b4>)
 8001f8c:	f7fe fbce 	bl	800072c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fd96 	bl	8000ac8 <__aeabi_d2f>
 8001f9c:	4602      	mov	r2, r0
		pzem->values.energy =  ((uint32_t)pzem->rxBuffer[13] << 8 | // Raw Energy in 1Wh
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	635a      	str	r2, [r3, #52]	; 0x34

		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7d9b      	ldrb	r3, [r3, #22]
 8001fa6:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	7dd2      	ldrb	r2, [r2, #23]
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8001fac:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[18]) / 10.0;
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fa18 	bl	80003e4 <__aeabi_ui2d>
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	4b20      	ldr	r3, [pc, #128]	; (800203c <updateValues+0x1b0>)
 8001fba:	f7fe fbb7 	bl	800072c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd7f 	bl	8000ac8 <__aeabi_d2f>
 8001fca:	4602      	mov	r2, r0
		pzem->values.frequency=((uint32_t)pzem->rxBuffer[17] << 8 | // Raw Frequency in 0.1Hz
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	639a      	str	r2, [r3, #56]	; 0x38

		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7e1b      	ldrb	r3, [r3, #24]
 8001fd4:	021b      	lsls	r3, r3, #8
								(uint32_t)pzem->rxBuffer[20])/100.0;
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	7e52      	ldrb	r2, [r2, #25]
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8001fda:	4313      	orrs	r3, r2
								(uint32_t)pzem->rxBuffer[20])/100.0;
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fa01 	bl	80003e4 <__aeabi_ui2d>
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b17      	ldr	r3, [pc, #92]	; (8002044 <updateValues+0x1b8>)
 8001fe8:	f7fe fba0 	bl	800072c <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fd68 	bl	8000ac8 <__aeabi_d2f>
 8001ff8:	4602      	mov	r2, r0
		pzem->values.pf =      ((uint32_t)pzem->rxBuffer[19] << 8 | // Raw pf in 0.01
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	63da      	str	r2, [r3, #60]	; 0x3c

		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	7e9b      	ldrb	r3, [r3, #26]
 8002002:	b29b      	uxth	r3, r3
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b29a      	uxth	r2, r3
								(uint32_t)pzem->rxBuffer[22]);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7edb      	ldrb	r3, [r3, #27]
 800200c:	b29b      	uxth	r3, r3
		pzem->values.alarms =  ((uint32_t)pzem->rxBuffer[21] << 8 | // Raw alarm value
 800200e:	4313      	orrs	r3, r2
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
		memset(pzem->rxBuffer,0,sizeof(pzem->rxBuffer));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3305      	adds	r3, #5
 800201c:	221e      	movs	r2, #30
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f002 fe37 	bl	8004c94 <memset>
		pzem->rxbufferIndex=0;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	711a      	strb	r2, [r3, #4]

		return 1;
 800202c:	2301      	movs	r3, #1
 800202e:	e000      	b.n	8002032 <updateValues+0x1a6>
	}
	return 0;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40240000 	.word	0x40240000
 8002040:	408f4000 	.word	0x408f4000
 8002044:	40590000 	.word	0x40590000

08002048 <SPI_Voltage_Transmit>:
}



void SPI_Voltage_Transmit(LoRa* _LoRa, pzem *pzem)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
	value = pzem->values.voltage;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	4a0e      	ldr	r2, [pc, #56]	; (8002090 <SPI_Voltage_Transmit+0x48>)
 8002058:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Voltage: %.1fV\r\n", value);
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <SPI_Voltage_Transmit+0x48>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe f9e2 	bl	8000428 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	490a      	ldr	r1, [pc, #40]	; (8002094 <SPI_Voltage_Transmit+0x4c>)
 800206a:	480b      	ldr	r0, [pc, #44]	; (8002098 <SPI_Voltage_Transmit+0x50>)
 800206c:	f003 fc8c 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <SPI_Voltage_Transmit+0x50>)
 8002072:	f7fe f86d 	bl	8000150 <strlen>
 8002076:	4603      	mov	r3, r0
 8002078:	b2da      	uxtb	r2, r3
 800207a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800207e:	4906      	ldr	r1, [pc, #24]	; (8002098 <SPI_Voltage_Transmit+0x50>)
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fab0 	bl	80015e6 <LoRa_transmit>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200003cc 	.word	0x200003cc
 8002094:	08009548 	.word	0x08009548
 8002098:	200003d0 	.word	0x200003d0

0800209c <SPI_Current_Transmit>:

void SPI_Current_Transmit(LoRa* _LoRa, pzem *pzem)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
	value = pzem->values.current;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020aa:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <SPI_Current_Transmit+0x48>)
 80020ac:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Current: %.3fA\r\n", value);
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <SPI_Current_Transmit+0x48>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f9b8 	bl	8000428 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	490a      	ldr	r1, [pc, #40]	; (80020e8 <SPI_Current_Transmit+0x4c>)
 80020be:	480b      	ldr	r0, [pc, #44]	; (80020ec <SPI_Current_Transmit+0x50>)
 80020c0:	f003 fc62 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 80020c4:	4809      	ldr	r0, [pc, #36]	; (80020ec <SPI_Current_Transmit+0x50>)
 80020c6:	f7fe f843 	bl	8000150 <strlen>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80020d2:	4906      	ldr	r1, [pc, #24]	; (80020ec <SPI_Current_Transmit+0x50>)
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff fa86 	bl	80015e6 <LoRa_transmit>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	200003cc 	.word	0x200003cc
 80020e8:	0800955c 	.word	0x0800955c
 80020ec:	200003d0 	.word	0x200003d0

080020f0 <SPI_Power_Transmit>:

void SPI_Power_Transmit(LoRa* _LoRa, pzem *pzem)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	value = pzem->values.power;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <SPI_Power_Transmit+0x48>)
 8002100:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Power: %.1fW\r\n", value);
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <SPI_Power_Transmit+0x48>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f98e 	bl	8000428 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	490a      	ldr	r1, [pc, #40]	; (800213c <SPI_Power_Transmit+0x4c>)
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <SPI_Power_Transmit+0x50>)
 8002114:	f003 fc38 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 8002118:	4809      	ldr	r0, [pc, #36]	; (8002140 <SPI_Power_Transmit+0x50>)
 800211a:	f7fe f819 	bl	8000150 <strlen>
 800211e:	4603      	mov	r3, r0
 8002120:	b2da      	uxtb	r2, r3
 8002122:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002126:	4906      	ldr	r1, [pc, #24]	; (8002140 <SPI_Power_Transmit+0x50>)
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fa5c 	bl	80015e6 <LoRa_transmit>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200003cc 	.word	0x200003cc
 800213c:	08009570 	.word	0x08009570
 8002140:	200003d0 	.word	0x200003d0

08002144 <SPI_Energy_Transmit>:

void SPI_Energy_Transmit(LoRa* _LoRa, pzem *pzem)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
	value = pzem->values.energy;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002152:	4a0e      	ldr	r2, [pc, #56]	; (800218c <SPI_Energy_Transmit+0x48>)
 8002154:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Energy: %.2fWh\r\n", value);
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <SPI_Energy_Transmit+0x48>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe f964 	bl	8000428 <__aeabi_f2d>
 8002160:	4602      	mov	r2, r0
 8002162:	460b      	mov	r3, r1
 8002164:	490a      	ldr	r1, [pc, #40]	; (8002190 <SPI_Energy_Transmit+0x4c>)
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <SPI_Energy_Transmit+0x50>)
 8002168:	f003 fc0e 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 800216c:	4809      	ldr	r0, [pc, #36]	; (8002194 <SPI_Energy_Transmit+0x50>)
 800216e:	f7fd ffef 	bl	8000150 <strlen>
 8002172:	4603      	mov	r3, r0
 8002174:	b2da      	uxtb	r2, r3
 8002176:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <SPI_Energy_Transmit+0x50>)
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff fa32 	bl	80015e6 <LoRa_transmit>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200003cc 	.word	0x200003cc
 8002190:	08009580 	.word	0x08009580
 8002194:	200003d0 	.word	0x200003d0

08002198 <SPI_Frequency_Transmit>:

void SPI_Frequency_Transmit(LoRa* _LoRa, pzem *pzem)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	value = pzem->values.frequency;
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a6:	4a0e      	ldr	r2, [pc, #56]	; (80021e0 <SPI_Frequency_Transmit+0x48>)
 80021a8:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Frequency: %.1fHz\r\n", value);
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <SPI_Frequency_Transmit+0x48>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe f93a 	bl	8000428 <__aeabi_f2d>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	490a      	ldr	r1, [pc, #40]	; (80021e4 <SPI_Frequency_Transmit+0x4c>)
 80021ba:	480b      	ldr	r0, [pc, #44]	; (80021e8 <SPI_Frequency_Transmit+0x50>)
 80021bc:	f003 fbe4 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 80021c0:	4809      	ldr	r0, [pc, #36]	; (80021e8 <SPI_Frequency_Transmit+0x50>)
 80021c2:	f7fd ffc5 	bl	8000150 <strlen>
 80021c6:	4603      	mov	r3, r0
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80021ce:	4906      	ldr	r1, [pc, #24]	; (80021e8 <SPI_Frequency_Transmit+0x50>)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f7ff fa08 	bl	80015e6 <LoRa_transmit>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200003cc 	.word	0x200003cc
 80021e4:	08009594 	.word	0x08009594
 80021e8:	200003d0 	.word	0x200003d0

080021ec <SPI_pF_Transmit>:

void SPI_pF_Transmit(LoRa* _LoRa, pzem *pzem)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	value = pzem->values.pf;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <SPI_pF_Transmit+0x48>)
 80021fc:	6013      	str	r3, [r2, #0]
	sprintf(valueArray, "Power factor: %.2f\r\n", value);
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <SPI_pF_Transmit+0x48>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f910 	bl	8000428 <__aeabi_f2d>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	490a      	ldr	r1, [pc, #40]	; (8002238 <SPI_pF_Transmit+0x4c>)
 800220e:	480b      	ldr	r0, [pc, #44]	; (800223c <SPI_pF_Transmit+0x50>)
 8002210:	f003 fbba 	bl	8005988 <siprintf>
	LoRa_transmit(_LoRa, (uint8_t*) valueArray, strlen(valueArray), 3000);
 8002214:	4809      	ldr	r0, [pc, #36]	; (800223c <SPI_pF_Transmit+0x50>)
 8002216:	f7fd ff9b 	bl	8000150 <strlen>
 800221a:	4603      	mov	r3, r0
 800221c:	b2da      	uxtb	r2, r3
 800221e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002222:	4906      	ldr	r1, [pc, #24]	; (800223c <SPI_pF_Transmit+0x50>)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff f9de 	bl	80015e6 <LoRa_transmit>
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200003cc 	.word	0x200003cc
 8002238:	080095a8 	.word	0x080095a8
 800223c:	200003d0 	.word	0x200003d0

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_MspInit+0x5c>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_MspInit+0x5c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6193      	str	r3, [r2, #24]
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_MspInit+0x5c>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_MspInit+0x5c>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_MspInit+0x5c>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	61d3      	str	r3, [r2, #28]
 800226a:	4b0c      	ldr	r3, [pc, #48]	; (800229c <HAL_MspInit+0x5c>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002276:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_MspInit+0x60>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_MspInit+0x60>)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	40010000 	.word	0x40010000

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0310 	add.w	r3, r7, #16
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a1b      	ldr	r2, [pc, #108]	; (800232c <HAL_SPI_MspInit+0x88>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d12f      	bne.n	8002324 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c4:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4a19      	ldr	r2, [pc, #100]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ce:	6193      	str	r3, [r2, #24]
 80022d0:	4b17      	ldr	r3, [pc, #92]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6193      	str	r3, [r2, #24]
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_SPI_MspInit+0x8c>)
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022f4:	23a0      	movs	r3, #160	; 0xa0
 80022f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022fc:	2303      	movs	r3, #3
 80022fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002300:	f107 0310 	add.w	r3, r7, #16
 8002304:	4619      	mov	r1, r3
 8002306:	480b      	ldr	r0, [pc, #44]	; (8002334 <HAL_SPI_MspInit+0x90>)
 8002308:	f000 fc04 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800230c:	2340      	movs	r3, #64	; 0x40
 800230e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002318:	f107 0310 	add.w	r3, r7, #16
 800231c:	4619      	mov	r1, r3
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <HAL_SPI_MspInit+0x90>)
 8002320:	f000 fbf8 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40013000 	.word	0x40013000
 8002330:	40021000 	.word	0x40021000
 8002334:	40010800 	.word	0x40010800

08002338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002340:	f107 0318 	add.w	r3, r7, #24
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a3b      	ldr	r2, [pc, #236]	; (8002440 <HAL_UART_MspInit+0x108>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d13a      	bne.n	80023ce <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002358:	4b3a      	ldr	r3, [pc, #232]	; (8002444 <HAL_UART_MspInit+0x10c>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	4a39      	ldr	r2, [pc, #228]	; (8002444 <HAL_UART_MspInit+0x10c>)
 800235e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002362:	6193      	str	r3, [r2, #24]
 8002364:	4b37      	ldr	r3, [pc, #220]	; (8002444 <HAL_UART_MspInit+0x10c>)
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002370:	4b34      	ldr	r3, [pc, #208]	; (8002444 <HAL_UART_MspInit+0x10c>)
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	4a33      	ldr	r2, [pc, #204]	; (8002444 <HAL_UART_MspInit+0x10c>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6193      	str	r3, [r2, #24]
 800237c:	4b31      	ldr	r3, [pc, #196]	; (8002444 <HAL_UART_MspInit+0x10c>)
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 0318 	add.w	r3, r7, #24
 800239a:	4619      	mov	r1, r3
 800239c:	482a      	ldr	r0, [pc, #168]	; (8002448 <HAL_UART_MspInit+0x110>)
 800239e:	f000 fbb9 	bl	8002b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	4619      	mov	r1, r3
 80023b6:	4824      	ldr	r0, [pc, #144]	; (8002448 <HAL_UART_MspInit+0x110>)
 80023b8:	f000 fbac 	bl	8002b14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	2025      	movs	r0, #37	; 0x25
 80023c2:	f000 fac0 	bl	8002946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023c6:	2025      	movs	r0, #37	; 0x25
 80023c8:	f000 fad9 	bl	800297e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80023cc:	e034      	b.n	8002438 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_UART_MspInit+0x114>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d12f      	bne.n	8002438 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80023d8:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023da:	69db      	ldr	r3, [r3, #28]
 80023dc:	4a19      	ldr	r2, [pc, #100]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e2:	61d3      	str	r3, [r2, #28]
 80023e4:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023e6:	69db      	ldr	r3, [r3, #28]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f0:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a13      	ldr	r2, [pc, #76]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_UART_MspInit+0x10c>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002408:	2304      	movs	r3, #4
 800240a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002410:	2303      	movs	r3, #3
 8002412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	4619      	mov	r1, r3
 800241a:	480b      	ldr	r0, [pc, #44]	; (8002448 <HAL_UART_MspInit+0x110>)
 800241c:	f000 fb7a 	bl	8002b14 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002420:	2308      	movs	r3, #8
 8002422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242c:	f107 0318 	add.w	r3, r7, #24
 8002430:	4619      	mov	r1, r3
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <HAL_UART_MspInit+0x110>)
 8002434:	f000 fb6e 	bl	8002b14 <HAL_GPIO_Init>
}
 8002438:	bf00      	nop
 800243a:	3728      	adds	r7, #40	; 0x28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013800 	.word	0x40013800
 8002444:	40021000 	.word	0x40021000
 8002448:	40010800 	.word	0x40010800
 800244c:	40004400 	.word	0x40004400

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	bc80      	pop	{r7}
 8002478:	4770      	bx	lr

0800247a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247a:	b480      	push	{r7}
 800247c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr

08002486 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002496:	f000 f93f 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800249a:	bf00      	nop
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80024a4:	4802      	ldr	r0, [pc, #8]	; (80024b0 <USART1_IRQHandler+0x10>)
 80024a6:	f001 ffa3 	bl	80043f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024aa:	bf00      	nop
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	200002d4 	.word	0x200002d4

080024b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
	return 1;
 80024b8:	2301      	movs	r3, #1
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <_kill>:

int _kill(int pid, int sig)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80024cc:	f002 fbb8 	bl	8004c40 <__errno>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2216      	movs	r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
	return -1;
 80024d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <_exit>:

void _exit (int status)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80024ea:	f04f 31ff 	mov.w	r1, #4294967295
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffe7 	bl	80024c2 <_kill>
	while (1) {}		/* Make sure we hang here */
 80024f4:	e7fe      	b.n	80024f4 <_exit+0x12>

080024f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	60f8      	str	r0, [r7, #12]
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
 8002506:	e00a      	b.n	800251e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002508:	f3af 8000 	nop.w
 800250c:	4601      	mov	r1, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	60ba      	str	r2, [r7, #8]
 8002514:	b2ca      	uxtb	r2, r1
 8002516:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	429a      	cmp	r2, r3
 8002524:	dbf0      	blt.n	8002508 <_read+0x12>
	}

return len;
 8002526:	687b      	ldr	r3, [r7, #4]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
 8002540:	e009      	b.n	8002556 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	60ba      	str	r2, [r7, #8]
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3301      	adds	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	429a      	cmp	r2, r3
 800255c:	dbf1      	blt.n	8002542 <_write+0x12>
	}
	return len;
 800255e:	687b      	ldr	r3, [r7, #4]
}
 8002560:	4618      	mov	r0, r3
 8002562:	3718      	adds	r7, #24
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_close>:

int _close(int file)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
	return -1;
 8002570:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800257e:	b480      	push	{r7}
 8002580:	b083      	sub	sp, #12
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800258e:	605a      	str	r2, [r3, #4]
	return 0;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	370c      	adds	r7, #12
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <_isatty>:

int _isatty(int file)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	return 1;
 80025a4:	2301      	movs	r3, #1
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
	return 0;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025d0:	4a14      	ldr	r2, [pc, #80]	; (8002624 <_sbrk+0x5c>)
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <_sbrk+0x60>)
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025dc:	4b13      	ldr	r3, [pc, #76]	; (800262c <_sbrk+0x64>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <_sbrk+0x64>)
 80025e6:	4a12      	ldr	r2, [pc, #72]	; (8002630 <_sbrk+0x68>)
 80025e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ea:	4b10      	ldr	r3, [pc, #64]	; (800262c <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d207      	bcs.n	8002608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f8:	f002 fb22 	bl	8004c40 <__errno>
 80025fc:	4603      	mov	r3, r0
 80025fe:	220c      	movs	r2, #12
 8002600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	e009      	b.n	800261c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <_sbrk+0x64>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800260e:	4b07      	ldr	r3, [pc, #28]	; (800262c <_sbrk+0x64>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4413      	add	r3, r2
 8002616:	4a05      	ldr	r2, [pc, #20]	; (800262c <_sbrk+0x64>)
 8002618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800261a:	68fb      	ldr	r3, [r7, #12]
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20005000 	.word	0x20005000
 8002628:	00000400 	.word	0x00000400
 800262c:	20000434 	.word	0x20000434
 8002630:	20000450 	.word	0x20000450

08002634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002638:	bf00      	nop
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	; (8002674 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	; (8002678 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	; (8002684 <LoopFillZerobss+0x22>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002666:	f7ff ffe5 	bl	8002634 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800266a:	f002 faef 	bl	8004c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800266e:	f7ff f8f5 	bl	800185c <main>
  bx lr
 8002672:	4770      	bx	lr
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800267c:	08009c94 	.word	0x08009c94
  ldr r2, =_sbss
 8002680:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002684:	2000044c 	.word	0x2000044c

08002688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC1_2_IRQHandler>
	...

0800268c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_Init+0x28>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_Init+0x28>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 f947 	bl	8002930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7ff fdca 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40022000 	.word	0x40022000

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f95f 	bl	800299a <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295
 80026f4:	f000 f927 	bl	8002946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	; (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000000 	.word	0x20000000
 8002710:	20000008 	.word	0x20000008
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_IncTick+0x1c>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_IncTick+0x20>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_IncTick+0x20>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000008 	.word	0x20000008
 8002738:	20000438 	.word	0x20000438

0800273c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return uwTick;
 8002740:	4b02      	ldr	r3, [pc, #8]	; (800274c <HAL_GetTick+0x10>)
 8002742:	681b      	ldr	r3, [r3, #0]
}
 8002744:	4618      	mov	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr
 800274c:	20000438 	.word	0x20000438

08002750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff fff0 	bl	800273c <HAL_GetTick>
 800275c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d005      	beq.n	8002776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800276a:	4b0a      	ldr	r3, [pc, #40]	; (8002794 <HAL_Delay+0x44>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	bf00      	nop
 8002778:	f7ff ffe0 	bl	800273c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	429a      	cmp	r2, r3
 8002786:	d8f7      	bhi.n	8002778 <HAL_Delay+0x28>
  {
  }
}
 8002788:	bf00      	nop
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	20000008 	.word	0x20000008

08002798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002798:	b480      	push	{r7}
 800279a:	b085      	sub	sp, #20
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027b4:	4013      	ands	r3, r2
 80027b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ca:	4a04      	ldr	r2, [pc, #16]	; (80027dc <__NVIC_SetPriorityGrouping+0x44>)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	60d3      	str	r3, [r2, #12]
}
 80027d0:	bf00      	nop
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <__NVIC_GetPriorityGrouping+0x18>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	0a1b      	lsrs	r3, r3, #8
 80027ea:	f003 0307 	and.w	r3, r3, #7
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	e000ed00 	.word	0xe000ed00

080027fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	2b00      	cmp	r3, #0
 800280c:	db0b      	blt.n	8002826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	f003 021f 	and.w	r2, r3, #31
 8002814:	4906      	ldr	r1, [pc, #24]	; (8002830 <__NVIC_EnableIRQ+0x34>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2001      	movs	r0, #1
 800281e:	fa00 f202 	lsl.w	r2, r0, r2
 8002822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100

08002834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	6039      	str	r1, [r7, #0]
 800283e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002844:	2b00      	cmp	r3, #0
 8002846:	db0a      	blt.n	800285e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	490c      	ldr	r1, [pc, #48]	; (8002880 <__NVIC_SetPriority+0x4c>)
 800284e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002852:	0112      	lsls	r2, r2, #4
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	440b      	add	r3, r1
 8002858:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800285c:	e00a      	b.n	8002874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	b2da      	uxtb	r2, r3
 8002862:	4908      	ldr	r1, [pc, #32]	; (8002884 <__NVIC_SetPriority+0x50>)
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	3b04      	subs	r3, #4
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	440b      	add	r3, r1
 8002872:	761a      	strb	r2, [r3, #24]
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	e000e100 	.word	0xe000e100
 8002884:	e000ed00 	.word	0xe000ed00

08002888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002888:	b480      	push	{r7}
 800288a:	b089      	sub	sp, #36	; 0x24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f1c3 0307 	rsb	r3, r3, #7
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	bf28      	it	cs
 80028a6:	2304      	movcs	r3, #4
 80028a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d902      	bls.n	80028b8 <NVIC_EncodePriority+0x30>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3b03      	subs	r3, #3
 80028b6:	e000      	b.n	80028ba <NVIC_EncodePriority+0x32>
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	f04f 32ff 	mov.w	r2, #4294967295
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43da      	mvns	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	401a      	ands	r2, r3
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028d0:	f04f 31ff 	mov.w	r1, #4294967295
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	fa01 f303 	lsl.w	r3, r1, r3
 80028da:	43d9      	mvns	r1, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	4313      	orrs	r3, r2
         );
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bc80      	pop	{r7}
 80028ea:	4770      	bx	lr

080028ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	3b01      	subs	r3, #1
 80028f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fc:	d301      	bcc.n	8002902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028fe:	2301      	movs	r3, #1
 8002900:	e00f      	b.n	8002922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002902:	4a0a      	ldr	r2, [pc, #40]	; (800292c <SysTick_Config+0x40>)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800290a:	210f      	movs	r1, #15
 800290c:	f04f 30ff 	mov.w	r0, #4294967295
 8002910:	f7ff ff90 	bl	8002834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002914:	4b05      	ldr	r3, [pc, #20]	; (800292c <SysTick_Config+0x40>)
 8002916:	2200      	movs	r2, #0
 8002918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800291a:	4b04      	ldr	r3, [pc, #16]	; (800292c <SysTick_Config+0x40>)
 800291c:	2207      	movs	r2, #7
 800291e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	e000e010 	.word	0xe000e010

08002930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff2d 	bl	8002798 <__NVIC_SetPriorityGrouping>
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002958:	f7ff ff42 	bl	80027e0 <__NVIC_GetPriorityGrouping>
 800295c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	6978      	ldr	r0, [r7, #20]
 8002964:	f7ff ff90 	bl	8002888 <NVIC_EncodePriority>
 8002968:	4602      	mov	r2, r0
 800296a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff5f 	bl	8002834 <__NVIC_SetPriority>
}
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	4603      	mov	r3, r0
 8002986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff ff35 	bl	80027fc <__NVIC_EnableIRQ>
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ffa2 	bl	80028ec <SysTick_Config>
 80029a8:	4603      	mov	r3, r0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d008      	beq.n	80029da <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e020      	b.n	8002a1c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 020e 	bic.w	r2, r2, #14
 80029e8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	2101      	movs	r1, #1
 8002a04:	fa01 f202 	lsl.w	r2, r1, r2
 8002a08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3714      	adds	r7, #20
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d005      	beq.n	8002a4a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2204      	movs	r2, #4
 8002a42:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	73fb      	strb	r3, [r7, #15]
 8002a48:	e051      	b.n	8002aee <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020e 	bic.w	r2, r2, #14
 8002a58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a22      	ldr	r2, [pc, #136]	; (8002af8 <HAL_DMA_Abort_IT+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d029      	beq.n	8002ac8 <HAL_DMA_Abort_IT+0xa0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a20      	ldr	r2, [pc, #128]	; (8002afc <HAL_DMA_Abort_IT+0xd4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_Abort_IT+0x9c>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a1f      	ldr	r2, [pc, #124]	; (8002b00 <HAL_DMA_Abort_IT+0xd8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01a      	beq.n	8002abe <HAL_DMA_Abort_IT+0x96>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <HAL_DMA_Abort_IT+0xdc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d012      	beq.n	8002ab8 <HAL_DMA_Abort_IT+0x90>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a1c      	ldr	r2, [pc, #112]	; (8002b08 <HAL_DMA_Abort_IT+0xe0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00a      	beq.n	8002ab2 <HAL_DMA_Abort_IT+0x8a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_DMA_Abort_IT+0xe4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d102      	bne.n	8002aac <HAL_DMA_Abort_IT+0x84>
 8002aa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002aaa:	e00e      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002aac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ab0:	e00b      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ab6:	e008      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002abc:	e005      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002abe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ac2:	e002      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002ac4:	2310      	movs	r3, #16
 8002ac6:	e000      	b.n	8002aca <HAL_DMA_Abort_IT+0xa2>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	4a11      	ldr	r2, [pc, #68]	; (8002b10 <HAL_DMA_Abort_IT+0xe8>)
 8002acc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4798      	blx	r3
    } 
  }
  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40020008 	.word	0x40020008
 8002afc:	4002001c 	.word	0x4002001c
 8002b00:	40020030 	.word	0x40020030
 8002b04:	40020044 	.word	0x40020044
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	4002006c 	.word	0x4002006c
 8002b10:	40020000 	.word	0x40020000

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b08b      	sub	sp, #44	; 0x2c
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b26:	e169      	b.n	8002dfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	f040 8158 	bne.w	8002df6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	4a9a      	ldr	r2, [pc, #616]	; (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d05e      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b50:	4a98      	ldr	r2, [pc, #608]	; (8002db4 <HAL_GPIO_Init+0x2a0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d875      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b56:	4a98      	ldr	r2, [pc, #608]	; (8002db8 <HAL_GPIO_Init+0x2a4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d058      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b5c:	4a96      	ldr	r2, [pc, #600]	; (8002db8 <HAL_GPIO_Init+0x2a4>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d86f      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b62:	4a96      	ldr	r2, [pc, #600]	; (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d052      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b68:	4a94      	ldr	r2, [pc, #592]	; (8002dbc <HAL_GPIO_Init+0x2a8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d869      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b6e:	4a94      	ldr	r2, [pc, #592]	; (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d04c      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b74:	4a92      	ldr	r2, [pc, #584]	; (8002dc0 <HAL_GPIO_Init+0x2ac>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d863      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b7a:	4a92      	ldr	r2, [pc, #584]	; (8002dc4 <HAL_GPIO_Init+0x2b0>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d046      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
 8002b80:	4a90      	ldr	r2, [pc, #576]	; (8002dc4 <HAL_GPIO_Init+0x2b0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d85d      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b86:	2b12      	cmp	r3, #18
 8002b88:	d82a      	bhi.n	8002be0 <HAL_GPIO_Init+0xcc>
 8002b8a:	2b12      	cmp	r3, #18
 8002b8c:	d859      	bhi.n	8002c42 <HAL_GPIO_Init+0x12e>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <HAL_GPIO_Init+0x80>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002c0f 	.word	0x08002c0f
 8002b98:	08002be9 	.word	0x08002be9
 8002b9c:	08002bfb 	.word	0x08002bfb
 8002ba0:	08002c3d 	.word	0x08002c3d
 8002ba4:	08002c43 	.word	0x08002c43
 8002ba8:	08002c43 	.word	0x08002c43
 8002bac:	08002c43 	.word	0x08002c43
 8002bb0:	08002c43 	.word	0x08002c43
 8002bb4:	08002c43 	.word	0x08002c43
 8002bb8:	08002c43 	.word	0x08002c43
 8002bbc:	08002c43 	.word	0x08002c43
 8002bc0:	08002c43 	.word	0x08002c43
 8002bc4:	08002c43 	.word	0x08002c43
 8002bc8:	08002c43 	.word	0x08002c43
 8002bcc:	08002c43 	.word	0x08002c43
 8002bd0:	08002c43 	.word	0x08002c43
 8002bd4:	08002c43 	.word	0x08002c43
 8002bd8:	08002bf1 	.word	0x08002bf1
 8002bdc:	08002c05 	.word	0x08002c05
 8002be0:	4a79      	ldr	r2, [pc, #484]	; (8002dc8 <HAL_GPIO_Init+0x2b4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002be6:	e02c      	b.n	8002c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	623b      	str	r3, [r7, #32]
          break;
 8002bee:	e029      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	623b      	str	r3, [r7, #32]
          break;
 8002bf8:	e024      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	623b      	str	r3, [r7, #32]
          break;
 8002c02:	e01f      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	330c      	adds	r3, #12
 8002c0a:	623b      	str	r3, [r7, #32]
          break;
 8002c0c:	e01a      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d102      	bne.n	8002c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c16:	2304      	movs	r3, #4
 8002c18:	623b      	str	r3, [r7, #32]
          break;
 8002c1a:	e013      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d105      	bne.n	8002c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c24:	2308      	movs	r3, #8
 8002c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	69fa      	ldr	r2, [r7, #28]
 8002c2c:	611a      	str	r2, [r3, #16]
          break;
 8002c2e:	e009      	b.n	8002c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c30:	2308      	movs	r3, #8
 8002c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69fa      	ldr	r2, [r7, #28]
 8002c38:	615a      	str	r2, [r3, #20]
          break;
 8002c3a:	e003      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	623b      	str	r3, [r7, #32]
          break;
 8002c40:	e000      	b.n	8002c44 <HAL_GPIO_Init+0x130>
          break;
 8002c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2bff      	cmp	r3, #255	; 0xff
 8002c48:	d801      	bhi.n	8002c4e <HAL_GPIO_Init+0x13a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	e001      	b.n	8002c52 <HAL_GPIO_Init+0x13e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3304      	adds	r3, #4
 8002c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2bff      	cmp	r3, #255	; 0xff
 8002c58:	d802      	bhi.n	8002c60 <HAL_GPIO_Init+0x14c>
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	e002      	b.n	8002c66 <HAL_GPIO_Init+0x152>
 8002c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c62:	3b08      	subs	r3, #8
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	210f      	movs	r1, #15
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	fa01 f303 	lsl.w	r3, r1, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	401a      	ands	r2, r3
 8002c78:	6a39      	ldr	r1, [r7, #32]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	431a      	orrs	r2, r3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80b1 	beq.w	8002df6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c94:	4b4d      	ldr	r3, [pc, #308]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	4a4c      	ldr	r2, [pc, #304]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	6193      	str	r3, [r2, #24]
 8002ca0:	4b4a      	ldr	r3, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x2b8>)
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cac:	4a48      	ldr	r2, [pc, #288]	; (8002dd0 <HAL_GPIO_Init+0x2bc>)
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	089b      	lsrs	r3, r3, #2
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <HAL_GPIO_Init+0x2c0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d013      	beq.n	8002d00 <HAL_GPIO_Init+0x1ec>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <HAL_GPIO_Init+0x2c4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00d      	beq.n	8002cfc <HAL_GPIO_Init+0x1e8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <HAL_GPIO_Init+0x2c8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <HAL_GPIO_Init+0x1e4>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3d      	ldr	r2, [pc, #244]	; (8002de0 <HAL_GPIO_Init+0x2cc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_GPIO_Init+0x1e0>
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cf4:	2304      	movs	r3, #4
 8002cf6:	e004      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e002      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e000      	b.n	8002d02 <HAL_GPIO_Init+0x1ee>
 8002d00:	2300      	movs	r3, #0
 8002d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d04:	f002 0203 	and.w	r2, r2, #3
 8002d08:	0092      	lsls	r2, r2, #2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d12:	492f      	ldr	r1, [pc, #188]	; (8002dd0 <HAL_GPIO_Init+0x2bc>)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	089b      	lsrs	r3, r3, #2
 8002d18:	3302      	adds	r3, #2
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d006      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	492c      	ldr	r1, [pc, #176]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
 8002d38:	e006      	b.n	8002d48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	4928      	ldr	r1, [pc, #160]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d44:	4013      	ands	r3, r2
 8002d46:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	4922      	ldr	r1, [pc, #136]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	604b      	str	r3, [r1, #4]
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	491e      	ldr	r1, [pc, #120]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4918      	ldr	r1, [pc, #96]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	608b      	str	r3, [r1, #8]
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d8a:	4b16      	ldr	r3, [pc, #88]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d8c:	689a      	ldr	r2, [r3, #8]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	4914      	ldr	r1, [pc, #80]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d021      	beq.n	8002de8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	490e      	ldr	r1, [pc, #56]	; (8002de4 <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60cb      	str	r3, [r1, #12]
 8002db0:	e021      	b.n	8002df6 <HAL_GPIO_Init+0x2e2>
 8002db2:	bf00      	nop
 8002db4:	10320000 	.word	0x10320000
 8002db8:	10310000 	.word	0x10310000
 8002dbc:	10220000 	.word	0x10220000
 8002dc0:	10210000 	.word	0x10210000
 8002dc4:	10120000 	.word	0x10120000
 8002dc8:	10110000 	.word	0x10110000
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40010800 	.word	0x40010800
 8002dd8:	40010c00 	.word	0x40010c00
 8002ddc:	40011000 	.word	0x40011000
 8002de0:	40011400 	.word	0x40011400
 8002de4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002de8:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	4909      	ldr	r1, [pc, #36]	; (8002e18 <HAL_GPIO_Init+0x304>)
 8002df2:	4013      	ands	r3, r2
 8002df4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	3301      	adds	r3, #1
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	fa22 f303 	lsr.w	r3, r2, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f47f ae8e 	bne.w	8002b28 <HAL_GPIO_Init+0x14>
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
 8002e10:	372c      	adds	r7, #44	; 0x2c
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bc80      	pop	{r7}
 8002e48:	4770      	bx	lr

08002e4a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	807b      	strh	r3, [r7, #2]
 8002e56:	4613      	mov	r3, r2
 8002e58:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e5a:	787b      	ldrb	r3, [r7, #1]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e60:	887a      	ldrh	r2, [r7, #2]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e66:	e003      	b.n	8002e70 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e68:	887b      	ldrh	r3, [r7, #2]
 8002e6a:	041a      	lsls	r2, r3, #16
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	611a      	str	r2, [r3, #16]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr

08002e7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b085      	sub	sp, #20
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	460b      	mov	r3, r1
 8002e84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e8c:	887a      	ldrh	r2, [r7, #2]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4013      	ands	r3, r2
 8002e92:	041a      	lsls	r2, r3, #16
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	887b      	ldrh	r3, [r7, #2]
 8002e9a:	400b      	ands	r3, r1
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	611a      	str	r2, [r3, #16]
}
 8002ea2:	bf00      	nop
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bc80      	pop	{r7}
 8002eaa:	4770      	bx	lr

08002eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e272      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	f000 8087 	beq.w	8002fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ecc:	4b92      	ldr	r3, [pc, #584]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 030c 	and.w	r3, r3, #12
 8002ed4:	2b04      	cmp	r3, #4
 8002ed6:	d00c      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed8:	4b8f      	ldr	r3, [pc, #572]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f003 030c 	and.w	r3, r3, #12
 8002ee0:	2b08      	cmp	r3, #8
 8002ee2:	d112      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e>
 8002ee4:	4b8c      	ldr	r3, [pc, #560]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef0:	d10b      	bne.n	8002f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ef2:	4b89      	ldr	r3, [pc, #548]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d06c      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x12c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d168      	bne.n	8002fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e24c      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d106      	bne.n	8002f22 <HAL_RCC_OscConfig+0x76>
 8002f14:	4b80      	ldr	r3, [pc, #512]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a7f      	ldr	r2, [pc, #508]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	e02e      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x98>
 8002f2a:	4b7b      	ldr	r3, [pc, #492]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a7a      	ldr	r2, [pc, #488]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 8002f36:	4b78      	ldr	r3, [pc, #480]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a77      	ldr	r2, [pc, #476]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	e01d      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0xbc>
 8002f4e:	4b72      	ldr	r3, [pc, #456]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a71      	ldr	r2, [pc, #452]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	4b6f      	ldr	r3, [pc, #444]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a6e      	ldr	r2, [pc, #440]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0xd4>
 8002f68:	4b6b      	ldr	r3, [pc, #428]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6a      	ldr	r2, [pc, #424]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	4b68      	ldr	r3, [pc, #416]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a67      	ldr	r2, [pc, #412]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff fbd8 	bl	800273c <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f90:	f7ff fbd4 	bl	800273c <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b64      	cmp	r3, #100	; 0x64
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e200      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa2:	4b5d      	ldr	r3, [pc, #372]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0f0      	beq.n	8002f90 <HAL_RCC_OscConfig+0xe4>
 8002fae:	e014      	b.n	8002fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7ff fbc4 	bl	800273c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7ff fbc0 	bl	800273c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e1ec      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fca:	4b53      	ldr	r3, [pc, #332]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x10c>
 8002fd6:	e000      	b.n	8002fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d063      	beq.n	80030ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe6:	4b4c      	ldr	r3, [pc, #304]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ff2:	4b49      	ldr	r3, [pc, #292]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b08      	cmp	r3, #8
 8002ffc:	d11c      	bne.n	8003038 <HAL_RCC_OscConfig+0x18c>
 8002ffe:	4b46      	ldr	r3, [pc, #280]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d116      	bne.n	8003038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800300a:	4b43      	ldr	r3, [pc, #268]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d005      	beq.n	8003022 <HAL_RCC_OscConfig+0x176>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e1c0      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003022:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4939      	ldr	r1, [pc, #228]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003032:	4313      	orrs	r3, r2
 8003034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	e03a      	b.n	80030ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d020      	beq.n	8003082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003040:	4b36      	ldr	r3, [pc, #216]	; (800311c <HAL_RCC_OscConfig+0x270>)
 8003042:	2201      	movs	r2, #1
 8003044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff fb79 	bl	800273c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800304e:	f7ff fb75 	bl	800273c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e1a1      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	4b2d      	ldr	r3, [pc, #180]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306c:	4b2a      	ldr	r3, [pc, #168]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4927      	ldr	r1, [pc, #156]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 800307c:	4313      	orrs	r3, r2
 800307e:	600b      	str	r3, [r1, #0]
 8003080:	e015      	b.n	80030ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003082:	4b26      	ldr	r3, [pc, #152]	; (800311c <HAL_RCC_OscConfig+0x270>)
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7ff fb58 	bl	800273c <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003090:	f7ff fb54 	bl	800273c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e180      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1f0      	bne.n	8003090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0308 	and.w	r3, r3, #8
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d03a      	beq.n	8003130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d019      	beq.n	80030f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030c2:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030c4:	2201      	movs	r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7ff fb38 	bl	800273c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7ff fb34 	bl	800273c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e160      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d0f0      	beq.n	80030d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ee:	2001      	movs	r0, #1
 80030f0:	f000 fad8 	bl	80036a4 <RCC_Delay>
 80030f4:	e01c      	b.n	8003130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030f6:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <HAL_RCC_OscConfig+0x274>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7ff fb1e 	bl	800273c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003102:	e00f      	b.n	8003124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff fb1a 	bl	800273c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d908      	bls.n	8003124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e146      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	42420000 	.word	0x42420000
 8003120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	4b92      	ldr	r3, [pc, #584]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1e9      	bne.n	8003104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a6 	beq.w	800328a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003142:	4b8b      	ldr	r3, [pc, #556]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10d      	bne.n	800316a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800314e:	4b88      	ldr	r3, [pc, #544]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	4a87      	ldr	r2, [pc, #540]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003158:	61d3      	str	r3, [r2, #28]
 800315a:	4b85      	ldr	r3, [pc, #532]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	60bb      	str	r3, [r7, #8]
 8003164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003166:	2301      	movs	r3, #1
 8003168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	4b82      	ldr	r3, [pc, #520]	; (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d118      	bne.n	80031a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003176:	4b7f      	ldr	r3, [pc, #508]	; (8003374 <HAL_RCC_OscConfig+0x4c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a7e      	ldr	r2, [pc, #504]	; (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800317c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003182:	f7ff fadb 	bl	800273c <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003188:	e008      	b.n	800319c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800318a:	f7ff fad7 	bl	800273c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b64      	cmp	r3, #100	; 0x64
 8003196:	d901      	bls.n	800319c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e103      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319c:	4b75      	ldr	r3, [pc, #468]	; (8003374 <HAL_RCC_OscConfig+0x4c8>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0f0      	beq.n	800318a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d106      	bne.n	80031be <HAL_RCC_OscConfig+0x312>
 80031b0:	4b6f      	ldr	r3, [pc, #444]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a6e      	ldr	r2, [pc, #440]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	f043 0301 	orr.w	r3, r3, #1
 80031ba:	6213      	str	r3, [r2, #32]
 80031bc:	e02d      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10c      	bne.n	80031e0 <HAL_RCC_OscConfig+0x334>
 80031c6:	4b6a      	ldr	r3, [pc, #424]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a69      	ldr	r2, [pc, #420]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b67      	ldr	r3, [pc, #412]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a66      	ldr	r2, [pc, #408]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
 80031de:	e01c      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	2b05      	cmp	r3, #5
 80031e6:	d10c      	bne.n	8003202 <HAL_RCC_OscConfig+0x356>
 80031e8:	4b61      	ldr	r3, [pc, #388]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	6a1b      	ldr	r3, [r3, #32]
 80031ec:	4a60      	ldr	r2, [pc, #384]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	f043 0304 	orr.w	r3, r3, #4
 80031f2:	6213      	str	r3, [r2, #32]
 80031f4:	4b5e      	ldr	r3, [pc, #376]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	4a5d      	ldr	r2, [pc, #372]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6213      	str	r3, [r2, #32]
 8003200:	e00b      	b.n	800321a <HAL_RCC_OscConfig+0x36e>
 8003202:	4b5b      	ldr	r3, [pc, #364]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	4a5a      	ldr	r2, [pc, #360]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6213      	str	r3, [r2, #32]
 800320e:	4b58      	ldr	r3, [pc, #352]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	4a57      	ldr	r2, [pc, #348]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	f023 0304 	bic.w	r3, r3, #4
 8003218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d015      	beq.n	800324e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003222:	f7ff fa8b 	bl	800273c <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003228:	e00a      	b.n	8003240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322a:	f7ff fa87 	bl	800273c <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	f241 3288 	movw	r2, #5000	; 0x1388
 8003238:	4293      	cmp	r3, r2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0b1      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003240:	4b4b      	ldr	r3, [pc, #300]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003242:	6a1b      	ldr	r3, [r3, #32]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ee      	beq.n	800322a <HAL_RCC_OscConfig+0x37e>
 800324c:	e014      	b.n	8003278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324e:	f7ff fa75 	bl	800273c <HAL_GetTick>
 8003252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00a      	b.n	800326c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7ff fa71 	bl	800273c <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d901      	bls.n	800326c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e09b      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326c:	4b40      	ldr	r3, [pc, #256]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1ee      	bne.n	8003256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003278:	7dfb      	ldrb	r3, [r7, #23]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	4a3b      	ldr	r2, [pc, #236]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 8087 	beq.w	80033a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 030c 	and.w	r3, r3, #12
 800329c:	2b08      	cmp	r3, #8
 800329e:	d061      	beq.n	8003364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d146      	bne.n	8003336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a8:	4b33      	ldr	r3, [pc, #204]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ae:	f7ff fa45 	bl	800273c <HAL_GetTick>
 80032b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b4:	e008      	b.n	80032c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032b6:	f7ff fa41 	bl	800273c <HAL_GetTick>
 80032ba:	4602      	mov	r2, r0
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d901      	bls.n	80032c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e06d      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c8:	4b29      	ldr	r3, [pc, #164]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f0      	bne.n	80032b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032dc:	d108      	bne.n	80032f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	4921      	ldr	r1, [pc, #132]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032f0:	4b1f      	ldr	r3, [pc, #124]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a19      	ldr	r1, [r3, #32]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003300:	430b      	orrs	r3, r1
 8003302:	491b      	ldr	r1, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003304:	4313      	orrs	r3, r2
 8003306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003308:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330e:	f7ff fa15 	bl	800273c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003316:	f7ff fa11 	bl	800273c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03d      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003328:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x46a>
 8003334:	e035      	b.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b10      	ldr	r3, [pc, #64]	; (8003378 <HAL_RCC_OscConfig+0x4cc>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff f9fe 	bl	800273c <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7ff f9fa 	bl	800273c <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e026      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003356:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x498>
 8003362:	e01e      	b.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69db      	ldr	r3, [r3, #28]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d107      	bne.n	800337c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e019      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
 8003378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_OscConfig+0x500>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	429a      	cmp	r2, r3
 800338e:	d106      	bne.n	800339e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d001      	beq.n	80033a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e0d0      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033c4:	4b6a      	ldr	r3, [pc, #424]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d910      	bls.n	80033f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d2:	4b67      	ldr	r3, [pc, #412]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f023 0207 	bic.w	r2, r3, #7
 80033da:	4965      	ldr	r1, [pc, #404]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e2:	4b63      	ldr	r3, [pc, #396]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	683a      	ldr	r2, [r7, #0]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e0b8      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800340c:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a58      	ldr	r2, [pc, #352]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003412:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003424:	4b53      	ldr	r3, [pc, #332]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4a52      	ldr	r2, [pc, #328]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800342e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003430:	4b50      	ldr	r3, [pc, #320]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	494d      	ldr	r1, [pc, #308]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800343e:	4313      	orrs	r3, r2
 8003440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d040      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003456:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d115      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d107      	bne.n	800347e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800346e:	4b41      	ldr	r3, [pc, #260]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e073      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e06b      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f023 0203 	bic.w	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	4936      	ldr	r1, [pc, #216]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034a0:	f7ff f94c 	bl	800273c <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	e00a      	b.n	80034be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a8:	f7ff f948 	bl	800273c <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e053      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034be:	4b2d      	ldr	r3, [pc, #180]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f003 020c 	and.w	r2, r3, #12
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d1eb      	bne.n	80034a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034d0:	4b27      	ldr	r3, [pc, #156]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d210      	bcs.n	8003500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034de:	4b24      	ldr	r3, [pc, #144]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f023 0207 	bic.w	r2, r3, #7
 80034e6:	4922      	ldr	r1, [pc, #136]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b20      	ldr	r3, [pc, #128]	; (8003570 <HAL_RCC_ClockConfig+0x1c0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e032      	b.n	8003566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d008      	beq.n	800351e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4916      	ldr	r1, [pc, #88]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800351a:	4313      	orrs	r3, r2
 800351c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	490e      	ldr	r1, [pc, #56]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800353e:	f000 f821 	bl	8003584 <HAL_RCC_GetSysClockFreq>
 8003542:	4602      	mov	r2, r0
 8003544:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCC_ClockConfig+0x1c4>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	091b      	lsrs	r3, r3, #4
 800354a:	f003 030f 	and.w	r3, r3, #15
 800354e:	490a      	ldr	r1, [pc, #40]	; (8003578 <HAL_RCC_ClockConfig+0x1c8>)
 8003550:	5ccb      	ldrb	r3, [r1, r3]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a09      	ldr	r2, [pc, #36]	; (800357c <HAL_RCC_ClockConfig+0x1cc>)
 8003558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800355a:	4b09      	ldr	r3, [pc, #36]	; (8003580 <HAL_RCC_ClockConfig+0x1d0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f8aa 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40022000 	.word	0x40022000
 8003574:	40021000 	.word	0x40021000
 8003578:	080097d0 	.word	0x080097d0
 800357c:	20000000 	.word	0x20000000
 8003580:	20000004 	.word	0x20000004

08003584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003584:	b490      	push	{r4, r7}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800358a:	4b29      	ldr	r3, [pc, #164]	; (8003630 <HAL_RCC_GetSysClockFreq+0xac>)
 800358c:	1d3c      	adds	r4, r7, #4
 800358e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003590:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003594:	f240 2301 	movw	r3, #513	; 0x201
 8003598:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
 80035a6:	2300      	movs	r3, #0
 80035a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035aa:	2300      	movs	r3, #0
 80035ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ae:	4b21      	ldr	r3, [pc, #132]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 030c 	and.w	r3, r3, #12
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d002      	beq.n	80035c4 <HAL_RCC_GetSysClockFreq+0x40>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d003      	beq.n	80035ca <HAL_RCC_GetSysClockFreq+0x46>
 80035c2:	e02b      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035c4:	4b1c      	ldr	r3, [pc, #112]	; (8003638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035c6:	623b      	str	r3, [r7, #32]
      break;
 80035c8:	e02b      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	0c9b      	lsrs	r3, r3, #18
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	3328      	adds	r3, #40	; 0x28
 80035d4:	443b      	add	r3, r7
 80035d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d012      	beq.n	800360c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	0c5b      	lsrs	r3, r3, #17
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	3328      	adds	r3, #40	; 0x28
 80035f2:	443b      	add	r3, r7
 80035f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fe:	fb03 f202 	mul.w	r2, r3, r2
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e004      	b.n	8003616 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	4a0b      	ldr	r2, [pc, #44]	; (800363c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	623b      	str	r3, [r7, #32]
      break;
 800361a:	e002      	b.n	8003622 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800361c:	4b06      	ldr	r3, [pc, #24]	; (8003638 <HAL_RCC_GetSysClockFreq+0xb4>)
 800361e:	623b      	str	r3, [r7, #32]
      break;
 8003620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003622:	6a3b      	ldr	r3, [r7, #32]
}
 8003624:	4618      	mov	r0, r3
 8003626:	3728      	adds	r7, #40	; 0x28
 8003628:	46bd      	mov	sp, r7
 800362a:	bc90      	pop	{r4, r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	080095c0 	.word	0x080095c0
 8003634:	40021000 	.word	0x40021000
 8003638:	007a1200 	.word	0x007a1200
 800363c:	003d0900 	.word	0x003d0900

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b02      	ldr	r3, [pc, #8]	; (8003650 <HAL_RCC_GetHCLKFreq+0x10>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr
 8003650:	20000000 	.word	0x20000000

08003654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003658:	f7ff fff2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 800365c:	4602      	mov	r2, r0
 800365e:	4b05      	ldr	r3, [pc, #20]	; (8003674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	0a1b      	lsrs	r3, r3, #8
 8003664:	f003 0307 	and.w	r3, r3, #7
 8003668:	4903      	ldr	r1, [pc, #12]	; (8003678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800366a:	5ccb      	ldrb	r3, [r1, r3]
 800366c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003670:	4618      	mov	r0, r3
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40021000 	.word	0x40021000
 8003678:	080097e0 	.word	0x080097e0

0800367c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003680:	f7ff ffde 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0adb      	lsrs	r3, r3, #11
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	4903      	ldr	r1, [pc, #12]	; (80036a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	080097e0 	.word	0x080097e0

080036a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036ac:	4b0a      	ldr	r3, [pc, #40]	; (80036d8 <RCC_Delay+0x34>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <RCC_Delay+0x38>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0a5b      	lsrs	r3, r3, #9
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036c0:	bf00      	nop
  }
  while (Delay --);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	1e5a      	subs	r2, r3, #1
 80036c6:	60fa      	str	r2, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f9      	bne.n	80036c0 <RCC_Delay+0x1c>
}
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr
 80036d8:	20000000 	.word	0x20000000
 80036dc:	10624dd3 	.word	0x10624dd3

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e076      	b.n	80037e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003702:	d009      	beq.n	8003718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
 800370a:	e005      	b.n	8003718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe fdb6 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	0c1a      	lsrs	r2, r3, #16
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f002 0204 	and.w	r2, r2, #4
 80037be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_SPI_Transmit+0x22>
 8003806:	2302      	movs	r3, #2
 8003808:	e126      	b.n	8003a58 <HAL_SPI_Transmit+0x270>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003812:	f7fe ff93 	bl	800273c <HAL_GetTick>
 8003816:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	d002      	beq.n	800382e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003828:	2302      	movs	r3, #2
 800382a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800382c:	e10b      	b.n	8003a46 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_SPI_Transmit+0x52>
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d102      	bne.n	8003840 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800383e:	e102      	b.n	8003a46 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2203      	movs	r2, #3
 8003844:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003886:	d10f      	bne.n	80038a8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003896:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038a6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b2:	2b40      	cmp	r3, #64	; 0x40
 80038b4:	d007      	beq.n	80038c6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ce:	d14b      	bne.n	8003968 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_SPI_Transmit+0xf6>
 80038d8:	8afb      	ldrh	r3, [r7, #22]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d13e      	bne.n	800395c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	881a      	ldrh	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003902:	e02b      	b.n	800395c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d112      	bne.n	8003938 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	881a      	ldrh	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	1c9a      	adds	r2, r3, #2
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	86da      	strh	r2, [r3, #54]	; 0x36
 8003936:	e011      	b.n	800395c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003938:	f7fe ff00 	bl	800273c <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d803      	bhi.n	8003950 <HAL_SPI_Transmit+0x168>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Transmit+0x16e>
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	77fb      	strb	r3, [r7, #31]
          goto error;
 800395a:	e074      	b.n	8003a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003960:	b29b      	uxth	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1ce      	bne.n	8003904 <HAL_SPI_Transmit+0x11c>
 8003966:	e04c      	b.n	8003a02 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Transmit+0x18e>
 8003970:	8afb      	ldrh	r3, [r7, #22]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d140      	bne.n	80039f8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800399c:	e02c      	b.n	80039f8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d113      	bne.n	80039d4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	330c      	adds	r3, #12
 80039b6:	7812      	ldrb	r2, [r2, #0]
 80039b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	86da      	strh	r2, [r3, #54]	; 0x36
 80039d2:	e011      	b.n	80039f8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039d4:	f7fe feb2 	bl	800273c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d803      	bhi.n	80039ec <HAL_SPI_Transmit+0x204>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ea:	d102      	bne.n	80039f2 <HAL_SPI_Transmit+0x20a>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f6:	e026      	b.n	8003a46 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1cd      	bne.n	800399e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	6839      	ldr	r1, [r7, #0]
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fbc4 	bl	8004194 <SPI_EndRxTxTransaction>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2220      	movs	r2, #32
 8003a16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10a      	bne.n	8003a36 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a20:	2300      	movs	r3, #0
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e000      	b.n	8003a46 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003a44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3720      	adds	r7, #32
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b088      	sub	sp, #32
 8003a64:	af02      	add	r7, sp, #8
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	603b      	str	r3, [r7, #0]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a70:	2300      	movs	r3, #0
 8003a72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a7c:	d112      	bne.n	8003aa4 <HAL_SPI_Receive+0x44>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10e      	bne.n	8003aa4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2204      	movs	r2, #4
 8003a8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a8e:	88fa      	ldrh	r2, [r7, #6]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	9300      	str	r3, [sp, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	68b9      	ldr	r1, [r7, #8]
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8f1 	bl	8003c82 <HAL_SPI_TransmitReceive>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	e0ea      	b.n	8003c7a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_SPI_Receive+0x52>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e0e3      	b.n	8003c7a <HAL_SPI_Receive+0x21a>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003aba:	f7fe fe3f 	bl	800273c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
 8003ace:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ad0:	e0ca      	b.n	8003c68 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d002      	beq.n	8003ade <HAL_SPI_Receive+0x7e>
 8003ad8:	88fb      	ldrh	r3, [r7, #6]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d102      	bne.n	8003ae4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ae2:	e0c1      	b.n	8003c68 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2204      	movs	r2, #4
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	88fa      	ldrh	r2, [r7, #6]
 8003b02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2a:	d10f      	bne.n	8003b4c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b4a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b56:	2b40      	cmp	r3, #64	; 0x40
 8003b58:	d007      	beq.n	8003b6a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d162      	bne.n	8003c38 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b72:	e02e      	b.n	8003bd2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d115      	bne.n	8003bae <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f103 020c 	add.w	r2, r3, #12
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	7812      	ldrb	r2, [r2, #0]
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003bac:	e011      	b.n	8003bd2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bae:	f7fe fdc5 	bl	800273c <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_Receive+0x166>
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_Receive+0x16c>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003bd0:	e04a      	b.n	8003c68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1cb      	bne.n	8003b74 <HAL_SPI_Receive+0x114>
 8003bdc:	e031      	b.n	8003c42 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d113      	bne.n	8003c14 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	1c9a      	adds	r2, r3, #2
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c12:	e011      	b.n	8003c38 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c14:	f7fe fd92 	bl	800273c <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d803      	bhi.n	8003c2c <HAL_SPI_Receive+0x1cc>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d102      	bne.n	8003c32 <HAL_SPI_Receive+0x1d2>
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d102      	bne.n	8003c38 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003c36:	e017      	b.n	8003c68 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1cd      	bne.n	8003bde <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	6839      	ldr	r1, [r7, #0]
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fa52 	bl	80040f0 <SPI_EndRxTransaction>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2220      	movs	r2, #32
 8003c56:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
 8003c64:	e000      	b.n	8003c68 <HAL_SPI_Receive+0x208>
  }

error :
 8003c66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003c82:	b580      	push	{r7, lr}
 8003c84:	b08c      	sub	sp, #48	; 0x30
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
 8003c8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c90:	2301      	movs	r3, #1
 8003c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003c94:	2300      	movs	r3, #0
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_SPI_TransmitReceive+0x26>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e18a      	b.n	8003fbe <HAL_SPI_TransmitReceive+0x33c>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cb0:	f7fe fd44 	bl	800273c <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003cc6:	887b      	ldrh	r3, [r7, #2]
 8003cc8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003cca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d00f      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x70>
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd8:	d107      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x68>
 8003ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d003      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003cea:	2302      	movs	r3, #2
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003cf0:	e15b      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d005      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_TransmitReceive+0x82>
 8003cfe:	887b      	ldrh	r3, [r7, #2]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003d0a:	e14e      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d003      	beq.n	8003d20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	887a      	ldrh	r2, [r7, #2]
 8003d36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	887a      	ldrh	r2, [r7, #2]
 8003d42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d007      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d178      	bne.n	8003e70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <HAL_SPI_TransmitReceive+0x10a>
 8003d86:	8b7b      	ldrh	r3, [r7, #26]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d166      	bne.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	881a      	ldrh	r2, [r3, #0]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	1c9a      	adds	r2, r3, #2
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db0:	e053      	b.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d11b      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d113      	bne.n	8003df8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	881a      	ldrh	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	1c9a      	adds	r2, r3, #2
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d119      	bne.n	8003e3a <HAL_SPI_TransmitReceive+0x1b8>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d014      	beq.n	8003e3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68da      	ldr	r2, [r3, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e22:	1c9a      	adds	r2, r3, #2
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e36:	2301      	movs	r3, #1
 8003e38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e3a:	f7fe fc7f 	bl	800273c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d807      	bhi.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e50:	d003      	beq.n	8003e5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003e58:	e0a7      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1a6      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x130>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1a1      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x130>
 8003e6e:	e07c      	b.n	8003f6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_SPI_TransmitReceive+0x1fc>
 8003e78:	8b7b      	ldrh	r3, [r7, #26]
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d16b      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea4:	e057      	b.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d11c      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
 8003ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d114      	bne.n	8003eee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	330c      	adds	r3, #12
 8003ece:	7812      	ldrb	r2, [r2, #0]
 8003ed0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d119      	bne.n	8003f30 <HAL_SPI_TransmitReceive+0x2ae>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d014      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f30:	f7fe fc04 	bl	800273c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d803      	bhi.n	8003f48 <HAL_SPI_TransmitReceive+0x2c6>
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_TransmitReceive+0x2cc>
 8003f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d103      	bne.n	8003f56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003f54:	e029      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1a2      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x224>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d19d      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f910 	bl	8004194 <SPI_EndRxTxTransaction>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d006      	beq.n	8003f88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003f86:	e010      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	e000      	b.n	8003faa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003fa8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3730      	adds	r7, #48	; 0x30
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fd4:	b2db      	uxtb	r3, r3
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr

08003fe0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b088      	sub	sp, #32
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	603b      	str	r3, [r7, #0]
 8003fec:	4613      	mov	r3, r2
 8003fee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ff0:	f7fe fba4 	bl	800273c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004000:	f7fe fb9c 	bl	800273c <HAL_GetTick>
 8004004:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004006:	4b39      	ldr	r3, [pc, #228]	; (80040ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	015b      	lsls	r3, r3, #5
 800400c:	0d1b      	lsrs	r3, r3, #20
 800400e:	69fa      	ldr	r2, [r7, #28]
 8004010:	fb02 f303 	mul.w	r3, r2, r3
 8004014:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004016:	e054      	b.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d050      	beq.n	80040c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004020:	f7fe fb8c 	bl	800273c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	69fa      	ldr	r2, [r7, #28]
 800402c:	429a      	cmp	r2, r3
 800402e:	d902      	bls.n	8004036 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d13d      	bne.n	80040b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004044:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d111      	bne.n	8004074 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004058:	d004      	beq.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004062:	d107      	bne.n	8004074 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004072:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407c:	d10f      	bne.n	800409e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800409c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e017      	b.n	80040e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80040b8:	2300      	movs	r3, #0
 80040ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	3b01      	subs	r3, #1
 80040c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4013      	ands	r3, r2
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	bf0c      	ite	eq
 80040d2:	2301      	moveq	r3, #1
 80040d4:	2300      	movne	r3, #0
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d19b      	bne.n	8004018 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004104:	d111      	bne.n	800412a <SPI_EndRxTransaction+0x3a>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800410e:	d004      	beq.n	800411a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004118:	d107      	bne.n	800412a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004128:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004132:	d117      	bne.n	8004164 <SPI_EndRxTransaction+0x74>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800413c:	d112      	bne.n	8004164 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2200      	movs	r2, #0
 8004146:	2101      	movs	r1, #1
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f7ff ff49 	bl	8003fe0 <SPI_WaitFlagStateUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01a      	beq.n	800418a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004158:	f043 0220 	orr.w	r2, r3, #32
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e013      	b.n	800418c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	2180      	movs	r1, #128	; 0x80
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ff36 	bl	8003fe0 <SPI_WaitFlagStateUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d007      	beq.n	800418a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417e:	f043 0220 	orr.w	r2, r3, #32
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e000      	b.n	800418c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af02      	add	r7, sp, #8
 800419a:	60f8      	str	r0, [r7, #12]
 800419c:	60b9      	str	r1, [r7, #8]
 800419e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2200      	movs	r2, #0
 80041a8:	2180      	movs	r1, #128	; 0x80
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff ff18 	bl	8003fe0 <SPI_WaitFlagStateUntilTimeout>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d007      	beq.n	80041c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f043 0220 	orr.w	r2, r3, #32
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e000      	b.n	80041c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80041c6:	2300      	movs	r3, #0
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e03f      	b.n	8004262 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fe f89e 	bl	8002338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004212:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 fc85 	bl	8004b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691a      	ldr	r2, [r3, #16]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004228:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	695a      	ldr	r2, [r3, #20]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004238:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004248:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b08a      	sub	sp, #40	; 0x28
 800426e:	af02      	add	r7, sp, #8
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b20      	cmp	r3, #32
 8004288:	d17c      	bne.n	8004384 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d002      	beq.n	8004296 <HAL_UART_Transmit+0x2c>
 8004290:	88fb      	ldrh	r3, [r7, #6]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e075      	b.n	8004386 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Transmit+0x3e>
 80042a4:	2302      	movs	r3, #2
 80042a6:	e06e      	b.n	8004386 <HAL_UART_Transmit+0x11c>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2221      	movs	r2, #33	; 0x21
 80042ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042be:	f7fe fa3d 	bl	800273c <HAL_GetTick>
 80042c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	88fa      	ldrh	r2, [r7, #6]
 80042c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x82>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80042fc:	e02a      	b.n	8004354 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa38 	bl	800477e <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e036      	b.n	8004386 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3302      	adds	r3, #2
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e007      	b.n	8004346 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004358:	b29b      	uxth	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1cf      	bne.n	80042fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	9300      	str	r3, [sp, #0]
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	2140      	movs	r1, #64	; 0x40
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 fa08 	bl	800477e <UART_WaitOnFlagUntilTimeout>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e006      	b.n	8004386 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004380:	2300      	movs	r3, #0
 8004382:	e000      	b.n	8004386 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b084      	sub	sp, #16
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	60b9      	str	r1, [r7, #8]
 8004398:	4613      	mov	r3, r2
 800439a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	d11d      	bne.n	80043e4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_UART_Receive_IT+0x26>
 80043ae:	88fb      	ldrh	r3, [r7, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e016      	b.n	80043e6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d101      	bne.n	80043c6 <HAL_UART_Receive_IT+0x38>
 80043c2:	2302      	movs	r3, #2
 80043c4:	e00f      	b.n	80043e6 <HAL_UART_Receive_IT+0x58>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80043d4:	88fb      	ldrh	r3, [r7, #6]
 80043d6:	461a      	mov	r2, r3
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fa19 	bl	8004812 <UART_Start_Receive_IT>
 80043e0:	4603      	mov	r3, r0
 80043e2:	e000      	b.n	80043e6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
	...

080043f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	; 0x28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004410:	2300      	movs	r3, #0
 8004412:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_UART_IRQHandler+0x52>
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fac9 	bl	80049d2 <UART_Receive_IT>
      return;
 8004440:	e17b      	b.n	800473a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80b1 	beq.w	80045ac <HAL_UART_IRQHandler+0x1bc>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <HAL_UART_IRQHandler+0x70>
 8004454:	6a3b      	ldr	r3, [r7, #32]
 8004456:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a6 	beq.w	80045ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00a      	beq.n	8004480 <HAL_UART_IRQHandler+0x90>
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <HAL_UART_IRQHandler+0xb0>
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f043 0202 	orr.w	r2, r3, #2
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <HAL_UART_IRQHandler+0xd0>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f043 0204 	orr.w	r2, r3, #4
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	f003 0308 	and.w	r3, r3, #8
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00f      	beq.n	80044ea <HAL_UART_IRQHandler+0xfa>
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <HAL_UART_IRQHandler+0xee>
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0208 	orr.w	r2, r3, #8
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 811e 	beq.w	8004730 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_UART_IRQHandler+0x11e>
 80044fe:	6a3b      	ldr	r3, [r7, #32]
 8004500:	f003 0320 	and.w	r3, r3, #32
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fa62 	bl	80049d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	bf14      	ite	ne
 800451c:	2301      	movne	r3, #1
 800451e:	2300      	moveq	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d102      	bne.n	8004536 <HAL_UART_IRQHandler+0x146>
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d031      	beq.n	800459a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f9a4 	bl	8004884 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d023      	beq.n	8004592 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695a      	ldr	r2, [r3, #20]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004558:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	2b00      	cmp	r3, #0
 8004560:	d013      	beq.n	800458a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4a76      	ldr	r2, [pc, #472]	; (8004740 <HAL_UART_IRQHandler+0x350>)
 8004568:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fa5a 	bl	8002a28 <HAL_DMA_Abort_IT>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d016      	beq.n	80045a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004584:	4610      	mov	r0, r2
 8004586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004588:	e00e      	b.n	80045a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 f8e3 	bl	8004756 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	e00a      	b.n	80045a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f8df 	bl	8004756 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004598:	e006      	b.n	80045a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f8db 	bl	8004756 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045a6:	e0c3      	b.n	8004730 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045a8:	bf00      	nop
    return;
 80045aa:	e0c1      	b.n	8004730 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	f040 80a1 	bne.w	80046f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	f003 0310 	and.w	r3, r3, #16
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 809b 	beq.w	80046f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80045c2:	6a3b      	ldr	r3, [r7, #32]
 80045c4:	f003 0310 	and.w	r3, r3, #16
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 8095 	beq.w	80046f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ce:	2300      	movs	r3, #0
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04e      	beq.n	8004690 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80045fc:	8a3b      	ldrh	r3, [r7, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	f000 8098 	beq.w	8004734 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004608:	8a3a      	ldrh	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	f080 8092 	bcs.w	8004734 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8a3a      	ldrh	r2, [r7, #16]
 8004614:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	2b20      	cmp	r3, #32
 800461e:	d02b      	beq.n	8004678 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695a      	ldr	r2, [r3, #20]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800464e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0210 	bic.w	r2, r2, #16
 800466c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe f99d 	bl	80029b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	b29b      	uxth	r3, r3
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f86d 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800468e:	e051      	b.n	8004734 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004698:	b29b      	uxth	r3, r3
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d047      	beq.n	8004738 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80046a8:	8a7b      	ldrh	r3, [r7, #18]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d044      	beq.n	8004738 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0201 	bic.w	r2, r2, #1
 80046cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0210 	bic.w	r2, r2, #16
 80046ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046ec:	8a7b      	ldrh	r3, [r7, #18]
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 f839 	bl	8004768 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80046f6:	e01f      	b.n	8004738 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_UART_IRQHandler+0x324>
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8f9 	bl	8004904 <UART_Transmit_IT>
    return;
 8004712:	e012      	b.n	800473a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00d      	beq.n	800473a <HAL_UART_IRQHandler+0x34a>
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f93a 	bl	80049a2 <UART_EndTransmit_IT>
    return;
 800472e:	e004      	b.n	800473a <HAL_UART_IRQHandler+0x34a>
    return;
 8004730:	bf00      	nop
 8004732:	e002      	b.n	800473a <HAL_UART_IRQHandler+0x34a>
      return;
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <HAL_UART_IRQHandler+0x34a>
      return;
 8004738:	bf00      	nop
  }
}
 800473a:	3728      	adds	r7, #40	; 0x28
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	080048dd 	.word	0x080048dd

08004744 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	bc80      	pop	{r7}
 8004754:	4770      	bx	lr

08004756 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	bc80      	pop	{r7}
 800477c:	4770      	bx	lr

0800477e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800478e:	e02c      	b.n	80047ea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004796:	d028      	beq.n	80047ea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d007      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x30>
 800479e:	f7fd ffcd 	bl	800273c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d21d      	bcs.n	80047ea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80047bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f022 0201 	bic.w	r2, r2, #1
 80047cc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e00f      	b.n	800480a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4013      	ands	r3, r2
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	bf0c      	ite	eq
 80047fa:	2301      	moveq	r3, #1
 80047fc:	2300      	movne	r3, #0
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	79fb      	ldrb	r3, [r7, #7]
 8004804:	429a      	cmp	r2, r3
 8004806:	d0c3      	beq.n	8004790 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	60b9      	str	r1, [r7, #8]
 800481c:	4613      	mov	r3, r2
 800481e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	88fa      	ldrh	r2, [r7, #6]
 800482a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	88fa      	ldrh	r2, [r7, #6]
 8004830:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2222      	movs	r2, #34	; 0x22
 800483c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004856:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	695a      	ldr	r2, [r3, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68da      	ldr	r2, [r3, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0220 	orr.w	r2, r2, #32
 8004876:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800489a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695a      	ldr	r2, [r3, #20]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0201 	bic.w	r2, r2, #1
 80048aa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d107      	bne.n	80048c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0210 	bic.w	r2, r2, #16
 80048c2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b084      	sub	sp, #16
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff ff2d 	bl	8004756 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048fc:	bf00      	nop
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b21      	cmp	r3, #33	; 0x21
 8004916:	d13e      	bne.n	8004996 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004920:	d114      	bne.n	800494c <UART_Transmit_IT+0x48>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	881b      	ldrh	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800493e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	1c9a      	adds	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	621a      	str	r2, [r3, #32]
 800494a:	e008      	b.n	800495e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	1c59      	adds	r1, r3, #1
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6211      	str	r1, [r2, #32]
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004962:	b29b      	uxth	r3, r3
 8004964:	3b01      	subs	r3, #1
 8004966:	b29b      	uxth	r3, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	4619      	mov	r1, r3
 800496c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004980:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68da      	ldr	r2, [r3, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004990:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3714      	adds	r7, #20
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr

080049a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7ff febe 	bl	8004744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b22      	cmp	r3, #34	; 0x22
 80049e4:	f040 8099 	bne.w	8004b1a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049f0:	d117      	bne.n	8004a22 <UART_Receive_IT+0x50>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d113      	bne.n	8004a22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a02:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1a:	1c9a      	adds	r2, r3, #2
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e026      	b.n	8004a70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a26:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a34:	d007      	beq.n	8004a46 <UART_Receive_IT+0x74>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <UART_Receive_IT+0x82>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	701a      	strb	r2, [r3, #0]
 8004a52:	e008      	b.n	8004a66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a60:	b2da      	uxtb	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	1c5a      	adds	r2, r3, #1
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d148      	bne.n	8004b16 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0220 	bic.w	r2, r2, #32
 8004a92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68da      	ldr	r2, [r3, #12]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004aa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695a      	ldr	r2, [r3, #20]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d123      	bne.n	8004b0c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0210 	bic.w	r2, r2, #16
 8004ad8:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0310 	and.w	r3, r3, #16
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d10a      	bne.n	8004afe <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b02:	4619      	mov	r1, r3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff fe2f 	bl	8004768 <HAL_UARTEx_RxEventCallback>
 8004b0a:	e002      	b.n	8004b12 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f7fd f8a5 	bl	8001c5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e002      	b.n	8004b1c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004b16:	2300      	movs	r3, #0
 8004b18:	e000      	b.n	8004b1c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004b1a:	2302      	movs	r3, #2
  }
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004b5e:	f023 030c 	bic.w	r3, r3, #12
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699a      	ldr	r2, [r3, #24]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a2c      	ldr	r2, [pc, #176]	; (8004c38 <UART_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b8c:	f7fe fd76 	bl	800367c <HAL_RCC_GetPCLK2Freq>
 8004b90:	60f8      	str	r0, [r7, #12]
 8004b92:	e002      	b.n	8004b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b94:	f7fe fd5e 	bl	8003654 <HAL_RCC_GetPCLK1Freq>
 8004b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	4a22      	ldr	r2, [pc, #136]	; (8004c3c <UART_SetConfig+0x118>)
 8004bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	0119      	lsls	r1, r3, #4
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009a      	lsls	r2, r3, #2
 8004bc4:	441a      	add	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <UART_SetConfig+0x118>)
 8004bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2064      	movs	r0, #100	; 0x64
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	; 0x32
 8004be4:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <UART_SetConfig+0x118>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	4419      	add	r1, r3
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4613      	mov	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	009a      	lsls	r2, r3, #2
 8004bfc:	441a      	add	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c08:	4b0c      	ldr	r3, [pc, #48]	; (8004c3c <UART_SetConfig+0x118>)
 8004c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2064      	movs	r0, #100	; 0x64
 8004c12:	fb00 f303 	mul.w	r3, r0, r3
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	3332      	adds	r3, #50	; 0x32
 8004c1c:	4a07      	ldr	r2, [pc, #28]	; (8004c3c <UART_SetConfig+0x118>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	f003 020f 	and.w	r2, r3, #15
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40013800 	.word	0x40013800
 8004c3c:	51eb851f 	.word	0x51eb851f

08004c40 <__errno>:
 8004c40:	4b01      	ldr	r3, [pc, #4]	; (8004c48 <__errno+0x8>)
 8004c42:	6818      	ldr	r0, [r3, #0]
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	2000000c 	.word	0x2000000c

08004c4c <__libc_init_array>:
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	2600      	movs	r6, #0
 8004c50:	4d0c      	ldr	r5, [pc, #48]	; (8004c84 <__libc_init_array+0x38>)
 8004c52:	4c0d      	ldr	r4, [pc, #52]	; (8004c88 <__libc_init_array+0x3c>)
 8004c54:	1b64      	subs	r4, r4, r5
 8004c56:	10a4      	asrs	r4, r4, #2
 8004c58:	42a6      	cmp	r6, r4
 8004c5a:	d109      	bne.n	8004c70 <__libc_init_array+0x24>
 8004c5c:	f004 fc52 	bl	8009504 <_init>
 8004c60:	2600      	movs	r6, #0
 8004c62:	4d0a      	ldr	r5, [pc, #40]	; (8004c8c <__libc_init_array+0x40>)
 8004c64:	4c0a      	ldr	r4, [pc, #40]	; (8004c90 <__libc_init_array+0x44>)
 8004c66:	1b64      	subs	r4, r4, r5
 8004c68:	10a4      	asrs	r4, r4, #2
 8004c6a:	42a6      	cmp	r6, r4
 8004c6c:	d105      	bne.n	8004c7a <__libc_init_array+0x2e>
 8004c6e:	bd70      	pop	{r4, r5, r6, pc}
 8004c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c74:	4798      	blx	r3
 8004c76:	3601      	adds	r6, #1
 8004c78:	e7ee      	b.n	8004c58 <__libc_init_array+0xc>
 8004c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7e:	4798      	blx	r3
 8004c80:	3601      	adds	r6, #1
 8004c82:	e7f2      	b.n	8004c6a <__libc_init_array+0x1e>
 8004c84:	08009c8c 	.word	0x08009c8c
 8004c88:	08009c8c 	.word	0x08009c8c
 8004c8c:	08009c8c 	.word	0x08009c8c
 8004c90:	08009c90 	.word	0x08009c90

08004c94 <memset>:
 8004c94:	4603      	mov	r3, r0
 8004c96:	4402      	add	r2, r0
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d100      	bne.n	8004c9e <memset+0xa>
 8004c9c:	4770      	bx	lr
 8004c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8004ca2:	e7f9      	b.n	8004c98 <memset+0x4>

08004ca4 <__cvt>:
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004caa:	461f      	mov	r7, r3
 8004cac:	bfbb      	ittet	lt
 8004cae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004cb2:	461f      	movlt	r7, r3
 8004cb4:	2300      	movge	r3, #0
 8004cb6:	232d      	movlt	r3, #45	; 0x2d
 8004cb8:	b088      	sub	sp, #32
 8004cba:	4614      	mov	r4, r2
 8004cbc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cbe:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004cc0:	7013      	strb	r3, [r2, #0]
 8004cc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cc4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004cc8:	f023 0820 	bic.w	r8, r3, #32
 8004ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004cd0:	d005      	beq.n	8004cde <__cvt+0x3a>
 8004cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004cd6:	d100      	bne.n	8004cda <__cvt+0x36>
 8004cd8:	3501      	adds	r5, #1
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e000      	b.n	8004ce0 <__cvt+0x3c>
 8004cde:	2303      	movs	r3, #3
 8004ce0:	aa07      	add	r2, sp, #28
 8004ce2:	9204      	str	r2, [sp, #16]
 8004ce4:	aa06      	add	r2, sp, #24
 8004ce6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004cea:	e9cd 3500 	strd	r3, r5, [sp]
 8004cee:	4622      	mov	r2, r4
 8004cf0:	463b      	mov	r3, r7
 8004cf2:	f001 fd85 	bl	8006800 <_dtoa_r>
 8004cf6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	d102      	bne.n	8004d04 <__cvt+0x60>
 8004cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d00:	07db      	lsls	r3, r3, #31
 8004d02:	d522      	bpl.n	8004d4a <__cvt+0xa6>
 8004d04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d08:	eb06 0905 	add.w	r9, r6, r5
 8004d0c:	d110      	bne.n	8004d30 <__cvt+0x8c>
 8004d0e:	7833      	ldrb	r3, [r6, #0]
 8004d10:	2b30      	cmp	r3, #48	; 0x30
 8004d12:	d10a      	bne.n	8004d2a <__cvt+0x86>
 8004d14:	2200      	movs	r2, #0
 8004d16:	2300      	movs	r3, #0
 8004d18:	4620      	mov	r0, r4
 8004d1a:	4639      	mov	r1, r7
 8004d1c:	f7fb fe44 	bl	80009a8 <__aeabi_dcmpeq>
 8004d20:	b918      	cbnz	r0, 8004d2a <__cvt+0x86>
 8004d22:	f1c5 0501 	rsb	r5, r5, #1
 8004d26:	f8ca 5000 	str.w	r5, [sl]
 8004d2a:	f8da 3000 	ldr.w	r3, [sl]
 8004d2e:	4499      	add	r9, r3
 8004d30:	2200      	movs	r2, #0
 8004d32:	2300      	movs	r3, #0
 8004d34:	4620      	mov	r0, r4
 8004d36:	4639      	mov	r1, r7
 8004d38:	f7fb fe36 	bl	80009a8 <__aeabi_dcmpeq>
 8004d3c:	b108      	cbz	r0, 8004d42 <__cvt+0x9e>
 8004d3e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d42:	2230      	movs	r2, #48	; 0x30
 8004d44:	9b07      	ldr	r3, [sp, #28]
 8004d46:	454b      	cmp	r3, r9
 8004d48:	d307      	bcc.n	8004d5a <__cvt+0xb6>
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	9b07      	ldr	r3, [sp, #28]
 8004d4e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004d50:	1b9b      	subs	r3, r3, r6
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	b008      	add	sp, #32
 8004d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	9107      	str	r1, [sp, #28]
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e7f0      	b.n	8004d44 <__cvt+0xa0>

08004d62 <__exponent>:
 8004d62:	4603      	mov	r3, r0
 8004d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d66:	2900      	cmp	r1, #0
 8004d68:	f803 2b02 	strb.w	r2, [r3], #2
 8004d6c:	bfb6      	itet	lt
 8004d6e:	222d      	movlt	r2, #45	; 0x2d
 8004d70:	222b      	movge	r2, #43	; 0x2b
 8004d72:	4249      	neglt	r1, r1
 8004d74:	2909      	cmp	r1, #9
 8004d76:	7042      	strb	r2, [r0, #1]
 8004d78:	dd2b      	ble.n	8004dd2 <__exponent+0x70>
 8004d7a:	f10d 0407 	add.w	r4, sp, #7
 8004d7e:	46a4      	mov	ip, r4
 8004d80:	270a      	movs	r7, #10
 8004d82:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d86:	460a      	mov	r2, r1
 8004d88:	46a6      	mov	lr, r4
 8004d8a:	fb07 1516 	mls	r5, r7, r6, r1
 8004d8e:	2a63      	cmp	r2, #99	; 0x63
 8004d90:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d94:	4631      	mov	r1, r6
 8004d96:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d9e:	dcf0      	bgt.n	8004d82 <__exponent+0x20>
 8004da0:	3130      	adds	r1, #48	; 0x30
 8004da2:	f1ae 0502 	sub.w	r5, lr, #2
 8004da6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004daa:	4629      	mov	r1, r5
 8004dac:	1c44      	adds	r4, r0, #1
 8004dae:	4561      	cmp	r1, ip
 8004db0:	d30a      	bcc.n	8004dc8 <__exponent+0x66>
 8004db2:	f10d 0209 	add.w	r2, sp, #9
 8004db6:	eba2 020e 	sub.w	r2, r2, lr
 8004dba:	4565      	cmp	r5, ip
 8004dbc:	bf88      	it	hi
 8004dbe:	2200      	movhi	r2, #0
 8004dc0:	4413      	add	r3, r2
 8004dc2:	1a18      	subs	r0, r3, r0
 8004dc4:	b003      	add	sp, #12
 8004dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dcc:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004dd0:	e7ed      	b.n	8004dae <__exponent+0x4c>
 8004dd2:	2330      	movs	r3, #48	; 0x30
 8004dd4:	3130      	adds	r1, #48	; 0x30
 8004dd6:	7083      	strb	r3, [r0, #2]
 8004dd8:	70c1      	strb	r1, [r0, #3]
 8004dda:	1d03      	adds	r3, r0, #4
 8004ddc:	e7f1      	b.n	8004dc2 <__exponent+0x60>
	...

08004de0 <_printf_float>:
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	b091      	sub	sp, #68	; 0x44
 8004de6:	460c      	mov	r4, r1
 8004de8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004dec:	4616      	mov	r6, r2
 8004dee:	461f      	mov	r7, r3
 8004df0:	4605      	mov	r5, r0
 8004df2:	f002 fe59 	bl	8007aa8 <_localeconv_r>
 8004df6:	6803      	ldr	r3, [r0, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dfc:	f7fb f9a8 	bl	8000150 <strlen>
 8004e00:	2300      	movs	r3, #0
 8004e02:	930e      	str	r3, [sp, #56]	; 0x38
 8004e04:	f8d8 3000 	ldr.w	r3, [r8]
 8004e08:	900a      	str	r0, [sp, #40]	; 0x28
 8004e0a:	3307      	adds	r3, #7
 8004e0c:	f023 0307 	bic.w	r3, r3, #7
 8004e10:	f103 0208 	add.w	r2, r3, #8
 8004e14:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004e18:	f8d4 b000 	ldr.w	fp, [r4]
 8004e1c:	f8c8 2000 	str.w	r2, [r8]
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e28:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004e2c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e32:	f04f 32ff 	mov.w	r2, #4294967295
 8004e36:	4640      	mov	r0, r8
 8004e38:	4b9c      	ldr	r3, [pc, #624]	; (80050ac <_printf_float+0x2cc>)
 8004e3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e3c:	f7fb fde6 	bl	8000a0c <__aeabi_dcmpun>
 8004e40:	bb70      	cbnz	r0, 8004ea0 <_printf_float+0xc0>
 8004e42:	f04f 32ff 	mov.w	r2, #4294967295
 8004e46:	4640      	mov	r0, r8
 8004e48:	4b98      	ldr	r3, [pc, #608]	; (80050ac <_printf_float+0x2cc>)
 8004e4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e4c:	f7fb fdc0 	bl	80009d0 <__aeabi_dcmple>
 8004e50:	bb30      	cbnz	r0, 8004ea0 <_printf_float+0xc0>
 8004e52:	2200      	movs	r2, #0
 8004e54:	2300      	movs	r3, #0
 8004e56:	4640      	mov	r0, r8
 8004e58:	4651      	mov	r1, sl
 8004e5a:	f7fb fdaf 	bl	80009bc <__aeabi_dcmplt>
 8004e5e:	b110      	cbz	r0, 8004e66 <_printf_float+0x86>
 8004e60:	232d      	movs	r3, #45	; 0x2d
 8004e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e66:	4b92      	ldr	r3, [pc, #584]	; (80050b0 <_printf_float+0x2d0>)
 8004e68:	4892      	ldr	r0, [pc, #584]	; (80050b4 <_printf_float+0x2d4>)
 8004e6a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004e6e:	bf94      	ite	ls
 8004e70:	4698      	movls	r8, r3
 8004e72:	4680      	movhi	r8, r0
 8004e74:	2303      	movs	r3, #3
 8004e76:	f04f 0a00 	mov.w	sl, #0
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	f02b 0304 	bic.w	r3, fp, #4
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	4633      	mov	r3, r6
 8004e84:	4621      	mov	r1, r4
 8004e86:	4628      	mov	r0, r5
 8004e88:	9700      	str	r7, [sp, #0]
 8004e8a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e8c:	f000 f9d4 	bl	8005238 <_printf_common>
 8004e90:	3001      	adds	r0, #1
 8004e92:	f040 8090 	bne.w	8004fb6 <_printf_float+0x1d6>
 8004e96:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9a:	b011      	add	sp, #68	; 0x44
 8004e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ea0:	4642      	mov	r2, r8
 8004ea2:	4653      	mov	r3, sl
 8004ea4:	4640      	mov	r0, r8
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	f7fb fdb0 	bl	8000a0c <__aeabi_dcmpun>
 8004eac:	b148      	cbz	r0, 8004ec2 <_printf_float+0xe2>
 8004eae:	f1ba 0f00 	cmp.w	sl, #0
 8004eb2:	bfb8      	it	lt
 8004eb4:	232d      	movlt	r3, #45	; 0x2d
 8004eb6:	4880      	ldr	r0, [pc, #512]	; (80050b8 <_printf_float+0x2d8>)
 8004eb8:	bfb8      	it	lt
 8004eba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <_printf_float+0x2dc>)
 8004ec0:	e7d3      	b.n	8004e6a <_printf_float+0x8a>
 8004ec2:	6863      	ldr	r3, [r4, #4]
 8004ec4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	d142      	bne.n	8004f52 <_printf_float+0x172>
 8004ecc:	2306      	movs	r3, #6
 8004ece:	6063      	str	r3, [r4, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	9206      	str	r2, [sp, #24]
 8004ed4:	aa0e      	add	r2, sp, #56	; 0x38
 8004ed6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004eda:	aa0d      	add	r2, sp, #52	; 0x34
 8004edc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004ee0:	9203      	str	r2, [sp, #12]
 8004ee2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004ee6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	4642      	mov	r2, r8
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	4628      	mov	r0, r5
 8004ef4:	4653      	mov	r3, sl
 8004ef6:	910b      	str	r1, [sp, #44]	; 0x2c
 8004ef8:	f7ff fed4 	bl	8004ca4 <__cvt>
 8004efc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004efe:	4680      	mov	r8, r0
 8004f00:	2947      	cmp	r1, #71	; 0x47
 8004f02:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004f04:	d108      	bne.n	8004f18 <_printf_float+0x138>
 8004f06:	1cc8      	adds	r0, r1, #3
 8004f08:	db02      	blt.n	8004f10 <_printf_float+0x130>
 8004f0a:	6863      	ldr	r3, [r4, #4]
 8004f0c:	4299      	cmp	r1, r3
 8004f0e:	dd40      	ble.n	8004f92 <_printf_float+0x1b2>
 8004f10:	f1a9 0902 	sub.w	r9, r9, #2
 8004f14:	fa5f f989 	uxtb.w	r9, r9
 8004f18:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f1c:	d81f      	bhi.n	8004f5e <_printf_float+0x17e>
 8004f1e:	464a      	mov	r2, r9
 8004f20:	3901      	subs	r1, #1
 8004f22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f26:	910d      	str	r1, [sp, #52]	; 0x34
 8004f28:	f7ff ff1b 	bl	8004d62 <__exponent>
 8004f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f2e:	4682      	mov	sl, r0
 8004f30:	1813      	adds	r3, r2, r0
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	6123      	str	r3, [r4, #16]
 8004f36:	dc02      	bgt.n	8004f3e <_printf_float+0x15e>
 8004f38:	6822      	ldr	r2, [r4, #0]
 8004f3a:	07d2      	lsls	r2, r2, #31
 8004f3c:	d501      	bpl.n	8004f42 <_printf_float+0x162>
 8004f3e:	3301      	adds	r3, #1
 8004f40:	6123      	str	r3, [r4, #16]
 8004f42:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d09b      	beq.n	8004e82 <_printf_float+0xa2>
 8004f4a:	232d      	movs	r3, #45	; 0x2d
 8004f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f50:	e797      	b.n	8004e82 <_printf_float+0xa2>
 8004f52:	2947      	cmp	r1, #71	; 0x47
 8004f54:	d1bc      	bne.n	8004ed0 <_printf_float+0xf0>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ba      	bne.n	8004ed0 <_printf_float+0xf0>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e7b7      	b.n	8004ece <_printf_float+0xee>
 8004f5e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004f62:	d118      	bne.n	8004f96 <_printf_float+0x1b6>
 8004f64:	2900      	cmp	r1, #0
 8004f66:	6863      	ldr	r3, [r4, #4]
 8004f68:	dd0b      	ble.n	8004f82 <_printf_float+0x1a2>
 8004f6a:	6121      	str	r1, [r4, #16]
 8004f6c:	b913      	cbnz	r3, 8004f74 <_printf_float+0x194>
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	07d0      	lsls	r0, r2, #31
 8004f72:	d502      	bpl.n	8004f7a <_printf_float+0x19a>
 8004f74:	3301      	adds	r3, #1
 8004f76:	440b      	add	r3, r1
 8004f78:	6123      	str	r3, [r4, #16]
 8004f7a:	f04f 0a00 	mov.w	sl, #0
 8004f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f80:	e7df      	b.n	8004f42 <_printf_float+0x162>
 8004f82:	b913      	cbnz	r3, 8004f8a <_printf_float+0x1aa>
 8004f84:	6822      	ldr	r2, [r4, #0]
 8004f86:	07d2      	lsls	r2, r2, #31
 8004f88:	d501      	bpl.n	8004f8e <_printf_float+0x1ae>
 8004f8a:	3302      	adds	r3, #2
 8004f8c:	e7f4      	b.n	8004f78 <_printf_float+0x198>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e7f2      	b.n	8004f78 <_printf_float+0x198>
 8004f92:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f98:	4299      	cmp	r1, r3
 8004f9a:	db05      	blt.n	8004fa8 <_printf_float+0x1c8>
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	6121      	str	r1, [r4, #16]
 8004fa0:	07d8      	lsls	r0, r3, #31
 8004fa2:	d5ea      	bpl.n	8004f7a <_printf_float+0x19a>
 8004fa4:	1c4b      	adds	r3, r1, #1
 8004fa6:	e7e7      	b.n	8004f78 <_printf_float+0x198>
 8004fa8:	2900      	cmp	r1, #0
 8004faa:	bfcc      	ite	gt
 8004fac:	2201      	movgt	r2, #1
 8004fae:	f1c1 0202 	rsble	r2, r1, #2
 8004fb2:	4413      	add	r3, r2
 8004fb4:	e7e0      	b.n	8004f78 <_printf_float+0x198>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	055a      	lsls	r2, r3, #21
 8004fba:	d407      	bmi.n	8004fcc <_printf_float+0x1ec>
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	4642      	mov	r2, r8
 8004fc0:	4631      	mov	r1, r6
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	47b8      	blx	r7
 8004fc6:	3001      	adds	r0, #1
 8004fc8:	d12b      	bne.n	8005022 <_printf_float+0x242>
 8004fca:	e764      	b.n	8004e96 <_printf_float+0xb6>
 8004fcc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004fd0:	f240 80dd 	bls.w	800518e <_printf_float+0x3ae>
 8004fd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2300      	movs	r3, #0
 8004fdc:	f7fb fce4 	bl	80009a8 <__aeabi_dcmpeq>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	d033      	beq.n	800504c <_printf_float+0x26c>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	4a35      	ldr	r2, [pc, #212]	; (80050c0 <_printf_float+0x2e0>)
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f43f af51 	beq.w	8004e96 <_printf_float+0xb6>
 8004ff4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	db02      	blt.n	8005002 <_printf_float+0x222>
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	07d8      	lsls	r0, r3, #31
 8005000:	d50f      	bpl.n	8005022 <_printf_float+0x242>
 8005002:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005006:	4631      	mov	r1, r6
 8005008:	4628      	mov	r0, r5
 800500a:	47b8      	blx	r7
 800500c:	3001      	adds	r0, #1
 800500e:	f43f af42 	beq.w	8004e96 <_printf_float+0xb6>
 8005012:	f04f 0800 	mov.w	r8, #0
 8005016:	f104 091a 	add.w	r9, r4, #26
 800501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800501c:	3b01      	subs	r3, #1
 800501e:	4543      	cmp	r3, r8
 8005020:	dc09      	bgt.n	8005036 <_printf_float+0x256>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	079b      	lsls	r3, r3, #30
 8005026:	f100 8102 	bmi.w	800522e <_printf_float+0x44e>
 800502a:	68e0      	ldr	r0, [r4, #12]
 800502c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800502e:	4298      	cmp	r0, r3
 8005030:	bfb8      	it	lt
 8005032:	4618      	movlt	r0, r3
 8005034:	e731      	b.n	8004e9a <_printf_float+0xba>
 8005036:	2301      	movs	r3, #1
 8005038:	464a      	mov	r2, r9
 800503a:	4631      	mov	r1, r6
 800503c:	4628      	mov	r0, r5
 800503e:	47b8      	blx	r7
 8005040:	3001      	adds	r0, #1
 8005042:	f43f af28 	beq.w	8004e96 <_printf_float+0xb6>
 8005046:	f108 0801 	add.w	r8, r8, #1
 800504a:	e7e6      	b.n	800501a <_printf_float+0x23a>
 800504c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800504e:	2b00      	cmp	r3, #0
 8005050:	dc38      	bgt.n	80050c4 <_printf_float+0x2e4>
 8005052:	2301      	movs	r3, #1
 8005054:	4631      	mov	r1, r6
 8005056:	4628      	mov	r0, r5
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <_printf_float+0x2e0>)
 800505a:	47b8      	blx	r7
 800505c:	3001      	adds	r0, #1
 800505e:	f43f af1a 	beq.w	8004e96 <_printf_float+0xb6>
 8005062:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005066:	4313      	orrs	r3, r2
 8005068:	d102      	bne.n	8005070 <_printf_float+0x290>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	07d9      	lsls	r1, r3, #31
 800506e:	d5d8      	bpl.n	8005022 <_printf_float+0x242>
 8005070:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005074:	4631      	mov	r1, r6
 8005076:	4628      	mov	r0, r5
 8005078:	47b8      	blx	r7
 800507a:	3001      	adds	r0, #1
 800507c:	f43f af0b 	beq.w	8004e96 <_printf_float+0xb6>
 8005080:	f04f 0900 	mov.w	r9, #0
 8005084:	f104 0a1a 	add.w	sl, r4, #26
 8005088:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800508a:	425b      	negs	r3, r3
 800508c:	454b      	cmp	r3, r9
 800508e:	dc01      	bgt.n	8005094 <_printf_float+0x2b4>
 8005090:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005092:	e794      	b.n	8004fbe <_printf_float+0x1de>
 8005094:	2301      	movs	r3, #1
 8005096:	4652      	mov	r2, sl
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f aef9 	beq.w	8004e96 <_printf_float+0xb6>
 80050a4:	f109 0901 	add.w	r9, r9, #1
 80050a8:	e7ee      	b.n	8005088 <_printf_float+0x2a8>
 80050aa:	bf00      	nop
 80050ac:	7fefffff 	.word	0x7fefffff
 80050b0:	080097ec 	.word	0x080097ec
 80050b4:	080097f0 	.word	0x080097f0
 80050b8:	080097f8 	.word	0x080097f8
 80050bc:	080097f4 	.word	0x080097f4
 80050c0:	080097fc 	.word	0x080097fc
 80050c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050c8:	429a      	cmp	r2, r3
 80050ca:	bfa8      	it	ge
 80050cc:	461a      	movge	r2, r3
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	4691      	mov	r9, r2
 80050d2:	dc37      	bgt.n	8005144 <_printf_float+0x364>
 80050d4:	f04f 0b00 	mov.w	fp, #0
 80050d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050dc:	f104 021a 	add.w	r2, r4, #26
 80050e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80050e4:	ebaa 0309 	sub.w	r3, sl, r9
 80050e8:	455b      	cmp	r3, fp
 80050ea:	dc33      	bgt.n	8005154 <_printf_float+0x374>
 80050ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050f0:	429a      	cmp	r2, r3
 80050f2:	db3b      	blt.n	800516c <_printf_float+0x38c>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07da      	lsls	r2, r3, #31
 80050f8:	d438      	bmi.n	800516c <_printf_float+0x38c>
 80050fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80050fe:	eba3 020a 	sub.w	r2, r3, sl
 8005102:	eba3 0901 	sub.w	r9, r3, r1
 8005106:	4591      	cmp	r9, r2
 8005108:	bfa8      	it	ge
 800510a:	4691      	movge	r9, r2
 800510c:	f1b9 0f00 	cmp.w	r9, #0
 8005110:	dc34      	bgt.n	800517c <_printf_float+0x39c>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800511a:	f104 0a1a 	add.w	sl, r4, #26
 800511e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005122:	1a9b      	subs	r3, r3, r2
 8005124:	eba3 0309 	sub.w	r3, r3, r9
 8005128:	4543      	cmp	r3, r8
 800512a:	f77f af7a 	ble.w	8005022 <_printf_float+0x242>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	f43f aeac 	beq.w	8004e96 <_printf_float+0xb6>
 800513e:	f108 0801 	add.w	r8, r8, #1
 8005142:	e7ec      	b.n	800511e <_printf_float+0x33e>
 8005144:	4613      	mov	r3, r2
 8005146:	4631      	mov	r1, r6
 8005148:	4642      	mov	r2, r8
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	d1c0      	bne.n	80050d4 <_printf_float+0x2f4>
 8005152:	e6a0      	b.n	8004e96 <_printf_float+0xb6>
 8005154:	2301      	movs	r3, #1
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	920b      	str	r2, [sp, #44]	; 0x2c
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f ae99 	beq.w	8004e96 <_printf_float+0xb6>
 8005164:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005166:	f10b 0b01 	add.w	fp, fp, #1
 800516a:	e7b9      	b.n	80050e0 <_printf_float+0x300>
 800516c:	4631      	mov	r1, r6
 800516e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	d1bf      	bne.n	80050fa <_printf_float+0x31a>
 800517a:	e68c      	b.n	8004e96 <_printf_float+0xb6>
 800517c:	464b      	mov	r3, r9
 800517e:	4631      	mov	r1, r6
 8005180:	4628      	mov	r0, r5
 8005182:	eb08 020a 	add.w	r2, r8, sl
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	d1c2      	bne.n	8005112 <_printf_float+0x332>
 800518c:	e683      	b.n	8004e96 <_printf_float+0xb6>
 800518e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005190:	2a01      	cmp	r2, #1
 8005192:	dc01      	bgt.n	8005198 <_printf_float+0x3b8>
 8005194:	07db      	lsls	r3, r3, #31
 8005196:	d537      	bpl.n	8005208 <_printf_float+0x428>
 8005198:	2301      	movs	r3, #1
 800519a:	4642      	mov	r2, r8
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f ae77 	beq.w	8004e96 <_printf_float+0xb6>
 80051a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	f43f ae6f 	beq.w	8004e96 <_printf_float+0xb6>
 80051b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80051bc:	2200      	movs	r2, #0
 80051be:	2300      	movs	r3, #0
 80051c0:	f7fb fbf2 	bl	80009a8 <__aeabi_dcmpeq>
 80051c4:	b9d8      	cbnz	r0, 80051fe <_printf_float+0x41e>
 80051c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051c8:	f108 0201 	add.w	r2, r8, #1
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d10e      	bne.n	80051f6 <_printf_float+0x416>
 80051d8:	e65d      	b.n	8004e96 <_printf_float+0xb6>
 80051da:	2301      	movs	r3, #1
 80051dc:	464a      	mov	r2, r9
 80051de:	4631      	mov	r1, r6
 80051e0:	4628      	mov	r0, r5
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f ae56 	beq.w	8004e96 <_printf_float+0xb6>
 80051ea:	f108 0801 	add.w	r8, r8, #1
 80051ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80051f0:	3b01      	subs	r3, #1
 80051f2:	4543      	cmp	r3, r8
 80051f4:	dcf1      	bgt.n	80051da <_printf_float+0x3fa>
 80051f6:	4653      	mov	r3, sl
 80051f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80051fc:	e6e0      	b.n	8004fc0 <_printf_float+0x1e0>
 80051fe:	f04f 0800 	mov.w	r8, #0
 8005202:	f104 091a 	add.w	r9, r4, #26
 8005206:	e7f2      	b.n	80051ee <_printf_float+0x40e>
 8005208:	2301      	movs	r3, #1
 800520a:	4642      	mov	r2, r8
 800520c:	e7df      	b.n	80051ce <_printf_float+0x3ee>
 800520e:	2301      	movs	r3, #1
 8005210:	464a      	mov	r2, r9
 8005212:	4631      	mov	r1, r6
 8005214:	4628      	mov	r0, r5
 8005216:	47b8      	blx	r7
 8005218:	3001      	adds	r0, #1
 800521a:	f43f ae3c 	beq.w	8004e96 <_printf_float+0xb6>
 800521e:	f108 0801 	add.w	r8, r8, #1
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005226:	1a5b      	subs	r3, r3, r1
 8005228:	4543      	cmp	r3, r8
 800522a:	dcf0      	bgt.n	800520e <_printf_float+0x42e>
 800522c:	e6fd      	b.n	800502a <_printf_float+0x24a>
 800522e:	f04f 0800 	mov.w	r8, #0
 8005232:	f104 0919 	add.w	r9, r4, #25
 8005236:	e7f4      	b.n	8005222 <_printf_float+0x442>

08005238 <_printf_common>:
 8005238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800523c:	4616      	mov	r6, r2
 800523e:	4699      	mov	r9, r3
 8005240:	688a      	ldr	r2, [r1, #8]
 8005242:	690b      	ldr	r3, [r1, #16]
 8005244:	4607      	mov	r7, r0
 8005246:	4293      	cmp	r3, r2
 8005248:	bfb8      	it	lt
 800524a:	4613      	movlt	r3, r2
 800524c:	6033      	str	r3, [r6, #0]
 800524e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005252:	460c      	mov	r4, r1
 8005254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005258:	b10a      	cbz	r2, 800525e <_printf_common+0x26>
 800525a:	3301      	adds	r3, #1
 800525c:	6033      	str	r3, [r6, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	0699      	lsls	r1, r3, #26
 8005262:	bf42      	ittt	mi
 8005264:	6833      	ldrmi	r3, [r6, #0]
 8005266:	3302      	addmi	r3, #2
 8005268:	6033      	strmi	r3, [r6, #0]
 800526a:	6825      	ldr	r5, [r4, #0]
 800526c:	f015 0506 	ands.w	r5, r5, #6
 8005270:	d106      	bne.n	8005280 <_printf_common+0x48>
 8005272:	f104 0a19 	add.w	sl, r4, #25
 8005276:	68e3      	ldr	r3, [r4, #12]
 8005278:	6832      	ldr	r2, [r6, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	42ab      	cmp	r3, r5
 800527e:	dc28      	bgt.n	80052d2 <_printf_common+0x9a>
 8005280:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005284:	1e13      	subs	r3, r2, #0
 8005286:	6822      	ldr	r2, [r4, #0]
 8005288:	bf18      	it	ne
 800528a:	2301      	movne	r3, #1
 800528c:	0692      	lsls	r2, r2, #26
 800528e:	d42d      	bmi.n	80052ec <_printf_common+0xb4>
 8005290:	4649      	mov	r1, r9
 8005292:	4638      	mov	r0, r7
 8005294:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005298:	47c0      	blx	r8
 800529a:	3001      	adds	r0, #1
 800529c:	d020      	beq.n	80052e0 <_printf_common+0xa8>
 800529e:	6823      	ldr	r3, [r4, #0]
 80052a0:	68e5      	ldr	r5, [r4, #12]
 80052a2:	f003 0306 	and.w	r3, r3, #6
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	bf18      	it	ne
 80052aa:	2500      	movne	r5, #0
 80052ac:	6832      	ldr	r2, [r6, #0]
 80052ae:	f04f 0600 	mov.w	r6, #0
 80052b2:	68a3      	ldr	r3, [r4, #8]
 80052b4:	bf08      	it	eq
 80052b6:	1aad      	subeq	r5, r5, r2
 80052b8:	6922      	ldr	r2, [r4, #16]
 80052ba:	bf08      	it	eq
 80052bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052c0:	4293      	cmp	r3, r2
 80052c2:	bfc4      	itt	gt
 80052c4:	1a9b      	subgt	r3, r3, r2
 80052c6:	18ed      	addgt	r5, r5, r3
 80052c8:	341a      	adds	r4, #26
 80052ca:	42b5      	cmp	r5, r6
 80052cc:	d11a      	bne.n	8005304 <_printf_common+0xcc>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e008      	b.n	80052e4 <_printf_common+0xac>
 80052d2:	2301      	movs	r3, #1
 80052d4:	4652      	mov	r2, sl
 80052d6:	4649      	mov	r1, r9
 80052d8:	4638      	mov	r0, r7
 80052da:	47c0      	blx	r8
 80052dc:	3001      	adds	r0, #1
 80052de:	d103      	bne.n	80052e8 <_printf_common+0xb0>
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052e8:	3501      	adds	r5, #1
 80052ea:	e7c4      	b.n	8005276 <_printf_common+0x3e>
 80052ec:	2030      	movs	r0, #48	; 0x30
 80052ee:	18e1      	adds	r1, r4, r3
 80052f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052fa:	4422      	add	r2, r4
 80052fc:	3302      	adds	r3, #2
 80052fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005302:	e7c5      	b.n	8005290 <_printf_common+0x58>
 8005304:	2301      	movs	r3, #1
 8005306:	4622      	mov	r2, r4
 8005308:	4649      	mov	r1, r9
 800530a:	4638      	mov	r0, r7
 800530c:	47c0      	blx	r8
 800530e:	3001      	adds	r0, #1
 8005310:	d0e6      	beq.n	80052e0 <_printf_common+0xa8>
 8005312:	3601      	adds	r6, #1
 8005314:	e7d9      	b.n	80052ca <_printf_common+0x92>
	...

08005318 <_printf_i>:
 8005318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	7e0f      	ldrb	r7, [r1, #24]
 800531e:	4691      	mov	r9, r2
 8005320:	2f78      	cmp	r7, #120	; 0x78
 8005322:	4680      	mov	r8, r0
 8005324:	460c      	mov	r4, r1
 8005326:	469a      	mov	sl, r3
 8005328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800532a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800532e:	d807      	bhi.n	8005340 <_printf_i+0x28>
 8005330:	2f62      	cmp	r7, #98	; 0x62
 8005332:	d80a      	bhi.n	800534a <_printf_i+0x32>
 8005334:	2f00      	cmp	r7, #0
 8005336:	f000 80d9 	beq.w	80054ec <_printf_i+0x1d4>
 800533a:	2f58      	cmp	r7, #88	; 0x58
 800533c:	f000 80a4 	beq.w	8005488 <_printf_i+0x170>
 8005340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005348:	e03a      	b.n	80053c0 <_printf_i+0xa8>
 800534a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800534e:	2b15      	cmp	r3, #21
 8005350:	d8f6      	bhi.n	8005340 <_printf_i+0x28>
 8005352:	a101      	add	r1, pc, #4	; (adr r1, 8005358 <_printf_i+0x40>)
 8005354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005358:	080053b1 	.word	0x080053b1
 800535c:	080053c5 	.word	0x080053c5
 8005360:	08005341 	.word	0x08005341
 8005364:	08005341 	.word	0x08005341
 8005368:	08005341 	.word	0x08005341
 800536c:	08005341 	.word	0x08005341
 8005370:	080053c5 	.word	0x080053c5
 8005374:	08005341 	.word	0x08005341
 8005378:	08005341 	.word	0x08005341
 800537c:	08005341 	.word	0x08005341
 8005380:	08005341 	.word	0x08005341
 8005384:	080054d3 	.word	0x080054d3
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080054b5 	.word	0x080054b5
 8005390:	08005341 	.word	0x08005341
 8005394:	08005341 	.word	0x08005341
 8005398:	080054f5 	.word	0x080054f5
 800539c:	08005341 	.word	0x08005341
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	08005341 	.word	0x08005341
 80053a8:	08005341 	.word	0x08005341
 80053ac:	080054bd 	.word	0x080054bd
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	1d1a      	adds	r2, r3, #4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	602a      	str	r2, [r5, #0]
 80053b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053c0:	2301      	movs	r3, #1
 80053c2:	e0a4      	b.n	800550e <_printf_i+0x1f6>
 80053c4:	6820      	ldr	r0, [r4, #0]
 80053c6:	6829      	ldr	r1, [r5, #0]
 80053c8:	0606      	lsls	r6, r0, #24
 80053ca:	f101 0304 	add.w	r3, r1, #4
 80053ce:	d50a      	bpl.n	80053e6 <_printf_i+0xce>
 80053d0:	680e      	ldr	r6, [r1, #0]
 80053d2:	602b      	str	r3, [r5, #0]
 80053d4:	2e00      	cmp	r6, #0
 80053d6:	da03      	bge.n	80053e0 <_printf_i+0xc8>
 80053d8:	232d      	movs	r3, #45	; 0x2d
 80053da:	4276      	negs	r6, r6
 80053dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e0:	230a      	movs	r3, #10
 80053e2:	485e      	ldr	r0, [pc, #376]	; (800555c <_printf_i+0x244>)
 80053e4:	e019      	b.n	800541a <_printf_i+0x102>
 80053e6:	680e      	ldr	r6, [r1, #0]
 80053e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053ec:	602b      	str	r3, [r5, #0]
 80053ee:	bf18      	it	ne
 80053f0:	b236      	sxthne	r6, r6
 80053f2:	e7ef      	b.n	80053d4 <_printf_i+0xbc>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	6820      	ldr	r0, [r4, #0]
 80053f8:	1d19      	adds	r1, r3, #4
 80053fa:	6029      	str	r1, [r5, #0]
 80053fc:	0601      	lsls	r1, r0, #24
 80053fe:	d501      	bpl.n	8005404 <_printf_i+0xec>
 8005400:	681e      	ldr	r6, [r3, #0]
 8005402:	e002      	b.n	800540a <_printf_i+0xf2>
 8005404:	0646      	lsls	r6, r0, #25
 8005406:	d5fb      	bpl.n	8005400 <_printf_i+0xe8>
 8005408:	881e      	ldrh	r6, [r3, #0]
 800540a:	2f6f      	cmp	r7, #111	; 0x6f
 800540c:	bf0c      	ite	eq
 800540e:	2308      	moveq	r3, #8
 8005410:	230a      	movne	r3, #10
 8005412:	4852      	ldr	r0, [pc, #328]	; (800555c <_printf_i+0x244>)
 8005414:	2100      	movs	r1, #0
 8005416:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800541a:	6865      	ldr	r5, [r4, #4]
 800541c:	2d00      	cmp	r5, #0
 800541e:	bfa8      	it	ge
 8005420:	6821      	ldrge	r1, [r4, #0]
 8005422:	60a5      	str	r5, [r4, #8]
 8005424:	bfa4      	itt	ge
 8005426:	f021 0104 	bicge.w	r1, r1, #4
 800542a:	6021      	strge	r1, [r4, #0]
 800542c:	b90e      	cbnz	r6, 8005432 <_printf_i+0x11a>
 800542e:	2d00      	cmp	r5, #0
 8005430:	d04d      	beq.n	80054ce <_printf_i+0x1b6>
 8005432:	4615      	mov	r5, r2
 8005434:	fbb6 f1f3 	udiv	r1, r6, r3
 8005438:	fb03 6711 	mls	r7, r3, r1, r6
 800543c:	5dc7      	ldrb	r7, [r0, r7]
 800543e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005442:	4637      	mov	r7, r6
 8005444:	42bb      	cmp	r3, r7
 8005446:	460e      	mov	r6, r1
 8005448:	d9f4      	bls.n	8005434 <_printf_i+0x11c>
 800544a:	2b08      	cmp	r3, #8
 800544c:	d10b      	bne.n	8005466 <_printf_i+0x14e>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	07de      	lsls	r6, r3, #31
 8005452:	d508      	bpl.n	8005466 <_printf_i+0x14e>
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	6861      	ldr	r1, [r4, #4]
 8005458:	4299      	cmp	r1, r3
 800545a:	bfde      	ittt	le
 800545c:	2330      	movle	r3, #48	; 0x30
 800545e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005462:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005466:	1b52      	subs	r2, r2, r5
 8005468:	6122      	str	r2, [r4, #16]
 800546a:	464b      	mov	r3, r9
 800546c:	4621      	mov	r1, r4
 800546e:	4640      	mov	r0, r8
 8005470:	f8cd a000 	str.w	sl, [sp]
 8005474:	aa03      	add	r2, sp, #12
 8005476:	f7ff fedf 	bl	8005238 <_printf_common>
 800547a:	3001      	adds	r0, #1
 800547c:	d14c      	bne.n	8005518 <_printf_i+0x200>
 800547e:	f04f 30ff 	mov.w	r0, #4294967295
 8005482:	b004      	add	sp, #16
 8005484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005488:	4834      	ldr	r0, [pc, #208]	; (800555c <_printf_i+0x244>)
 800548a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800548e:	6829      	ldr	r1, [r5, #0]
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f851 6b04 	ldr.w	r6, [r1], #4
 8005496:	6029      	str	r1, [r5, #0]
 8005498:	061d      	lsls	r5, r3, #24
 800549a:	d514      	bpl.n	80054c6 <_printf_i+0x1ae>
 800549c:	07df      	lsls	r7, r3, #31
 800549e:	bf44      	itt	mi
 80054a0:	f043 0320 	orrmi.w	r3, r3, #32
 80054a4:	6023      	strmi	r3, [r4, #0]
 80054a6:	b91e      	cbnz	r6, 80054b0 <_printf_i+0x198>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	f023 0320 	bic.w	r3, r3, #32
 80054ae:	6023      	str	r3, [r4, #0]
 80054b0:	2310      	movs	r3, #16
 80054b2:	e7af      	b.n	8005414 <_printf_i+0xfc>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	f043 0320 	orr.w	r3, r3, #32
 80054ba:	6023      	str	r3, [r4, #0]
 80054bc:	2378      	movs	r3, #120	; 0x78
 80054be:	4828      	ldr	r0, [pc, #160]	; (8005560 <_printf_i+0x248>)
 80054c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054c4:	e7e3      	b.n	800548e <_printf_i+0x176>
 80054c6:	0659      	lsls	r1, r3, #25
 80054c8:	bf48      	it	mi
 80054ca:	b2b6      	uxthmi	r6, r6
 80054cc:	e7e6      	b.n	800549c <_printf_i+0x184>
 80054ce:	4615      	mov	r5, r2
 80054d0:	e7bb      	b.n	800544a <_printf_i+0x132>
 80054d2:	682b      	ldr	r3, [r5, #0]
 80054d4:	6826      	ldr	r6, [r4, #0]
 80054d6:	1d18      	adds	r0, r3, #4
 80054d8:	6961      	ldr	r1, [r4, #20]
 80054da:	6028      	str	r0, [r5, #0]
 80054dc:	0635      	lsls	r5, r6, #24
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	d501      	bpl.n	80054e6 <_printf_i+0x1ce>
 80054e2:	6019      	str	r1, [r3, #0]
 80054e4:	e002      	b.n	80054ec <_printf_i+0x1d4>
 80054e6:	0670      	lsls	r0, r6, #25
 80054e8:	d5fb      	bpl.n	80054e2 <_printf_i+0x1ca>
 80054ea:	8019      	strh	r1, [r3, #0]
 80054ec:	2300      	movs	r3, #0
 80054ee:	4615      	mov	r5, r2
 80054f0:	6123      	str	r3, [r4, #16]
 80054f2:	e7ba      	b.n	800546a <_printf_i+0x152>
 80054f4:	682b      	ldr	r3, [r5, #0]
 80054f6:	2100      	movs	r1, #0
 80054f8:	1d1a      	adds	r2, r3, #4
 80054fa:	602a      	str	r2, [r5, #0]
 80054fc:	681d      	ldr	r5, [r3, #0]
 80054fe:	6862      	ldr	r2, [r4, #4]
 8005500:	4628      	mov	r0, r5
 8005502:	f002 faef 	bl	8007ae4 <memchr>
 8005506:	b108      	cbz	r0, 800550c <_printf_i+0x1f4>
 8005508:	1b40      	subs	r0, r0, r5
 800550a:	6060      	str	r0, [r4, #4]
 800550c:	6863      	ldr	r3, [r4, #4]
 800550e:	6123      	str	r3, [r4, #16]
 8005510:	2300      	movs	r3, #0
 8005512:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005516:	e7a8      	b.n	800546a <_printf_i+0x152>
 8005518:	462a      	mov	r2, r5
 800551a:	4649      	mov	r1, r9
 800551c:	4640      	mov	r0, r8
 800551e:	6923      	ldr	r3, [r4, #16]
 8005520:	47d0      	blx	sl
 8005522:	3001      	adds	r0, #1
 8005524:	d0ab      	beq.n	800547e <_printf_i+0x166>
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	079b      	lsls	r3, r3, #30
 800552a:	d413      	bmi.n	8005554 <_printf_i+0x23c>
 800552c:	68e0      	ldr	r0, [r4, #12]
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	4298      	cmp	r0, r3
 8005532:	bfb8      	it	lt
 8005534:	4618      	movlt	r0, r3
 8005536:	e7a4      	b.n	8005482 <_printf_i+0x16a>
 8005538:	2301      	movs	r3, #1
 800553a:	4632      	mov	r2, r6
 800553c:	4649      	mov	r1, r9
 800553e:	4640      	mov	r0, r8
 8005540:	47d0      	blx	sl
 8005542:	3001      	adds	r0, #1
 8005544:	d09b      	beq.n	800547e <_printf_i+0x166>
 8005546:	3501      	adds	r5, #1
 8005548:	68e3      	ldr	r3, [r4, #12]
 800554a:	9903      	ldr	r1, [sp, #12]
 800554c:	1a5b      	subs	r3, r3, r1
 800554e:	42ab      	cmp	r3, r5
 8005550:	dcf2      	bgt.n	8005538 <_printf_i+0x220>
 8005552:	e7eb      	b.n	800552c <_printf_i+0x214>
 8005554:	2500      	movs	r5, #0
 8005556:	f104 0619 	add.w	r6, r4, #25
 800555a:	e7f5      	b.n	8005548 <_printf_i+0x230>
 800555c:	080097fe 	.word	0x080097fe
 8005560:	0800980f 	.word	0x0800980f

08005564 <_scanf_float>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	b087      	sub	sp, #28
 800556a:	9303      	str	r3, [sp, #12]
 800556c:	688b      	ldr	r3, [r1, #8]
 800556e:	4617      	mov	r7, r2
 8005570:	1e5a      	subs	r2, r3, #1
 8005572:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005576:	bf85      	ittet	hi
 8005578:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800557c:	195b      	addhi	r3, r3, r5
 800557e:	2300      	movls	r3, #0
 8005580:	9302      	strhi	r3, [sp, #8]
 8005582:	bf88      	it	hi
 8005584:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005588:	468b      	mov	fp, r1
 800558a:	f04f 0500 	mov.w	r5, #0
 800558e:	bf8c      	ite	hi
 8005590:	608b      	strhi	r3, [r1, #8]
 8005592:	9302      	strls	r3, [sp, #8]
 8005594:	680b      	ldr	r3, [r1, #0]
 8005596:	4680      	mov	r8, r0
 8005598:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800559c:	f84b 3b1c 	str.w	r3, [fp], #28
 80055a0:	460c      	mov	r4, r1
 80055a2:	465e      	mov	r6, fp
 80055a4:	46aa      	mov	sl, r5
 80055a6:	46a9      	mov	r9, r5
 80055a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055ac:	9501      	str	r5, [sp, #4]
 80055ae:	68a2      	ldr	r2, [r4, #8]
 80055b0:	b152      	cbz	r2, 80055c8 <_scanf_float+0x64>
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b4e      	cmp	r3, #78	; 0x4e
 80055b8:	d864      	bhi.n	8005684 <_scanf_float+0x120>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d83c      	bhi.n	8005638 <_scanf_float+0xd4>
 80055be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	280e      	cmp	r0, #14
 80055c6:	d93a      	bls.n	800563e <_scanf_float+0xda>
 80055c8:	f1b9 0f00 	cmp.w	r9, #0
 80055cc:	d003      	beq.n	80055d6 <_scanf_float+0x72>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055da:	f1ba 0f01 	cmp.w	sl, #1
 80055de:	f200 8113 	bhi.w	8005808 <_scanf_float+0x2a4>
 80055e2:	455e      	cmp	r6, fp
 80055e4:	f200 8105 	bhi.w	80057f2 <_scanf_float+0x28e>
 80055e8:	2501      	movs	r5, #1
 80055ea:	4628      	mov	r0, r5
 80055ec:	b007      	add	sp, #28
 80055ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80055f6:	2a0d      	cmp	r2, #13
 80055f8:	d8e6      	bhi.n	80055c8 <_scanf_float+0x64>
 80055fa:	a101      	add	r1, pc, #4	; (adr r1, 8005600 <_scanf_float+0x9c>)
 80055fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005600:	0800573f 	.word	0x0800573f
 8005604:	080055c9 	.word	0x080055c9
 8005608:	080055c9 	.word	0x080055c9
 800560c:	080055c9 	.word	0x080055c9
 8005610:	0800579f 	.word	0x0800579f
 8005614:	08005777 	.word	0x08005777
 8005618:	080055c9 	.word	0x080055c9
 800561c:	080055c9 	.word	0x080055c9
 8005620:	0800574d 	.word	0x0800574d
 8005624:	080055c9 	.word	0x080055c9
 8005628:	080055c9 	.word	0x080055c9
 800562c:	080055c9 	.word	0x080055c9
 8005630:	080055c9 	.word	0x080055c9
 8005634:	08005705 	.word	0x08005705
 8005638:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800563c:	e7db      	b.n	80055f6 <_scanf_float+0x92>
 800563e:	290e      	cmp	r1, #14
 8005640:	d8c2      	bhi.n	80055c8 <_scanf_float+0x64>
 8005642:	a001      	add	r0, pc, #4	; (adr r0, 8005648 <_scanf_float+0xe4>)
 8005644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005648:	080056f7 	.word	0x080056f7
 800564c:	080055c9 	.word	0x080055c9
 8005650:	080056f7 	.word	0x080056f7
 8005654:	0800578b 	.word	0x0800578b
 8005658:	080055c9 	.word	0x080055c9
 800565c:	080056a5 	.word	0x080056a5
 8005660:	080056e1 	.word	0x080056e1
 8005664:	080056e1 	.word	0x080056e1
 8005668:	080056e1 	.word	0x080056e1
 800566c:	080056e1 	.word	0x080056e1
 8005670:	080056e1 	.word	0x080056e1
 8005674:	080056e1 	.word	0x080056e1
 8005678:	080056e1 	.word	0x080056e1
 800567c:	080056e1 	.word	0x080056e1
 8005680:	080056e1 	.word	0x080056e1
 8005684:	2b6e      	cmp	r3, #110	; 0x6e
 8005686:	d809      	bhi.n	800569c <_scanf_float+0x138>
 8005688:	2b60      	cmp	r3, #96	; 0x60
 800568a:	d8b2      	bhi.n	80055f2 <_scanf_float+0x8e>
 800568c:	2b54      	cmp	r3, #84	; 0x54
 800568e:	d077      	beq.n	8005780 <_scanf_float+0x21c>
 8005690:	2b59      	cmp	r3, #89	; 0x59
 8005692:	d199      	bne.n	80055c8 <_scanf_float+0x64>
 8005694:	2d07      	cmp	r5, #7
 8005696:	d197      	bne.n	80055c8 <_scanf_float+0x64>
 8005698:	2508      	movs	r5, #8
 800569a:	e029      	b.n	80056f0 <_scanf_float+0x18c>
 800569c:	2b74      	cmp	r3, #116	; 0x74
 800569e:	d06f      	beq.n	8005780 <_scanf_float+0x21c>
 80056a0:	2b79      	cmp	r3, #121	; 0x79
 80056a2:	e7f6      	b.n	8005692 <_scanf_float+0x12e>
 80056a4:	6821      	ldr	r1, [r4, #0]
 80056a6:	05c8      	lsls	r0, r1, #23
 80056a8:	d51a      	bpl.n	80056e0 <_scanf_float+0x17c>
 80056aa:	9b02      	ldr	r3, [sp, #8]
 80056ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80056b0:	6021      	str	r1, [r4, #0]
 80056b2:	f109 0901 	add.w	r9, r9, #1
 80056b6:	b11b      	cbz	r3, 80056c0 <_scanf_float+0x15c>
 80056b8:	3b01      	subs	r3, #1
 80056ba:	3201      	adds	r2, #1
 80056bc:	9302      	str	r3, [sp, #8]
 80056be:	60a2      	str	r2, [r4, #8]
 80056c0:	68a3      	ldr	r3, [r4, #8]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	60a3      	str	r3, [r4, #8]
 80056c6:	6923      	ldr	r3, [r4, #16]
 80056c8:	3301      	adds	r3, #1
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	607b      	str	r3, [r7, #4]
 80056d4:	f340 8084 	ble.w	80057e0 <_scanf_float+0x27c>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	3301      	adds	r3, #1
 80056dc:	603b      	str	r3, [r7, #0]
 80056de:	e766      	b.n	80055ae <_scanf_float+0x4a>
 80056e0:	eb1a 0f05 	cmn.w	sl, r5
 80056e4:	f47f af70 	bne.w	80055c8 <_scanf_float+0x64>
 80056e8:	6822      	ldr	r2, [r4, #0]
 80056ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80056ee:	6022      	str	r2, [r4, #0]
 80056f0:	f806 3b01 	strb.w	r3, [r6], #1
 80056f4:	e7e4      	b.n	80056c0 <_scanf_float+0x15c>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	0610      	lsls	r0, r2, #24
 80056fa:	f57f af65 	bpl.w	80055c8 <_scanf_float+0x64>
 80056fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005702:	e7f4      	b.n	80056ee <_scanf_float+0x18a>
 8005704:	f1ba 0f00 	cmp.w	sl, #0
 8005708:	d10e      	bne.n	8005728 <_scanf_float+0x1c4>
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	d10e      	bne.n	800572e <_scanf_float+0x1ca>
 8005710:	6822      	ldr	r2, [r4, #0]
 8005712:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005716:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800571a:	d108      	bne.n	800572e <_scanf_float+0x1ca>
 800571c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005720:	f04f 0a01 	mov.w	sl, #1
 8005724:	6022      	str	r2, [r4, #0]
 8005726:	e7e3      	b.n	80056f0 <_scanf_float+0x18c>
 8005728:	f1ba 0f02 	cmp.w	sl, #2
 800572c:	d055      	beq.n	80057da <_scanf_float+0x276>
 800572e:	2d01      	cmp	r5, #1
 8005730:	d002      	beq.n	8005738 <_scanf_float+0x1d4>
 8005732:	2d04      	cmp	r5, #4
 8005734:	f47f af48 	bne.w	80055c8 <_scanf_float+0x64>
 8005738:	3501      	adds	r5, #1
 800573a:	b2ed      	uxtb	r5, r5
 800573c:	e7d8      	b.n	80056f0 <_scanf_float+0x18c>
 800573e:	f1ba 0f01 	cmp.w	sl, #1
 8005742:	f47f af41 	bne.w	80055c8 <_scanf_float+0x64>
 8005746:	f04f 0a02 	mov.w	sl, #2
 800574a:	e7d1      	b.n	80056f0 <_scanf_float+0x18c>
 800574c:	b97d      	cbnz	r5, 800576e <_scanf_float+0x20a>
 800574e:	f1b9 0f00 	cmp.w	r9, #0
 8005752:	f47f af3c 	bne.w	80055ce <_scanf_float+0x6a>
 8005756:	6822      	ldr	r2, [r4, #0]
 8005758:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800575c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005760:	f47f af39 	bne.w	80055d6 <_scanf_float+0x72>
 8005764:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005768:	2501      	movs	r5, #1
 800576a:	6022      	str	r2, [r4, #0]
 800576c:	e7c0      	b.n	80056f0 <_scanf_float+0x18c>
 800576e:	2d03      	cmp	r5, #3
 8005770:	d0e2      	beq.n	8005738 <_scanf_float+0x1d4>
 8005772:	2d05      	cmp	r5, #5
 8005774:	e7de      	b.n	8005734 <_scanf_float+0x1d0>
 8005776:	2d02      	cmp	r5, #2
 8005778:	f47f af26 	bne.w	80055c8 <_scanf_float+0x64>
 800577c:	2503      	movs	r5, #3
 800577e:	e7b7      	b.n	80056f0 <_scanf_float+0x18c>
 8005780:	2d06      	cmp	r5, #6
 8005782:	f47f af21 	bne.w	80055c8 <_scanf_float+0x64>
 8005786:	2507      	movs	r5, #7
 8005788:	e7b2      	b.n	80056f0 <_scanf_float+0x18c>
 800578a:	6822      	ldr	r2, [r4, #0]
 800578c:	0591      	lsls	r1, r2, #22
 800578e:	f57f af1b 	bpl.w	80055c8 <_scanf_float+0x64>
 8005792:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005796:	6022      	str	r2, [r4, #0]
 8005798:	f8cd 9004 	str.w	r9, [sp, #4]
 800579c:	e7a8      	b.n	80056f0 <_scanf_float+0x18c>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80057a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80057a8:	d006      	beq.n	80057b8 <_scanf_float+0x254>
 80057aa:	0550      	lsls	r0, r2, #21
 80057ac:	f57f af0c 	bpl.w	80055c8 <_scanf_float+0x64>
 80057b0:	f1b9 0f00 	cmp.w	r9, #0
 80057b4:	f43f af0f 	beq.w	80055d6 <_scanf_float+0x72>
 80057b8:	0591      	lsls	r1, r2, #22
 80057ba:	bf58      	it	pl
 80057bc:	9901      	ldrpl	r1, [sp, #4]
 80057be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057c2:	bf58      	it	pl
 80057c4:	eba9 0101 	subpl.w	r1, r9, r1
 80057c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80057cc:	f04f 0900 	mov.w	r9, #0
 80057d0:	bf58      	it	pl
 80057d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057d6:	6022      	str	r2, [r4, #0]
 80057d8:	e78a      	b.n	80056f0 <_scanf_float+0x18c>
 80057da:	f04f 0a03 	mov.w	sl, #3
 80057de:	e787      	b.n	80056f0 <_scanf_float+0x18c>
 80057e0:	4639      	mov	r1, r7
 80057e2:	4640      	mov	r0, r8
 80057e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80057e8:	4798      	blx	r3
 80057ea:	2800      	cmp	r0, #0
 80057ec:	f43f aedf 	beq.w	80055ae <_scanf_float+0x4a>
 80057f0:	e6ea      	b.n	80055c8 <_scanf_float+0x64>
 80057f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057f6:	463a      	mov	r2, r7
 80057f8:	4640      	mov	r0, r8
 80057fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057fe:	4798      	blx	r3
 8005800:	6923      	ldr	r3, [r4, #16]
 8005802:	3b01      	subs	r3, #1
 8005804:	6123      	str	r3, [r4, #16]
 8005806:	e6ec      	b.n	80055e2 <_scanf_float+0x7e>
 8005808:	1e6b      	subs	r3, r5, #1
 800580a:	2b06      	cmp	r3, #6
 800580c:	d825      	bhi.n	800585a <_scanf_float+0x2f6>
 800580e:	2d02      	cmp	r5, #2
 8005810:	d836      	bhi.n	8005880 <_scanf_float+0x31c>
 8005812:	455e      	cmp	r6, fp
 8005814:	f67f aee8 	bls.w	80055e8 <_scanf_float+0x84>
 8005818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800581c:	463a      	mov	r2, r7
 800581e:	4640      	mov	r0, r8
 8005820:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005824:	4798      	blx	r3
 8005826:	6923      	ldr	r3, [r4, #16]
 8005828:	3b01      	subs	r3, #1
 800582a:	6123      	str	r3, [r4, #16]
 800582c:	e7f1      	b.n	8005812 <_scanf_float+0x2ae>
 800582e:	9802      	ldr	r0, [sp, #8]
 8005830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005834:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005838:	463a      	mov	r2, r7
 800583a:	9002      	str	r0, [sp, #8]
 800583c:	4640      	mov	r0, r8
 800583e:	4798      	blx	r3
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	3b01      	subs	r3, #1
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	f10a 3aff 	add.w	sl, sl, #4294967295
 800584a:	fa5f fa8a 	uxtb.w	sl, sl
 800584e:	f1ba 0f02 	cmp.w	sl, #2
 8005852:	d1ec      	bne.n	800582e <_scanf_float+0x2ca>
 8005854:	3d03      	subs	r5, #3
 8005856:	b2ed      	uxtb	r5, r5
 8005858:	1b76      	subs	r6, r6, r5
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	05da      	lsls	r2, r3, #23
 800585e:	d52f      	bpl.n	80058c0 <_scanf_float+0x35c>
 8005860:	055b      	lsls	r3, r3, #21
 8005862:	d510      	bpl.n	8005886 <_scanf_float+0x322>
 8005864:	455e      	cmp	r6, fp
 8005866:	f67f aebf 	bls.w	80055e8 <_scanf_float+0x84>
 800586a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800586e:	463a      	mov	r2, r7
 8005870:	4640      	mov	r0, r8
 8005872:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005876:	4798      	blx	r3
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	3b01      	subs	r3, #1
 800587c:	6123      	str	r3, [r4, #16]
 800587e:	e7f1      	b.n	8005864 <_scanf_float+0x300>
 8005880:	46aa      	mov	sl, r5
 8005882:	9602      	str	r6, [sp, #8]
 8005884:	e7df      	b.n	8005846 <_scanf_float+0x2e2>
 8005886:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800588a:	6923      	ldr	r3, [r4, #16]
 800588c:	2965      	cmp	r1, #101	; 0x65
 800588e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005892:	f106 35ff 	add.w	r5, r6, #4294967295
 8005896:	6123      	str	r3, [r4, #16]
 8005898:	d00c      	beq.n	80058b4 <_scanf_float+0x350>
 800589a:	2945      	cmp	r1, #69	; 0x45
 800589c:	d00a      	beq.n	80058b4 <_scanf_float+0x350>
 800589e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058a2:	463a      	mov	r2, r7
 80058a4:	4640      	mov	r0, r8
 80058a6:	4798      	blx	r3
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	1eb5      	subs	r5, r6, #2
 80058b2:	6123      	str	r3, [r4, #16]
 80058b4:	463a      	mov	r2, r7
 80058b6:	4640      	mov	r0, r8
 80058b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058bc:	4798      	blx	r3
 80058be:	462e      	mov	r6, r5
 80058c0:	6825      	ldr	r5, [r4, #0]
 80058c2:	f015 0510 	ands.w	r5, r5, #16
 80058c6:	d155      	bne.n	8005974 <_scanf_float+0x410>
 80058c8:	7035      	strb	r5, [r6, #0]
 80058ca:	6823      	ldr	r3, [r4, #0]
 80058cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80058d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d4:	d11b      	bne.n	800590e <_scanf_float+0x3aa>
 80058d6:	9b01      	ldr	r3, [sp, #4]
 80058d8:	454b      	cmp	r3, r9
 80058da:	eba3 0209 	sub.w	r2, r3, r9
 80058de:	d123      	bne.n	8005928 <_scanf_float+0x3c4>
 80058e0:	2200      	movs	r2, #0
 80058e2:	4659      	mov	r1, fp
 80058e4:	4640      	mov	r0, r8
 80058e6:	f000 fe7b 	bl	80065e0 <_strtod_r>
 80058ea:	6822      	ldr	r2, [r4, #0]
 80058ec:	9b03      	ldr	r3, [sp, #12]
 80058ee:	f012 0f02 	tst.w	r2, #2
 80058f2:	4606      	mov	r6, r0
 80058f4:	460f      	mov	r7, r1
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	d021      	beq.n	800593e <_scanf_float+0x3da>
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	9903      	ldr	r1, [sp, #12]
 80058fe:	600a      	str	r2, [r1, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	e9c3 6700 	strd	r6, r7, [r3]
 8005906:	68e3      	ldr	r3, [r4, #12]
 8005908:	3301      	adds	r3, #1
 800590a:	60e3      	str	r3, [r4, #12]
 800590c:	e66d      	b.n	80055ea <_scanf_float+0x86>
 800590e:	9b04      	ldr	r3, [sp, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d0e5      	beq.n	80058e0 <_scanf_float+0x37c>
 8005914:	9905      	ldr	r1, [sp, #20]
 8005916:	230a      	movs	r3, #10
 8005918:	462a      	mov	r2, r5
 800591a:	4640      	mov	r0, r8
 800591c:	3101      	adds	r1, #1
 800591e:	f000 fee1 	bl	80066e4 <_strtol_r>
 8005922:	9b04      	ldr	r3, [sp, #16]
 8005924:	9e05      	ldr	r6, [sp, #20]
 8005926:	1ac2      	subs	r2, r0, r3
 8005928:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800592c:	429e      	cmp	r6, r3
 800592e:	bf28      	it	cs
 8005930:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005934:	4630      	mov	r0, r6
 8005936:	4910      	ldr	r1, [pc, #64]	; (8005978 <_scanf_float+0x414>)
 8005938:	f000 f826 	bl	8005988 <siprintf>
 800593c:	e7d0      	b.n	80058e0 <_scanf_float+0x37c>
 800593e:	f012 0f04 	tst.w	r2, #4
 8005942:	f103 0204 	add.w	r2, r3, #4
 8005946:	d1d9      	bne.n	80058fc <_scanf_float+0x398>
 8005948:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800594c:	f8cc 2000 	str.w	r2, [ip]
 8005950:	f8d3 8000 	ldr.w	r8, [r3]
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	f7fb f858 	bl	8000a0c <__aeabi_dcmpun>
 800595c:	b128      	cbz	r0, 800596a <_scanf_float+0x406>
 800595e:	4807      	ldr	r0, [pc, #28]	; (800597c <_scanf_float+0x418>)
 8005960:	f000 f80e 	bl	8005980 <nanf>
 8005964:	f8c8 0000 	str.w	r0, [r8]
 8005968:	e7cd      	b.n	8005906 <_scanf_float+0x3a2>
 800596a:	4630      	mov	r0, r6
 800596c:	4639      	mov	r1, r7
 800596e:	f7fb f8ab 	bl	8000ac8 <__aeabi_d2f>
 8005972:	e7f7      	b.n	8005964 <_scanf_float+0x400>
 8005974:	2500      	movs	r5, #0
 8005976:	e638      	b.n	80055ea <_scanf_float+0x86>
 8005978:	08009820 	.word	0x08009820
 800597c:	08009c28 	.word	0x08009c28

08005980 <nanf>:
 8005980:	4800      	ldr	r0, [pc, #0]	; (8005984 <nanf+0x4>)
 8005982:	4770      	bx	lr
 8005984:	7fc00000 	.word	0x7fc00000

08005988 <siprintf>:
 8005988:	b40e      	push	{r1, r2, r3}
 800598a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800598e:	b500      	push	{lr}
 8005990:	b09c      	sub	sp, #112	; 0x70
 8005992:	ab1d      	add	r3, sp, #116	; 0x74
 8005994:	9002      	str	r0, [sp, #8]
 8005996:	9006      	str	r0, [sp, #24]
 8005998:	9107      	str	r1, [sp, #28]
 800599a:	9104      	str	r1, [sp, #16]
 800599c:	4808      	ldr	r0, [pc, #32]	; (80059c0 <siprintf+0x38>)
 800599e:	4909      	ldr	r1, [pc, #36]	; (80059c4 <siprintf+0x3c>)
 80059a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a4:	9105      	str	r1, [sp, #20]
 80059a6:	6800      	ldr	r0, [r0, #0]
 80059a8:	a902      	add	r1, sp, #8
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	f002 feba 	bl	8008724 <_svfiprintf_r>
 80059b0:	2200      	movs	r2, #0
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	701a      	strb	r2, [r3, #0]
 80059b6:	b01c      	add	sp, #112	; 0x70
 80059b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80059bc:	b003      	add	sp, #12
 80059be:	4770      	bx	lr
 80059c0:	2000000c 	.word	0x2000000c
 80059c4:	ffff0208 	.word	0xffff0208

080059c8 <sulp>:
 80059c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059cc:	460f      	mov	r7, r1
 80059ce:	4690      	mov	r8, r2
 80059d0:	f002 fc14 	bl	80081fc <__ulp>
 80059d4:	4604      	mov	r4, r0
 80059d6:	460d      	mov	r5, r1
 80059d8:	f1b8 0f00 	cmp.w	r8, #0
 80059dc:	d011      	beq.n	8005a02 <sulp+0x3a>
 80059de:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80059e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	dd0b      	ble.n	8005a02 <sulp+0x3a>
 80059ea:	2400      	movs	r4, #0
 80059ec:	051b      	lsls	r3, r3, #20
 80059ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80059f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059f6:	4622      	mov	r2, r4
 80059f8:	462b      	mov	r3, r5
 80059fa:	f7fa fd6d 	bl	80004d8 <__aeabi_dmul>
 80059fe:	4604      	mov	r4, r0
 8005a00:	460d      	mov	r5, r1
 8005a02:	4620      	mov	r0, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a0a:	0000      	movs	r0, r0
 8005a0c:	0000      	movs	r0, r0
	...

08005a10 <_strtod_l>:
 8005a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a14:	469b      	mov	fp, r3
 8005a16:	2300      	movs	r3, #0
 8005a18:	b09f      	sub	sp, #124	; 0x7c
 8005a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a1c:	4b9e      	ldr	r3, [pc, #632]	; (8005c98 <_strtod_l+0x288>)
 8005a1e:	4682      	mov	sl, r0
 8005a20:	681f      	ldr	r7, [r3, #0]
 8005a22:	460e      	mov	r6, r1
 8005a24:	4638      	mov	r0, r7
 8005a26:	9215      	str	r2, [sp, #84]	; 0x54
 8005a28:	f7fa fb92 	bl	8000150 <strlen>
 8005a2c:	f04f 0800 	mov.w	r8, #0
 8005a30:	4604      	mov	r4, r0
 8005a32:	f04f 0900 	mov.w	r9, #0
 8005a36:	9619      	str	r6, [sp, #100]	; 0x64
 8005a38:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	2a2b      	cmp	r2, #43	; 0x2b
 8005a3e:	d04c      	beq.n	8005ada <_strtod_l+0xca>
 8005a40:	d83a      	bhi.n	8005ab8 <_strtod_l+0xa8>
 8005a42:	2a0d      	cmp	r2, #13
 8005a44:	d833      	bhi.n	8005aae <_strtod_l+0x9e>
 8005a46:	2a08      	cmp	r2, #8
 8005a48:	d833      	bhi.n	8005ab2 <_strtod_l+0xa2>
 8005a4a:	2a00      	cmp	r2, #0
 8005a4c:	d03d      	beq.n	8005aca <_strtod_l+0xba>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	930a      	str	r3, [sp, #40]	; 0x28
 8005a52:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8005a54:	782b      	ldrb	r3, [r5, #0]
 8005a56:	2b30      	cmp	r3, #48	; 0x30
 8005a58:	f040 80aa 	bne.w	8005bb0 <_strtod_l+0x1a0>
 8005a5c:	786b      	ldrb	r3, [r5, #1]
 8005a5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a62:	2b58      	cmp	r3, #88	; 0x58
 8005a64:	d166      	bne.n	8005b34 <_strtod_l+0x124>
 8005a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a68:	4650      	mov	r0, sl
 8005a6a:	9301      	str	r3, [sp, #4]
 8005a6c:	ab1a      	add	r3, sp, #104	; 0x68
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	4a8a      	ldr	r2, [pc, #552]	; (8005c9c <_strtod_l+0x28c>)
 8005a72:	f8cd b008 	str.w	fp, [sp, #8]
 8005a76:	ab1b      	add	r3, sp, #108	; 0x6c
 8005a78:	a919      	add	r1, sp, #100	; 0x64
 8005a7a:	f001 fd17 	bl	80074ac <__gethex>
 8005a7e:	f010 0607 	ands.w	r6, r0, #7
 8005a82:	4604      	mov	r4, r0
 8005a84:	d005      	beq.n	8005a92 <_strtod_l+0x82>
 8005a86:	2e06      	cmp	r6, #6
 8005a88:	d129      	bne.n	8005ade <_strtod_l+0xce>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	3501      	adds	r5, #1
 8005a8e:	9519      	str	r5, [sp, #100]	; 0x64
 8005a90:	930a      	str	r3, [sp, #40]	; 0x28
 8005a92:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f040 858a 	bne.w	80065ae <_strtod_l+0xb9e>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	b1d3      	cbz	r3, 8005ad4 <_strtod_l+0xc4>
 8005a9e:	4642      	mov	r2, r8
 8005aa0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	b01f      	add	sp, #124	; 0x7c
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	2a20      	cmp	r2, #32
 8005ab0:	d1cd      	bne.n	8005a4e <_strtod_l+0x3e>
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	9319      	str	r3, [sp, #100]	; 0x64
 8005ab6:	e7bf      	b.n	8005a38 <_strtod_l+0x28>
 8005ab8:	2a2d      	cmp	r2, #45	; 0x2d
 8005aba:	d1c8      	bne.n	8005a4e <_strtod_l+0x3e>
 8005abc:	2201      	movs	r2, #1
 8005abe:	920a      	str	r2, [sp, #40]	; 0x28
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	9219      	str	r2, [sp, #100]	; 0x64
 8005ac4:	785b      	ldrb	r3, [r3, #1]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1c3      	bne.n	8005a52 <_strtod_l+0x42>
 8005aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005acc:	9619      	str	r6, [sp, #100]	; 0x64
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 856b 	bne.w	80065aa <_strtod_l+0xb9a>
 8005ad4:	4642      	mov	r2, r8
 8005ad6:	464b      	mov	r3, r9
 8005ad8:	e7e4      	b.n	8005aa4 <_strtod_l+0x94>
 8005ada:	2200      	movs	r2, #0
 8005adc:	e7ef      	b.n	8005abe <_strtod_l+0xae>
 8005ade:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005ae0:	b13a      	cbz	r2, 8005af2 <_strtod_l+0xe2>
 8005ae2:	2135      	movs	r1, #53	; 0x35
 8005ae4:	a81c      	add	r0, sp, #112	; 0x70
 8005ae6:	f002 fc8d 	bl	8008404 <__copybits>
 8005aea:	4650      	mov	r0, sl
 8005aec:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005aee:	f002 f855 	bl	8007b9c <_Bfree>
 8005af2:	3e01      	subs	r6, #1
 8005af4:	2e04      	cmp	r6, #4
 8005af6:	d806      	bhi.n	8005b06 <_strtod_l+0xf6>
 8005af8:	e8df f006 	tbb	[pc, r6]
 8005afc:	1714030a 	.word	0x1714030a
 8005b00:	0a          	.byte	0x0a
 8005b01:	00          	.byte	0x00
 8005b02:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8005b06:	0721      	lsls	r1, r4, #28
 8005b08:	d5c3      	bpl.n	8005a92 <_strtod_l+0x82>
 8005b0a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005b0e:	e7c0      	b.n	8005a92 <_strtod_l+0x82>
 8005b10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005b12:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8005b16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005b1a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005b1e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8005b22:	e7f0      	b.n	8005b06 <_strtod_l+0xf6>
 8005b24:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005ca0 <_strtod_l+0x290>
 8005b28:	e7ed      	b.n	8005b06 <_strtod_l+0xf6>
 8005b2a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8005b2e:	f04f 38ff 	mov.w	r8, #4294967295
 8005b32:	e7e8      	b.n	8005b06 <_strtod_l+0xf6>
 8005b34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	9219      	str	r2, [sp, #100]	; 0x64
 8005b3a:	785b      	ldrb	r3, [r3, #1]
 8005b3c:	2b30      	cmp	r3, #48	; 0x30
 8005b3e:	d0f9      	beq.n	8005b34 <_strtod_l+0x124>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0a6      	beq.n	8005a92 <_strtod_l+0x82>
 8005b44:	2301      	movs	r3, #1
 8005b46:	9307      	str	r3, [sp, #28]
 8005b48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b4a:	220a      	movs	r2, #10
 8005b4c:	9308      	str	r3, [sp, #32]
 8005b4e:	2300      	movs	r3, #0
 8005b50:	469b      	mov	fp, r3
 8005b52:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005b56:	9819      	ldr	r0, [sp, #100]	; 0x64
 8005b58:	7805      	ldrb	r5, [r0, #0]
 8005b5a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8005b5e:	b2d9      	uxtb	r1, r3
 8005b60:	2909      	cmp	r1, #9
 8005b62:	d927      	bls.n	8005bb4 <_strtod_l+0x1a4>
 8005b64:	4622      	mov	r2, r4
 8005b66:	4639      	mov	r1, r7
 8005b68:	f002 fef2 	bl	8008950 <strncmp>
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d033      	beq.n	8005bd8 <_strtod_l+0x1c8>
 8005b70:	2000      	movs	r0, #0
 8005b72:	462a      	mov	r2, r5
 8005b74:	465c      	mov	r4, fp
 8005b76:	4603      	mov	r3, r0
 8005b78:	9004      	str	r0, [sp, #16]
 8005b7a:	2a65      	cmp	r2, #101	; 0x65
 8005b7c:	d001      	beq.n	8005b82 <_strtod_l+0x172>
 8005b7e:	2a45      	cmp	r2, #69	; 0x45
 8005b80:	d114      	bne.n	8005bac <_strtod_l+0x19c>
 8005b82:	b91c      	cbnz	r4, 8005b8c <_strtod_l+0x17c>
 8005b84:	9a07      	ldr	r2, [sp, #28]
 8005b86:	4302      	orrs	r2, r0
 8005b88:	d09f      	beq.n	8005aca <_strtod_l+0xba>
 8005b8a:	2400      	movs	r4, #0
 8005b8c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005b8e:	1c72      	adds	r2, r6, #1
 8005b90:	9219      	str	r2, [sp, #100]	; 0x64
 8005b92:	7872      	ldrb	r2, [r6, #1]
 8005b94:	2a2b      	cmp	r2, #43	; 0x2b
 8005b96:	d079      	beq.n	8005c8c <_strtod_l+0x27c>
 8005b98:	2a2d      	cmp	r2, #45	; 0x2d
 8005b9a:	f000 8083 	beq.w	8005ca4 <_strtod_l+0x294>
 8005b9e:	2700      	movs	r7, #0
 8005ba0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005ba4:	2909      	cmp	r1, #9
 8005ba6:	f240 8083 	bls.w	8005cb0 <_strtod_l+0x2a0>
 8005baa:	9619      	str	r6, [sp, #100]	; 0x64
 8005bac:	2500      	movs	r5, #0
 8005bae:	e09f      	b.n	8005cf0 <_strtod_l+0x2e0>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	e7c8      	b.n	8005b46 <_strtod_l+0x136>
 8005bb4:	f1bb 0f08 	cmp.w	fp, #8
 8005bb8:	bfd5      	itete	le
 8005bba:	9906      	ldrle	r1, [sp, #24]
 8005bbc:	9905      	ldrgt	r1, [sp, #20]
 8005bbe:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bc2:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bc6:	f100 0001 	add.w	r0, r0, #1
 8005bca:	bfd4      	ite	le
 8005bcc:	9306      	strle	r3, [sp, #24]
 8005bce:	9305      	strgt	r3, [sp, #20]
 8005bd0:	f10b 0b01 	add.w	fp, fp, #1
 8005bd4:	9019      	str	r0, [sp, #100]	; 0x64
 8005bd6:	e7be      	b.n	8005b56 <_strtod_l+0x146>
 8005bd8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bda:	191a      	adds	r2, r3, r4
 8005bdc:	9219      	str	r2, [sp, #100]	; 0x64
 8005bde:	5d1a      	ldrb	r2, [r3, r4]
 8005be0:	f1bb 0f00 	cmp.w	fp, #0
 8005be4:	d036      	beq.n	8005c54 <_strtod_l+0x244>
 8005be6:	465c      	mov	r4, fp
 8005be8:	9004      	str	r0, [sp, #16]
 8005bea:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d912      	bls.n	8005c18 <_strtod_l+0x208>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e7c1      	b.n	8005b7a <_strtod_l+0x16a>
 8005bf6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	9219      	str	r2, [sp, #100]	; 0x64
 8005bfe:	785a      	ldrb	r2, [r3, #1]
 8005c00:	2a30      	cmp	r2, #48	; 0x30
 8005c02:	d0f8      	beq.n	8005bf6 <_strtod_l+0x1e6>
 8005c04:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005c08:	2b08      	cmp	r3, #8
 8005c0a:	f200 84d5 	bhi.w	80065b8 <_strtod_l+0xba8>
 8005c0e:	9004      	str	r0, [sp, #16]
 8005c10:	2000      	movs	r0, #0
 8005c12:	4604      	mov	r4, r0
 8005c14:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c16:	9308      	str	r3, [sp, #32]
 8005c18:	3a30      	subs	r2, #48	; 0x30
 8005c1a:	f100 0301 	add.w	r3, r0, #1
 8005c1e:	d013      	beq.n	8005c48 <_strtod_l+0x238>
 8005c20:	9904      	ldr	r1, [sp, #16]
 8005c22:	1905      	adds	r5, r0, r4
 8005c24:	4419      	add	r1, r3
 8005c26:	9104      	str	r1, [sp, #16]
 8005c28:	4623      	mov	r3, r4
 8005c2a:	210a      	movs	r1, #10
 8005c2c:	42ab      	cmp	r3, r5
 8005c2e:	d113      	bne.n	8005c58 <_strtod_l+0x248>
 8005c30:	1823      	adds	r3, r4, r0
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	f104 0401 	add.w	r4, r4, #1
 8005c38:	4404      	add	r4, r0
 8005c3a:	dc1b      	bgt.n	8005c74 <_strtod_l+0x264>
 8005c3c:	230a      	movs	r3, #10
 8005c3e:	9906      	ldr	r1, [sp, #24]
 8005c40:	fb03 2301 	mla	r3, r3, r1, r2
 8005c44:	9306      	str	r3, [sp, #24]
 8005c46:	2300      	movs	r3, #0
 8005c48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	1c51      	adds	r1, r2, #1
 8005c4e:	9119      	str	r1, [sp, #100]	; 0x64
 8005c50:	7852      	ldrb	r2, [r2, #1]
 8005c52:	e7ca      	b.n	8005bea <_strtod_l+0x1da>
 8005c54:	4658      	mov	r0, fp
 8005c56:	e7d3      	b.n	8005c00 <_strtod_l+0x1f0>
 8005c58:	2b08      	cmp	r3, #8
 8005c5a:	dc04      	bgt.n	8005c66 <_strtod_l+0x256>
 8005c5c:	9f06      	ldr	r7, [sp, #24]
 8005c5e:	434f      	muls	r7, r1
 8005c60:	9706      	str	r7, [sp, #24]
 8005c62:	3301      	adds	r3, #1
 8005c64:	e7e2      	b.n	8005c2c <_strtod_l+0x21c>
 8005c66:	1c5f      	adds	r7, r3, #1
 8005c68:	2f10      	cmp	r7, #16
 8005c6a:	bfde      	ittt	le
 8005c6c:	9f05      	ldrle	r7, [sp, #20]
 8005c6e:	434f      	mulle	r7, r1
 8005c70:	9705      	strle	r7, [sp, #20]
 8005c72:	e7f6      	b.n	8005c62 <_strtod_l+0x252>
 8005c74:	2c10      	cmp	r4, #16
 8005c76:	bfdf      	itttt	le
 8005c78:	230a      	movle	r3, #10
 8005c7a:	9905      	ldrle	r1, [sp, #20]
 8005c7c:	fb03 2301 	mlale	r3, r3, r1, r2
 8005c80:	9305      	strle	r3, [sp, #20]
 8005c82:	e7e0      	b.n	8005c46 <_strtod_l+0x236>
 8005c84:	2300      	movs	r3, #0
 8005c86:	9304      	str	r3, [sp, #16]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e77b      	b.n	8005b84 <_strtod_l+0x174>
 8005c8c:	2700      	movs	r7, #0
 8005c8e:	1cb2      	adds	r2, r6, #2
 8005c90:	9219      	str	r2, [sp, #100]	; 0x64
 8005c92:	78b2      	ldrb	r2, [r6, #2]
 8005c94:	e784      	b.n	8005ba0 <_strtod_l+0x190>
 8005c96:	bf00      	nop
 8005c98:	08009a70 	.word	0x08009a70
 8005c9c:	08009828 	.word	0x08009828
 8005ca0:	7ff00000 	.word	0x7ff00000
 8005ca4:	2701      	movs	r7, #1
 8005ca6:	e7f2      	b.n	8005c8e <_strtod_l+0x27e>
 8005ca8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005caa:	1c51      	adds	r1, r2, #1
 8005cac:	9119      	str	r1, [sp, #100]	; 0x64
 8005cae:	7852      	ldrb	r2, [r2, #1]
 8005cb0:	2a30      	cmp	r2, #48	; 0x30
 8005cb2:	d0f9      	beq.n	8005ca8 <_strtod_l+0x298>
 8005cb4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005cb8:	2908      	cmp	r1, #8
 8005cba:	f63f af77 	bhi.w	8005bac <_strtod_l+0x19c>
 8005cbe:	f04f 0e0a 	mov.w	lr, #10
 8005cc2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005cc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cc8:	9209      	str	r2, [sp, #36]	; 0x24
 8005cca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ccc:	1c51      	adds	r1, r2, #1
 8005cce:	9119      	str	r1, [sp, #100]	; 0x64
 8005cd0:	7852      	ldrb	r2, [r2, #1]
 8005cd2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8005cd6:	2d09      	cmp	r5, #9
 8005cd8:	d935      	bls.n	8005d46 <_strtod_l+0x336>
 8005cda:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005cdc:	1b49      	subs	r1, r1, r5
 8005cde:	2908      	cmp	r1, #8
 8005ce0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8005ce4:	dc02      	bgt.n	8005cec <_strtod_l+0x2dc>
 8005ce6:	4565      	cmp	r5, ip
 8005ce8:	bfa8      	it	ge
 8005cea:	4665      	movge	r5, ip
 8005cec:	b107      	cbz	r7, 8005cf0 <_strtod_l+0x2e0>
 8005cee:	426d      	negs	r5, r5
 8005cf0:	2c00      	cmp	r4, #0
 8005cf2:	d14c      	bne.n	8005d8e <_strtod_l+0x37e>
 8005cf4:	9907      	ldr	r1, [sp, #28]
 8005cf6:	4301      	orrs	r1, r0
 8005cf8:	f47f aecb 	bne.w	8005a92 <_strtod_l+0x82>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f47f aee4 	bne.w	8005aca <_strtod_l+0xba>
 8005d02:	2a69      	cmp	r2, #105	; 0x69
 8005d04:	d026      	beq.n	8005d54 <_strtod_l+0x344>
 8005d06:	dc23      	bgt.n	8005d50 <_strtod_l+0x340>
 8005d08:	2a49      	cmp	r2, #73	; 0x49
 8005d0a:	d023      	beq.n	8005d54 <_strtod_l+0x344>
 8005d0c:	2a4e      	cmp	r2, #78	; 0x4e
 8005d0e:	f47f aedc 	bne.w	8005aca <_strtod_l+0xba>
 8005d12:	499d      	ldr	r1, [pc, #628]	; (8005f88 <_strtod_l+0x578>)
 8005d14:	a819      	add	r0, sp, #100	; 0x64
 8005d16:	f001 fe17 	bl	8007948 <__match>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f43f aed5 	beq.w	8005aca <_strtod_l+0xba>
 8005d20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	2b28      	cmp	r3, #40	; 0x28
 8005d26:	d12c      	bne.n	8005d82 <_strtod_l+0x372>
 8005d28:	4998      	ldr	r1, [pc, #608]	; (8005f8c <_strtod_l+0x57c>)
 8005d2a:	aa1c      	add	r2, sp, #112	; 0x70
 8005d2c:	a819      	add	r0, sp, #100	; 0x64
 8005d2e:	f001 fe1f 	bl	8007970 <__hexnan>
 8005d32:	2805      	cmp	r0, #5
 8005d34:	d125      	bne.n	8005d82 <_strtod_l+0x372>
 8005d36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005d38:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8005d3c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005d40:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8005d44:	e6a5      	b.n	8005a92 <_strtod_l+0x82>
 8005d46:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8005d4a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005d4e:	e7bc      	b.n	8005cca <_strtod_l+0x2ba>
 8005d50:	2a6e      	cmp	r2, #110	; 0x6e
 8005d52:	e7dc      	b.n	8005d0e <_strtod_l+0x2fe>
 8005d54:	498e      	ldr	r1, [pc, #568]	; (8005f90 <_strtod_l+0x580>)
 8005d56:	a819      	add	r0, sp, #100	; 0x64
 8005d58:	f001 fdf6 	bl	8007948 <__match>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	f43f aeb4 	beq.w	8005aca <_strtod_l+0xba>
 8005d62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d64:	498b      	ldr	r1, [pc, #556]	; (8005f94 <_strtod_l+0x584>)
 8005d66:	3b01      	subs	r3, #1
 8005d68:	a819      	add	r0, sp, #100	; 0x64
 8005d6a:	9319      	str	r3, [sp, #100]	; 0x64
 8005d6c:	f001 fdec 	bl	8007948 <__match>
 8005d70:	b910      	cbnz	r0, 8005d78 <_strtod_l+0x368>
 8005d72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005d74:	3301      	adds	r3, #1
 8005d76:	9319      	str	r3, [sp, #100]	; 0x64
 8005d78:	f04f 0800 	mov.w	r8, #0
 8005d7c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005f98 <_strtod_l+0x588>
 8005d80:	e687      	b.n	8005a92 <_strtod_l+0x82>
 8005d82:	4886      	ldr	r0, [pc, #536]	; (8005f9c <_strtod_l+0x58c>)
 8005d84:	f002 fdce 	bl	8008924 <nan>
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4689      	mov	r9, r1
 8005d8c:	e681      	b.n	8005a92 <_strtod_l+0x82>
 8005d8e:	9b04      	ldr	r3, [sp, #16]
 8005d90:	f1bb 0f00 	cmp.w	fp, #0
 8005d94:	bf08      	it	eq
 8005d96:	46a3      	moveq	fp, r4
 8005d98:	1aeb      	subs	r3, r5, r3
 8005d9a:	2c10      	cmp	r4, #16
 8005d9c:	9806      	ldr	r0, [sp, #24]
 8005d9e:	4626      	mov	r6, r4
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	bfa8      	it	ge
 8005da4:	2610      	movge	r6, #16
 8005da6:	f7fa fb1d 	bl	80003e4 <__aeabi_ui2d>
 8005daa:	2c09      	cmp	r4, #9
 8005dac:	4680      	mov	r8, r0
 8005dae:	4689      	mov	r9, r1
 8005db0:	dd13      	ble.n	8005dda <_strtod_l+0x3ca>
 8005db2:	4b7b      	ldr	r3, [pc, #492]	; (8005fa0 <_strtod_l+0x590>)
 8005db4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005db8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005dbc:	f7fa fb8c 	bl	80004d8 <__aeabi_dmul>
 8005dc0:	4680      	mov	r8, r0
 8005dc2:	9805      	ldr	r0, [sp, #20]
 8005dc4:	4689      	mov	r9, r1
 8005dc6:	f7fa fb0d 	bl	80003e4 <__aeabi_ui2d>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4640      	mov	r0, r8
 8005dd0:	4649      	mov	r1, r9
 8005dd2:	f7fa f9cb 	bl	800016c <__adddf3>
 8005dd6:	4680      	mov	r8, r0
 8005dd8:	4689      	mov	r9, r1
 8005dda:	2c0f      	cmp	r4, #15
 8005ddc:	dc36      	bgt.n	8005e4c <_strtod_l+0x43c>
 8005dde:	9b07      	ldr	r3, [sp, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f43f ae56 	beq.w	8005a92 <_strtod_l+0x82>
 8005de6:	dd22      	ble.n	8005e2e <_strtod_l+0x41e>
 8005de8:	2b16      	cmp	r3, #22
 8005dea:	dc09      	bgt.n	8005e00 <_strtod_l+0x3f0>
 8005dec:	496c      	ldr	r1, [pc, #432]	; (8005fa0 <_strtod_l+0x590>)
 8005dee:	4642      	mov	r2, r8
 8005df0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005df4:	464b      	mov	r3, r9
 8005df6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dfa:	f7fa fb6d 	bl	80004d8 <__aeabi_dmul>
 8005dfe:	e7c3      	b.n	8005d88 <_strtod_l+0x378>
 8005e00:	9a07      	ldr	r2, [sp, #28]
 8005e02:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005e06:	4293      	cmp	r3, r2
 8005e08:	db20      	blt.n	8005e4c <_strtod_l+0x43c>
 8005e0a:	4d65      	ldr	r5, [pc, #404]	; (8005fa0 <_strtod_l+0x590>)
 8005e0c:	f1c4 040f 	rsb	r4, r4, #15
 8005e10:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005e14:	4642      	mov	r2, r8
 8005e16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	f7fa fb5c 	bl	80004d8 <__aeabi_dmul>
 8005e20:	9b07      	ldr	r3, [sp, #28]
 8005e22:	1b1c      	subs	r4, r3, r4
 8005e24:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e2c:	e7e5      	b.n	8005dfa <_strtod_l+0x3ea>
 8005e2e:	9b07      	ldr	r3, [sp, #28]
 8005e30:	3316      	adds	r3, #22
 8005e32:	db0b      	blt.n	8005e4c <_strtod_l+0x43c>
 8005e34:	9b04      	ldr	r3, [sp, #16]
 8005e36:	4640      	mov	r0, r8
 8005e38:	1b5d      	subs	r5, r3, r5
 8005e3a:	4b59      	ldr	r3, [pc, #356]	; (8005fa0 <_strtod_l+0x590>)
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8005e42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e46:	f7fa fc71 	bl	800072c <__aeabi_ddiv>
 8005e4a:	e79d      	b.n	8005d88 <_strtod_l+0x378>
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	1ba6      	subs	r6, r4, r6
 8005e50:	441e      	add	r6, r3
 8005e52:	2e00      	cmp	r6, #0
 8005e54:	dd74      	ble.n	8005f40 <_strtod_l+0x530>
 8005e56:	f016 030f 	ands.w	r3, r6, #15
 8005e5a:	d00a      	beq.n	8005e72 <_strtod_l+0x462>
 8005e5c:	4950      	ldr	r1, [pc, #320]	; (8005fa0 <_strtod_l+0x590>)
 8005e5e:	4642      	mov	r2, r8
 8005e60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e68:	464b      	mov	r3, r9
 8005e6a:	f7fa fb35 	bl	80004d8 <__aeabi_dmul>
 8005e6e:	4680      	mov	r8, r0
 8005e70:	4689      	mov	r9, r1
 8005e72:	f036 060f 	bics.w	r6, r6, #15
 8005e76:	d052      	beq.n	8005f1e <_strtod_l+0x50e>
 8005e78:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005e7c:	dd27      	ble.n	8005ece <_strtod_l+0x4be>
 8005e7e:	f04f 0b00 	mov.w	fp, #0
 8005e82:	f8cd b010 	str.w	fp, [sp, #16]
 8005e86:	f8cd b020 	str.w	fp, [sp, #32]
 8005e8a:	f8cd b018 	str.w	fp, [sp, #24]
 8005e8e:	2322      	movs	r3, #34	; 0x22
 8005e90:	f04f 0800 	mov.w	r8, #0
 8005e94:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005f98 <_strtod_l+0x588>
 8005e98:	f8ca 3000 	str.w	r3, [sl]
 8005e9c:	9b08      	ldr	r3, [sp, #32]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	f43f adf7 	beq.w	8005a92 <_strtod_l+0x82>
 8005ea4:	4650      	mov	r0, sl
 8005ea6:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005ea8:	f001 fe78 	bl	8007b9c <_Bfree>
 8005eac:	4650      	mov	r0, sl
 8005eae:	9906      	ldr	r1, [sp, #24]
 8005eb0:	f001 fe74 	bl	8007b9c <_Bfree>
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	9904      	ldr	r1, [sp, #16]
 8005eb8:	f001 fe70 	bl	8007b9c <_Bfree>
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	9908      	ldr	r1, [sp, #32]
 8005ec0:	f001 fe6c 	bl	8007b9c <_Bfree>
 8005ec4:	4659      	mov	r1, fp
 8005ec6:	4650      	mov	r0, sl
 8005ec8:	f001 fe68 	bl	8007b9c <_Bfree>
 8005ecc:	e5e1      	b.n	8005a92 <_strtod_l+0x82>
 8005ece:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <_strtod_l+0x594>)
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	9305      	str	r3, [sp, #20]
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	461f      	mov	r7, r3
 8005eda:	1136      	asrs	r6, r6, #4
 8005edc:	2e01      	cmp	r6, #1
 8005ede:	dc21      	bgt.n	8005f24 <_strtod_l+0x514>
 8005ee0:	b10b      	cbz	r3, 8005ee6 <_strtod_l+0x4d6>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <_strtod_l+0x594>)
 8005ee8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005eec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ef6:	464b      	mov	r3, r9
 8005ef8:	f7fa faee 	bl	80004d8 <__aeabi_dmul>
 8005efc:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <_strtod_l+0x588>)
 8005efe:	460a      	mov	r2, r1
 8005f00:	400b      	ands	r3, r1
 8005f02:	4929      	ldr	r1, [pc, #164]	; (8005fa8 <_strtod_l+0x598>)
 8005f04:	4680      	mov	r8, r0
 8005f06:	428b      	cmp	r3, r1
 8005f08:	d8b9      	bhi.n	8005e7e <_strtod_l+0x46e>
 8005f0a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005f0e:	428b      	cmp	r3, r1
 8005f10:	bf86      	itte	hi
 8005f12:	f04f 38ff 	movhi.w	r8, #4294967295
 8005f16:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005fac <_strtod_l+0x59c>
 8005f1a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9305      	str	r3, [sp, #20]
 8005f22:	e07f      	b.n	8006024 <_strtod_l+0x614>
 8005f24:	07f2      	lsls	r2, r6, #31
 8005f26:	d505      	bpl.n	8005f34 <_strtod_l+0x524>
 8005f28:	9b05      	ldr	r3, [sp, #20]
 8005f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2e:	f7fa fad3 	bl	80004d8 <__aeabi_dmul>
 8005f32:	2301      	movs	r3, #1
 8005f34:	9a05      	ldr	r2, [sp, #20]
 8005f36:	3701      	adds	r7, #1
 8005f38:	3208      	adds	r2, #8
 8005f3a:	1076      	asrs	r6, r6, #1
 8005f3c:	9205      	str	r2, [sp, #20]
 8005f3e:	e7cd      	b.n	8005edc <_strtod_l+0x4cc>
 8005f40:	d0ed      	beq.n	8005f1e <_strtod_l+0x50e>
 8005f42:	4276      	negs	r6, r6
 8005f44:	f016 020f 	ands.w	r2, r6, #15
 8005f48:	d00a      	beq.n	8005f60 <_strtod_l+0x550>
 8005f4a:	4b15      	ldr	r3, [pc, #84]	; (8005fa0 <_strtod_l+0x590>)
 8005f4c:	4640      	mov	r0, r8
 8005f4e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f52:	4649      	mov	r1, r9
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f7fa fbe8 	bl	800072c <__aeabi_ddiv>
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	4689      	mov	r9, r1
 8005f60:	1136      	asrs	r6, r6, #4
 8005f62:	d0dc      	beq.n	8005f1e <_strtod_l+0x50e>
 8005f64:	2e1f      	cmp	r6, #31
 8005f66:	dd23      	ble.n	8005fb0 <_strtod_l+0x5a0>
 8005f68:	f04f 0b00 	mov.w	fp, #0
 8005f6c:	f8cd b010 	str.w	fp, [sp, #16]
 8005f70:	f8cd b020 	str.w	fp, [sp, #32]
 8005f74:	f8cd b018 	str.w	fp, [sp, #24]
 8005f78:	2322      	movs	r3, #34	; 0x22
 8005f7a:	f04f 0800 	mov.w	r8, #0
 8005f7e:	f04f 0900 	mov.w	r9, #0
 8005f82:	f8ca 3000 	str.w	r3, [sl]
 8005f86:	e789      	b.n	8005e9c <_strtod_l+0x48c>
 8005f88:	080097f9 	.word	0x080097f9
 8005f8c:	0800983c 	.word	0x0800983c
 8005f90:	080097f1 	.word	0x080097f1
 8005f94:	0800997c 	.word	0x0800997c
 8005f98:	7ff00000 	.word	0x7ff00000
 8005f9c:	08009c28 	.word	0x08009c28
 8005fa0:	08009b08 	.word	0x08009b08
 8005fa4:	08009ae0 	.word	0x08009ae0
 8005fa8:	7ca00000 	.word	0x7ca00000
 8005fac:	7fefffff 	.word	0x7fefffff
 8005fb0:	f016 0310 	ands.w	r3, r6, #16
 8005fb4:	bf18      	it	ne
 8005fb6:	236a      	movne	r3, #106	; 0x6a
 8005fb8:	4640      	mov	r0, r8
 8005fba:	9305      	str	r3, [sp, #20]
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	4fb0      	ldr	r7, [pc, #704]	; (8006284 <_strtod_l+0x874>)
 8005fc2:	07f2      	lsls	r2, r6, #31
 8005fc4:	d504      	bpl.n	8005fd0 <_strtod_l+0x5c0>
 8005fc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fca:	f7fa fa85 	bl	80004d8 <__aeabi_dmul>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	1076      	asrs	r6, r6, #1
 8005fd2:	f107 0708 	add.w	r7, r7, #8
 8005fd6:	d1f4      	bne.n	8005fc2 <_strtod_l+0x5b2>
 8005fd8:	b10b      	cbz	r3, 8005fde <_strtod_l+0x5ce>
 8005fda:	4680      	mov	r8, r0
 8005fdc:	4689      	mov	r9, r1
 8005fde:	9b05      	ldr	r3, [sp, #20]
 8005fe0:	b1c3      	cbz	r3, 8006014 <_strtod_l+0x604>
 8005fe2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8005fe6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	4649      	mov	r1, r9
 8005fee:	dd11      	ble.n	8006014 <_strtod_l+0x604>
 8005ff0:	2b1f      	cmp	r3, #31
 8005ff2:	f340 8127 	ble.w	8006244 <_strtod_l+0x834>
 8005ff6:	2b34      	cmp	r3, #52	; 0x34
 8005ff8:	bfd8      	it	le
 8005ffa:	f04f 33ff 	movle.w	r3, #4294967295
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	bfcf      	iteee	gt
 8006004:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006008:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800600c:	fa03 f202 	lslle.w	r2, r3, r2
 8006010:	ea02 0901 	andle.w	r9, r2, r1
 8006014:	2200      	movs	r2, #0
 8006016:	2300      	movs	r3, #0
 8006018:	4640      	mov	r0, r8
 800601a:	4649      	mov	r1, r9
 800601c:	f7fa fcc4 	bl	80009a8 <__aeabi_dcmpeq>
 8006020:	2800      	cmp	r0, #0
 8006022:	d1a1      	bne.n	8005f68 <_strtod_l+0x558>
 8006024:	9b06      	ldr	r3, [sp, #24]
 8006026:	465a      	mov	r2, fp
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	4650      	mov	r0, sl
 800602c:	4623      	mov	r3, r4
 800602e:	9908      	ldr	r1, [sp, #32]
 8006030:	f001 fe1c 	bl	8007c6c <__s2b>
 8006034:	9008      	str	r0, [sp, #32]
 8006036:	2800      	cmp	r0, #0
 8006038:	f43f af21 	beq.w	8005e7e <_strtod_l+0x46e>
 800603c:	9b04      	ldr	r3, [sp, #16]
 800603e:	f04f 0b00 	mov.w	fp, #0
 8006042:	1b5d      	subs	r5, r3, r5
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	f8cd b010 	str.w	fp, [sp, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	bfb4      	ite	lt
 800604e:	462b      	movlt	r3, r5
 8006050:	2300      	movge	r3, #0
 8006052:	930e      	str	r3, [sp, #56]	; 0x38
 8006054:	9b07      	ldr	r3, [sp, #28]
 8006056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800605a:	9314      	str	r3, [sp, #80]	; 0x50
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	4650      	mov	r0, sl
 8006060:	6859      	ldr	r1, [r3, #4]
 8006062:	f001 fd5b 	bl	8007b1c <_Balloc>
 8006066:	9006      	str	r0, [sp, #24]
 8006068:	2800      	cmp	r0, #0
 800606a:	f43f af10 	beq.w	8005e8e <_strtod_l+0x47e>
 800606e:	9b08      	ldr	r3, [sp, #32]
 8006070:	300c      	adds	r0, #12
 8006072:	691a      	ldr	r2, [r3, #16]
 8006074:	f103 010c 	add.w	r1, r3, #12
 8006078:	3202      	adds	r2, #2
 800607a:	0092      	lsls	r2, r2, #2
 800607c:	f001 fd40 	bl	8007b00 <memcpy>
 8006080:	ab1c      	add	r3, sp, #112	; 0x70
 8006082:	9301      	str	r3, [sp, #4]
 8006084:	ab1b      	add	r3, sp, #108	; 0x6c
 8006086:	9300      	str	r3, [sp, #0]
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	4650      	mov	r0, sl
 800608e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8006092:	f002 f92d 	bl	80082f0 <__d2b>
 8006096:	901a      	str	r0, [sp, #104]	; 0x68
 8006098:	2800      	cmp	r0, #0
 800609a:	f43f aef8 	beq.w	8005e8e <_strtod_l+0x47e>
 800609e:	2101      	movs	r1, #1
 80060a0:	4650      	mov	r0, sl
 80060a2:	f001 fe7b 	bl	8007d9c <__i2b>
 80060a6:	4603      	mov	r3, r0
 80060a8:	9004      	str	r0, [sp, #16]
 80060aa:	2800      	cmp	r0, #0
 80060ac:	f43f aeef 	beq.w	8005e8e <_strtod_l+0x47e>
 80060b0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060b2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	bfab      	itete	ge
 80060b8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80060ba:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80060bc:	18ee      	addge	r6, r5, r3
 80060be:	1b5c      	sublt	r4, r3, r5
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	bfa8      	it	ge
 80060c4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80060c6:	eba5 0503 	sub.w	r5, r5, r3
 80060ca:	4415      	add	r5, r2
 80060cc:	4b6e      	ldr	r3, [pc, #440]	; (8006288 <_strtod_l+0x878>)
 80060ce:	f105 35ff 	add.w	r5, r5, #4294967295
 80060d2:	bfb8      	it	lt
 80060d4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80060d6:	429d      	cmp	r5, r3
 80060d8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80060dc:	f280 80c4 	bge.w	8006268 <_strtod_l+0x858>
 80060e0:	1b5b      	subs	r3, r3, r5
 80060e2:	2b1f      	cmp	r3, #31
 80060e4:	f04f 0701 	mov.w	r7, #1
 80060e8:	eba2 0203 	sub.w	r2, r2, r3
 80060ec:	f300 80b1 	bgt.w	8006252 <_strtod_l+0x842>
 80060f0:	2500      	movs	r5, #0
 80060f2:	fa07 f303 	lsl.w	r3, r7, r3
 80060f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060f8:	18b7      	adds	r7, r6, r2
 80060fa:	9b05      	ldr	r3, [sp, #20]
 80060fc:	42be      	cmp	r6, r7
 80060fe:	4414      	add	r4, r2
 8006100:	441c      	add	r4, r3
 8006102:	4633      	mov	r3, r6
 8006104:	bfa8      	it	ge
 8006106:	463b      	movge	r3, r7
 8006108:	42a3      	cmp	r3, r4
 800610a:	bfa8      	it	ge
 800610c:	4623      	movge	r3, r4
 800610e:	2b00      	cmp	r3, #0
 8006110:	bfc2      	ittt	gt
 8006112:	1aff      	subgt	r7, r7, r3
 8006114:	1ae4      	subgt	r4, r4, r3
 8006116:	1af6      	subgt	r6, r6, r3
 8006118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800611a:	2b00      	cmp	r3, #0
 800611c:	dd17      	ble.n	800614e <_strtod_l+0x73e>
 800611e:	461a      	mov	r2, r3
 8006120:	4650      	mov	r0, sl
 8006122:	9904      	ldr	r1, [sp, #16]
 8006124:	f001 fef8 	bl	8007f18 <__pow5mult>
 8006128:	9004      	str	r0, [sp, #16]
 800612a:	2800      	cmp	r0, #0
 800612c:	f43f aeaf 	beq.w	8005e8e <_strtod_l+0x47e>
 8006130:	4601      	mov	r1, r0
 8006132:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006134:	4650      	mov	r0, sl
 8006136:	f001 fe47 	bl	8007dc8 <__multiply>
 800613a:	9009      	str	r0, [sp, #36]	; 0x24
 800613c:	2800      	cmp	r0, #0
 800613e:	f43f aea6 	beq.w	8005e8e <_strtod_l+0x47e>
 8006142:	4650      	mov	r0, sl
 8006144:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006146:	f001 fd29 	bl	8007b9c <_Bfree>
 800614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614c:	931a      	str	r3, [sp, #104]	; 0x68
 800614e:	2f00      	cmp	r7, #0
 8006150:	f300 808e 	bgt.w	8006270 <_strtod_l+0x860>
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dd08      	ble.n	800616c <_strtod_l+0x75c>
 800615a:	4650      	mov	r0, sl
 800615c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800615e:	9906      	ldr	r1, [sp, #24]
 8006160:	f001 feda 	bl	8007f18 <__pow5mult>
 8006164:	9006      	str	r0, [sp, #24]
 8006166:	2800      	cmp	r0, #0
 8006168:	f43f ae91 	beq.w	8005e8e <_strtod_l+0x47e>
 800616c:	2c00      	cmp	r4, #0
 800616e:	dd08      	ble.n	8006182 <_strtod_l+0x772>
 8006170:	4622      	mov	r2, r4
 8006172:	4650      	mov	r0, sl
 8006174:	9906      	ldr	r1, [sp, #24]
 8006176:	f001 ff29 	bl	8007fcc <__lshift>
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	2800      	cmp	r0, #0
 800617e:	f43f ae86 	beq.w	8005e8e <_strtod_l+0x47e>
 8006182:	2e00      	cmp	r6, #0
 8006184:	dd08      	ble.n	8006198 <_strtod_l+0x788>
 8006186:	4632      	mov	r2, r6
 8006188:	4650      	mov	r0, sl
 800618a:	9904      	ldr	r1, [sp, #16]
 800618c:	f001 ff1e 	bl	8007fcc <__lshift>
 8006190:	9004      	str	r0, [sp, #16]
 8006192:	2800      	cmp	r0, #0
 8006194:	f43f ae7b 	beq.w	8005e8e <_strtod_l+0x47e>
 8006198:	4650      	mov	r0, sl
 800619a:	9a06      	ldr	r2, [sp, #24]
 800619c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800619e:	f001 ffa1 	bl	80080e4 <__mdiff>
 80061a2:	4683      	mov	fp, r0
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f43f ae72 	beq.w	8005e8e <_strtod_l+0x47e>
 80061aa:	2400      	movs	r4, #0
 80061ac:	68c3      	ldr	r3, [r0, #12]
 80061ae:	9904      	ldr	r1, [sp, #16]
 80061b0:	60c4      	str	r4, [r0, #12]
 80061b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b4:	f001 ff7a 	bl	80080ac <__mcmp>
 80061b8:	42a0      	cmp	r0, r4
 80061ba:	da6b      	bge.n	8006294 <_strtod_l+0x884>
 80061bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061be:	ea53 0308 	orrs.w	r3, r3, r8
 80061c2:	f040 8091 	bne.w	80062e8 <_strtod_l+0x8d8>
 80061c6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f040 808c 	bne.w	80062e8 <_strtod_l+0x8d8>
 80061d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061d4:	0d1b      	lsrs	r3, r3, #20
 80061d6:	051b      	lsls	r3, r3, #20
 80061d8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80061dc:	f240 8084 	bls.w	80062e8 <_strtod_l+0x8d8>
 80061e0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80061e4:	b91b      	cbnz	r3, 80061ee <_strtod_l+0x7de>
 80061e6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	dd7c      	ble.n	80062e8 <_strtod_l+0x8d8>
 80061ee:	4659      	mov	r1, fp
 80061f0:	2201      	movs	r2, #1
 80061f2:	4650      	mov	r0, sl
 80061f4:	f001 feea 	bl	8007fcc <__lshift>
 80061f8:	9904      	ldr	r1, [sp, #16]
 80061fa:	4683      	mov	fp, r0
 80061fc:	f001 ff56 	bl	80080ac <__mcmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	dd71      	ble.n	80062e8 <_strtod_l+0x8d8>
 8006204:	9905      	ldr	r1, [sp, #20]
 8006206:	464b      	mov	r3, r9
 8006208:	4a20      	ldr	r2, [pc, #128]	; (800628c <_strtod_l+0x87c>)
 800620a:	2900      	cmp	r1, #0
 800620c:	f000 808c 	beq.w	8006328 <_strtod_l+0x918>
 8006210:	ea02 0109 	and.w	r1, r2, r9
 8006214:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006218:	f300 8086 	bgt.w	8006328 <_strtod_l+0x918>
 800621c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006220:	f77f aeaa 	ble.w	8005f78 <_strtod_l+0x568>
 8006224:	4640      	mov	r0, r8
 8006226:	4649      	mov	r1, r9
 8006228:	4b19      	ldr	r3, [pc, #100]	; (8006290 <_strtod_l+0x880>)
 800622a:	2200      	movs	r2, #0
 800622c:	f7fa f954 	bl	80004d8 <__aeabi_dmul>
 8006230:	460b      	mov	r3, r1
 8006232:	4303      	orrs	r3, r0
 8006234:	bf08      	it	eq
 8006236:	2322      	moveq	r3, #34	; 0x22
 8006238:	4680      	mov	r8, r0
 800623a:	4689      	mov	r9, r1
 800623c:	bf08      	it	eq
 800623e:	f8ca 3000 	streq.w	r3, [sl]
 8006242:	e62f      	b.n	8005ea4 <_strtod_l+0x494>
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	ea03 0808 	and.w	r8, r3, r8
 8006250:	e6e0      	b.n	8006014 <_strtod_l+0x604>
 8006252:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8006256:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800625a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800625e:	35e2      	adds	r5, #226	; 0xe2
 8006260:	fa07 f505 	lsl.w	r5, r7, r5
 8006264:	970f      	str	r7, [sp, #60]	; 0x3c
 8006266:	e747      	b.n	80060f8 <_strtod_l+0x6e8>
 8006268:	2301      	movs	r3, #1
 800626a:	2500      	movs	r5, #0
 800626c:	930f      	str	r3, [sp, #60]	; 0x3c
 800626e:	e743      	b.n	80060f8 <_strtod_l+0x6e8>
 8006270:	463a      	mov	r2, r7
 8006272:	4650      	mov	r0, sl
 8006274:	991a      	ldr	r1, [sp, #104]	; 0x68
 8006276:	f001 fea9 	bl	8007fcc <__lshift>
 800627a:	901a      	str	r0, [sp, #104]	; 0x68
 800627c:	2800      	cmp	r0, #0
 800627e:	f47f af69 	bne.w	8006154 <_strtod_l+0x744>
 8006282:	e604      	b.n	8005e8e <_strtod_l+0x47e>
 8006284:	08009850 	.word	0x08009850
 8006288:	fffffc02 	.word	0xfffffc02
 800628c:	7ff00000 	.word	0x7ff00000
 8006290:	39500000 	.word	0x39500000
 8006294:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8006298:	d165      	bne.n	8006366 <_strtod_l+0x956>
 800629a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800629c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062a0:	b35a      	cbz	r2, 80062fa <_strtod_l+0x8ea>
 80062a2:	4a99      	ldr	r2, [pc, #612]	; (8006508 <_strtod_l+0xaf8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d12b      	bne.n	8006300 <_strtod_l+0x8f0>
 80062a8:	9b05      	ldr	r3, [sp, #20]
 80062aa:	4641      	mov	r1, r8
 80062ac:	b303      	cbz	r3, 80062f0 <_strtod_l+0x8e0>
 80062ae:	464a      	mov	r2, r9
 80062b0:	4b96      	ldr	r3, [pc, #600]	; (800650c <_strtod_l+0xafc>)
 80062b2:	4013      	ands	r3, r2
 80062b4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	d81b      	bhi.n	80062f6 <_strtod_l+0x8e6>
 80062be:	0d1b      	lsrs	r3, r3, #20
 80062c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	4299      	cmp	r1, r3
 80062ca:	d119      	bne.n	8006300 <_strtod_l+0x8f0>
 80062cc:	4b90      	ldr	r3, [pc, #576]	; (8006510 <_strtod_l+0xb00>)
 80062ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d102      	bne.n	80062da <_strtod_l+0x8ca>
 80062d4:	3101      	adds	r1, #1
 80062d6:	f43f adda 	beq.w	8005e8e <_strtod_l+0x47e>
 80062da:	f04f 0800 	mov.w	r8, #0
 80062de:	4b8b      	ldr	r3, [pc, #556]	; (800650c <_strtod_l+0xafc>)
 80062e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e2:	401a      	ands	r2, r3
 80062e4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80062e8:	9b05      	ldr	r3, [sp, #20]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d19a      	bne.n	8006224 <_strtod_l+0x814>
 80062ee:	e5d9      	b.n	8005ea4 <_strtod_l+0x494>
 80062f0:	f04f 33ff 	mov.w	r3, #4294967295
 80062f4:	e7e8      	b.n	80062c8 <_strtod_l+0x8b8>
 80062f6:	4613      	mov	r3, r2
 80062f8:	e7e6      	b.n	80062c8 <_strtod_l+0x8b8>
 80062fa:	ea53 0308 	orrs.w	r3, r3, r8
 80062fe:	d081      	beq.n	8006204 <_strtod_l+0x7f4>
 8006300:	b1e5      	cbz	r5, 800633c <_strtod_l+0x92c>
 8006302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006304:	421d      	tst	r5, r3
 8006306:	d0ef      	beq.n	80062e8 <_strtod_l+0x8d8>
 8006308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800630a:	4640      	mov	r0, r8
 800630c:	4649      	mov	r1, r9
 800630e:	9a05      	ldr	r2, [sp, #20]
 8006310:	b1c3      	cbz	r3, 8006344 <_strtod_l+0x934>
 8006312:	f7ff fb59 	bl	80059c8 <sulp>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800631e:	f7f9 ff25 	bl	800016c <__adddf3>
 8006322:	4680      	mov	r8, r0
 8006324:	4689      	mov	r9, r1
 8006326:	e7df      	b.n	80062e8 <_strtod_l+0x8d8>
 8006328:	4013      	ands	r3, r2
 800632a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800632e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8006332:	f04f 38ff 	mov.w	r8, #4294967295
 8006336:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800633a:	e7d5      	b.n	80062e8 <_strtod_l+0x8d8>
 800633c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800633e:	ea13 0f08 	tst.w	r3, r8
 8006342:	e7e0      	b.n	8006306 <_strtod_l+0x8f6>
 8006344:	f7ff fb40 	bl	80059c8 <sulp>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006350:	f7f9 ff0a 	bl	8000168 <__aeabi_dsub>
 8006354:	2200      	movs	r2, #0
 8006356:	2300      	movs	r3, #0
 8006358:	4680      	mov	r8, r0
 800635a:	4689      	mov	r9, r1
 800635c:	f7fa fb24 	bl	80009a8 <__aeabi_dcmpeq>
 8006360:	2800      	cmp	r0, #0
 8006362:	d0c1      	beq.n	80062e8 <_strtod_l+0x8d8>
 8006364:	e608      	b.n	8005f78 <_strtod_l+0x568>
 8006366:	4658      	mov	r0, fp
 8006368:	9904      	ldr	r1, [sp, #16]
 800636a:	f002 f81d 	bl	80083a8 <__ratio>
 800636e:	2200      	movs	r2, #0
 8006370:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006374:	4606      	mov	r6, r0
 8006376:	460f      	mov	r7, r1
 8006378:	f7fa fb2a 	bl	80009d0 <__aeabi_dcmple>
 800637c:	2800      	cmp	r0, #0
 800637e:	d070      	beq.n	8006462 <_strtod_l+0xa52>
 8006380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006382:	2b00      	cmp	r3, #0
 8006384:	d042      	beq.n	800640c <_strtod_l+0x9fc>
 8006386:	2600      	movs	r6, #0
 8006388:	4f62      	ldr	r7, [pc, #392]	; (8006514 <_strtod_l+0xb04>)
 800638a:	4d62      	ldr	r5, [pc, #392]	; (8006514 <_strtod_l+0xb04>)
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006392:	0d1b      	lsrs	r3, r3, #20
 8006394:	051b      	lsls	r3, r3, #20
 8006396:	930f      	str	r3, [sp, #60]	; 0x3c
 8006398:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800639a:	4b5f      	ldr	r3, [pc, #380]	; (8006518 <_strtod_l+0xb08>)
 800639c:	429a      	cmp	r2, r3
 800639e:	f040 80c3 	bne.w	8006528 <_strtod_l+0xb18>
 80063a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a4:	4640      	mov	r0, r8
 80063a6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80063aa:	4649      	mov	r1, r9
 80063ac:	f001 ff26 	bl	80081fc <__ulp>
 80063b0:	4602      	mov	r2, r0
 80063b2:	460b      	mov	r3, r1
 80063b4:	4630      	mov	r0, r6
 80063b6:	4639      	mov	r1, r7
 80063b8:	f7fa f88e 	bl	80004d8 <__aeabi_dmul>
 80063bc:	4642      	mov	r2, r8
 80063be:	464b      	mov	r3, r9
 80063c0:	f7f9 fed4 	bl	800016c <__adddf3>
 80063c4:	460b      	mov	r3, r1
 80063c6:	4951      	ldr	r1, [pc, #324]	; (800650c <_strtod_l+0xafc>)
 80063c8:	4a54      	ldr	r2, [pc, #336]	; (800651c <_strtod_l+0xb0c>)
 80063ca:	4019      	ands	r1, r3
 80063cc:	4291      	cmp	r1, r2
 80063ce:	4680      	mov	r8, r0
 80063d0:	d95d      	bls.n	800648e <_strtod_l+0xa7e>
 80063d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d4:	4b4e      	ldr	r3, [pc, #312]	; (8006510 <_strtod_l+0xb00>)
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d103      	bne.n	80063e2 <_strtod_l+0x9d2>
 80063da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063dc:	3301      	adds	r3, #1
 80063de:	f43f ad56 	beq.w	8005e8e <_strtod_l+0x47e>
 80063e2:	f04f 38ff 	mov.w	r8, #4294967295
 80063e6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006510 <_strtod_l+0xb00>
 80063ea:	4650      	mov	r0, sl
 80063ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80063ee:	f001 fbd5 	bl	8007b9c <_Bfree>
 80063f2:	4650      	mov	r0, sl
 80063f4:	9906      	ldr	r1, [sp, #24]
 80063f6:	f001 fbd1 	bl	8007b9c <_Bfree>
 80063fa:	4650      	mov	r0, sl
 80063fc:	9904      	ldr	r1, [sp, #16]
 80063fe:	f001 fbcd 	bl	8007b9c <_Bfree>
 8006402:	4659      	mov	r1, fp
 8006404:	4650      	mov	r0, sl
 8006406:	f001 fbc9 	bl	8007b9c <_Bfree>
 800640a:	e627      	b.n	800605c <_strtod_l+0x64c>
 800640c:	f1b8 0f00 	cmp.w	r8, #0
 8006410:	d119      	bne.n	8006446 <_strtod_l+0xa36>
 8006412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006414:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006418:	b9e3      	cbnz	r3, 8006454 <_strtod_l+0xa44>
 800641a:	2200      	movs	r2, #0
 800641c:	4630      	mov	r0, r6
 800641e:	4639      	mov	r1, r7
 8006420:	4b3c      	ldr	r3, [pc, #240]	; (8006514 <_strtod_l+0xb04>)
 8006422:	f7fa facb 	bl	80009bc <__aeabi_dcmplt>
 8006426:	b9c8      	cbnz	r0, 800645c <_strtod_l+0xa4c>
 8006428:	2200      	movs	r2, #0
 800642a:	4630      	mov	r0, r6
 800642c:	4639      	mov	r1, r7
 800642e:	4b3c      	ldr	r3, [pc, #240]	; (8006520 <_strtod_l+0xb10>)
 8006430:	f7fa f852 	bl	80004d8 <__aeabi_dmul>
 8006434:	4604      	mov	r4, r0
 8006436:	460d      	mov	r5, r1
 8006438:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800643c:	9416      	str	r4, [sp, #88]	; 0x58
 800643e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006440:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8006444:	e7a2      	b.n	800638c <_strtod_l+0x97c>
 8006446:	f1b8 0f01 	cmp.w	r8, #1
 800644a:	d103      	bne.n	8006454 <_strtod_l+0xa44>
 800644c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	f43f ad92 	beq.w	8005f78 <_strtod_l+0x568>
 8006454:	2600      	movs	r6, #0
 8006456:	2400      	movs	r4, #0
 8006458:	4f32      	ldr	r7, [pc, #200]	; (8006524 <_strtod_l+0xb14>)
 800645a:	e796      	b.n	800638a <_strtod_l+0x97a>
 800645c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800645e:	4d30      	ldr	r5, [pc, #192]	; (8006520 <_strtod_l+0xb10>)
 8006460:	e7ea      	b.n	8006438 <_strtod_l+0xa28>
 8006462:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <_strtod_l+0xb10>)
 8006464:	2200      	movs	r2, #0
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7fa f835 	bl	80004d8 <__aeabi_dmul>
 800646e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006470:	4604      	mov	r4, r0
 8006472:	460d      	mov	r5, r1
 8006474:	b933      	cbnz	r3, 8006484 <_strtod_l+0xa74>
 8006476:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800647a:	9010      	str	r0, [sp, #64]	; 0x40
 800647c:	9311      	str	r3, [sp, #68]	; 0x44
 800647e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006482:	e783      	b.n	800638c <_strtod_l+0x97c>
 8006484:	4602      	mov	r2, r0
 8006486:	460b      	mov	r3, r1
 8006488:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800648c:	e7f7      	b.n	800647e <_strtod_l+0xa6e>
 800648e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8006492:	9b05      	ldr	r3, [sp, #20]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1a8      	bne.n	80063ea <_strtod_l+0x9da>
 8006498:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800649c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800649e:	0d1b      	lsrs	r3, r3, #20
 80064a0:	051b      	lsls	r3, r3, #20
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d1a1      	bne.n	80063ea <_strtod_l+0x9da>
 80064a6:	4620      	mov	r0, r4
 80064a8:	4629      	mov	r1, r5
 80064aa:	f7fa fc6b 	bl	8000d84 <__aeabi_d2lz>
 80064ae:	f7f9 ffe5 	bl	800047c <__aeabi_l2d>
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	4620      	mov	r0, r4
 80064b8:	4629      	mov	r1, r5
 80064ba:	f7f9 fe55 	bl	8000168 <__aeabi_dsub>
 80064be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064c4:	ea43 0308 	orr.w	r3, r3, r8
 80064c8:	4313      	orrs	r3, r2
 80064ca:	4604      	mov	r4, r0
 80064cc:	460d      	mov	r5, r1
 80064ce:	d066      	beq.n	800659e <_strtod_l+0xb8e>
 80064d0:	a309      	add	r3, pc, #36	; (adr r3, 80064f8 <_strtod_l+0xae8>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7fa fa71 	bl	80009bc <__aeabi_dcmplt>
 80064da:	2800      	cmp	r0, #0
 80064dc:	f47f ace2 	bne.w	8005ea4 <_strtod_l+0x494>
 80064e0:	a307      	add	r3, pc, #28	; (adr r3, 8006500 <_strtod_l+0xaf0>)
 80064e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7fa fa85 	bl	80009f8 <__aeabi_dcmpgt>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	f43f af7b 	beq.w	80063ea <_strtod_l+0x9da>
 80064f4:	e4d6      	b.n	8005ea4 <_strtod_l+0x494>
 80064f6:	bf00      	nop
 80064f8:	94a03595 	.word	0x94a03595
 80064fc:	3fdfffff 	.word	0x3fdfffff
 8006500:	35afe535 	.word	0x35afe535
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	000fffff 	.word	0x000fffff
 800650c:	7ff00000 	.word	0x7ff00000
 8006510:	7fefffff 	.word	0x7fefffff
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	7fe00000 	.word	0x7fe00000
 800651c:	7c9fffff 	.word	0x7c9fffff
 8006520:	3fe00000 	.word	0x3fe00000
 8006524:	bff00000 	.word	0xbff00000
 8006528:	9b05      	ldr	r3, [sp, #20]
 800652a:	b313      	cbz	r3, 8006572 <_strtod_l+0xb62>
 800652c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800652e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006532:	d81e      	bhi.n	8006572 <_strtod_l+0xb62>
 8006534:	a326      	add	r3, pc, #152	; (adr r3, 80065d0 <_strtod_l+0xbc0>)
 8006536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653a:	4620      	mov	r0, r4
 800653c:	4629      	mov	r1, r5
 800653e:	f7fa fa47 	bl	80009d0 <__aeabi_dcmple>
 8006542:	b190      	cbz	r0, 800656a <_strtod_l+0xb5a>
 8006544:	4629      	mov	r1, r5
 8006546:	4620      	mov	r0, r4
 8006548:	f7fa fa9e 	bl	8000a88 <__aeabi_d2uiz>
 800654c:	2801      	cmp	r0, #1
 800654e:	bf38      	it	cc
 8006550:	2001      	movcc	r0, #1
 8006552:	f7f9 ff47 	bl	80003e4 <__aeabi_ui2d>
 8006556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006558:	4604      	mov	r4, r0
 800655a:	460d      	mov	r5, r1
 800655c:	b9d3      	cbnz	r3, 8006594 <_strtod_l+0xb84>
 800655e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006562:	9012      	str	r0, [sp, #72]	; 0x48
 8006564:	9313      	str	r3, [sp, #76]	; 0x4c
 8006566:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800656a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800656c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8006570:	1a9f      	subs	r7, r3, r2
 8006572:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006576:	f001 fe41 	bl	80081fc <__ulp>
 800657a:	4602      	mov	r2, r0
 800657c:	460b      	mov	r3, r1
 800657e:	4630      	mov	r0, r6
 8006580:	4639      	mov	r1, r7
 8006582:	f7f9 ffa9 	bl	80004d8 <__aeabi_dmul>
 8006586:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800658a:	f7f9 fdef 	bl	800016c <__adddf3>
 800658e:	4680      	mov	r8, r0
 8006590:	4689      	mov	r9, r1
 8006592:	e77e      	b.n	8006492 <_strtod_l+0xa82>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800659c:	e7e3      	b.n	8006566 <_strtod_l+0xb56>
 800659e:	a30e      	add	r3, pc, #56	; (adr r3, 80065d8 <_strtod_l+0xbc8>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7fa fa0a 	bl	80009bc <__aeabi_dcmplt>
 80065a8:	e7a1      	b.n	80064ee <_strtod_l+0xade>
 80065aa:	2300      	movs	r3, #0
 80065ac:	930a      	str	r3, [sp, #40]	; 0x28
 80065ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80065b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	f7ff ba71 	b.w	8005a9a <_strtod_l+0x8a>
 80065b8:	2a65      	cmp	r2, #101	; 0x65
 80065ba:	f43f ab63 	beq.w	8005c84 <_strtod_l+0x274>
 80065be:	2a45      	cmp	r2, #69	; 0x45
 80065c0:	f43f ab60 	beq.w	8005c84 <_strtod_l+0x274>
 80065c4:	2301      	movs	r3, #1
 80065c6:	f7ff bb95 	b.w	8005cf4 <_strtod_l+0x2e4>
 80065ca:	bf00      	nop
 80065cc:	f3af 8000 	nop.w
 80065d0:	ffc00000 	.word	0xffc00000
 80065d4:	41dfffff 	.word	0x41dfffff
 80065d8:	94a03595 	.word	0x94a03595
 80065dc:	3fcfffff 	.word	0x3fcfffff

080065e0 <_strtod_r>:
 80065e0:	4b01      	ldr	r3, [pc, #4]	; (80065e8 <_strtod_r+0x8>)
 80065e2:	f7ff ba15 	b.w	8005a10 <_strtod_l>
 80065e6:	bf00      	nop
 80065e8:	20000074 	.word	0x20000074

080065ec <_strtol_l.constprop.0>:
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f2:	4680      	mov	r8, r0
 80065f4:	d001      	beq.n	80065fa <_strtol_l.constprop.0+0xe>
 80065f6:	2b24      	cmp	r3, #36	; 0x24
 80065f8:	d906      	bls.n	8006608 <_strtol_l.constprop.0+0x1c>
 80065fa:	f7fe fb21 	bl	8004c40 <__errno>
 80065fe:	2316      	movs	r3, #22
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	2000      	movs	r0, #0
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	460d      	mov	r5, r1
 800660a:	4f35      	ldr	r7, [pc, #212]	; (80066e0 <_strtol_l.constprop.0+0xf4>)
 800660c:	4628      	mov	r0, r5
 800660e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006612:	5de6      	ldrb	r6, [r4, r7]
 8006614:	f016 0608 	ands.w	r6, r6, #8
 8006618:	d1f8      	bne.n	800660c <_strtol_l.constprop.0+0x20>
 800661a:	2c2d      	cmp	r4, #45	; 0x2d
 800661c:	d12f      	bne.n	800667e <_strtol_l.constprop.0+0x92>
 800661e:	2601      	movs	r6, #1
 8006620:	782c      	ldrb	r4, [r5, #0]
 8006622:	1c85      	adds	r5, r0, #2
 8006624:	2b00      	cmp	r3, #0
 8006626:	d057      	beq.n	80066d8 <_strtol_l.constprop.0+0xec>
 8006628:	2b10      	cmp	r3, #16
 800662a:	d109      	bne.n	8006640 <_strtol_l.constprop.0+0x54>
 800662c:	2c30      	cmp	r4, #48	; 0x30
 800662e:	d107      	bne.n	8006640 <_strtol_l.constprop.0+0x54>
 8006630:	7828      	ldrb	r0, [r5, #0]
 8006632:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006636:	2858      	cmp	r0, #88	; 0x58
 8006638:	d149      	bne.n	80066ce <_strtol_l.constprop.0+0xe2>
 800663a:	2310      	movs	r3, #16
 800663c:	786c      	ldrb	r4, [r5, #1]
 800663e:	3502      	adds	r5, #2
 8006640:	2700      	movs	r7, #0
 8006642:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006646:	f10e 3eff 	add.w	lr, lr, #4294967295
 800664a:	fbbe f9f3 	udiv	r9, lr, r3
 800664e:	4638      	mov	r0, r7
 8006650:	fb03 ea19 	mls	sl, r3, r9, lr
 8006654:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006658:	f1bc 0f09 	cmp.w	ip, #9
 800665c:	d814      	bhi.n	8006688 <_strtol_l.constprop.0+0x9c>
 800665e:	4664      	mov	r4, ip
 8006660:	42a3      	cmp	r3, r4
 8006662:	dd22      	ble.n	80066aa <_strtol_l.constprop.0+0xbe>
 8006664:	2f00      	cmp	r7, #0
 8006666:	db1d      	blt.n	80066a4 <_strtol_l.constprop.0+0xb8>
 8006668:	4581      	cmp	r9, r0
 800666a:	d31b      	bcc.n	80066a4 <_strtol_l.constprop.0+0xb8>
 800666c:	d101      	bne.n	8006672 <_strtol_l.constprop.0+0x86>
 800666e:	45a2      	cmp	sl, r4
 8006670:	db18      	blt.n	80066a4 <_strtol_l.constprop.0+0xb8>
 8006672:	2701      	movs	r7, #1
 8006674:	fb00 4003 	mla	r0, r0, r3, r4
 8006678:	f815 4b01 	ldrb.w	r4, [r5], #1
 800667c:	e7ea      	b.n	8006654 <_strtol_l.constprop.0+0x68>
 800667e:	2c2b      	cmp	r4, #43	; 0x2b
 8006680:	bf04      	itt	eq
 8006682:	782c      	ldrbeq	r4, [r5, #0]
 8006684:	1c85      	addeq	r5, r0, #2
 8006686:	e7cd      	b.n	8006624 <_strtol_l.constprop.0+0x38>
 8006688:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800668c:	f1bc 0f19 	cmp.w	ip, #25
 8006690:	d801      	bhi.n	8006696 <_strtol_l.constprop.0+0xaa>
 8006692:	3c37      	subs	r4, #55	; 0x37
 8006694:	e7e4      	b.n	8006660 <_strtol_l.constprop.0+0x74>
 8006696:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800669a:	f1bc 0f19 	cmp.w	ip, #25
 800669e:	d804      	bhi.n	80066aa <_strtol_l.constprop.0+0xbe>
 80066a0:	3c57      	subs	r4, #87	; 0x57
 80066a2:	e7dd      	b.n	8006660 <_strtol_l.constprop.0+0x74>
 80066a4:	f04f 37ff 	mov.w	r7, #4294967295
 80066a8:	e7e6      	b.n	8006678 <_strtol_l.constprop.0+0x8c>
 80066aa:	2f00      	cmp	r7, #0
 80066ac:	da07      	bge.n	80066be <_strtol_l.constprop.0+0xd2>
 80066ae:	2322      	movs	r3, #34	; 0x22
 80066b0:	4670      	mov	r0, lr
 80066b2:	f8c8 3000 	str.w	r3, [r8]
 80066b6:	2a00      	cmp	r2, #0
 80066b8:	d0a4      	beq.n	8006604 <_strtol_l.constprop.0+0x18>
 80066ba:	1e69      	subs	r1, r5, #1
 80066bc:	e005      	b.n	80066ca <_strtol_l.constprop.0+0xde>
 80066be:	b106      	cbz	r6, 80066c2 <_strtol_l.constprop.0+0xd6>
 80066c0:	4240      	negs	r0, r0
 80066c2:	2a00      	cmp	r2, #0
 80066c4:	d09e      	beq.n	8006604 <_strtol_l.constprop.0+0x18>
 80066c6:	2f00      	cmp	r7, #0
 80066c8:	d1f7      	bne.n	80066ba <_strtol_l.constprop.0+0xce>
 80066ca:	6011      	str	r1, [r2, #0]
 80066cc:	e79a      	b.n	8006604 <_strtol_l.constprop.0+0x18>
 80066ce:	2430      	movs	r4, #48	; 0x30
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1b5      	bne.n	8006640 <_strtol_l.constprop.0+0x54>
 80066d4:	2308      	movs	r3, #8
 80066d6:	e7b3      	b.n	8006640 <_strtol_l.constprop.0+0x54>
 80066d8:	2c30      	cmp	r4, #48	; 0x30
 80066da:	d0a9      	beq.n	8006630 <_strtol_l.constprop.0+0x44>
 80066dc:	230a      	movs	r3, #10
 80066de:	e7af      	b.n	8006640 <_strtol_l.constprop.0+0x54>
 80066e0:	08009879 	.word	0x08009879

080066e4 <_strtol_r>:
 80066e4:	f7ff bf82 	b.w	80065ec <_strtol_l.constprop.0>

080066e8 <quorem>:
 80066e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	6903      	ldr	r3, [r0, #16]
 80066ee:	690c      	ldr	r4, [r1, #16]
 80066f0:	4607      	mov	r7, r0
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	f2c0 8082 	blt.w	80067fc <quorem+0x114>
 80066f8:	3c01      	subs	r4, #1
 80066fa:	f100 0514 	add.w	r5, r0, #20
 80066fe:	f101 0814 	add.w	r8, r1, #20
 8006702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800670c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006710:	3301      	adds	r3, #1
 8006712:	429a      	cmp	r2, r3
 8006714:	fbb2 f6f3 	udiv	r6, r2, r3
 8006718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800671c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006720:	d331      	bcc.n	8006786 <quorem+0x9e>
 8006722:	f04f 0e00 	mov.w	lr, #0
 8006726:	4640      	mov	r0, r8
 8006728:	46ac      	mov	ip, r5
 800672a:	46f2      	mov	sl, lr
 800672c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006730:	b293      	uxth	r3, r2
 8006732:	fb06 e303 	mla	r3, r6, r3, lr
 8006736:	0c12      	lsrs	r2, r2, #16
 8006738:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800673c:	b29b      	uxth	r3, r3
 800673e:	fb06 e202 	mla	r2, r6, r2, lr
 8006742:	ebaa 0303 	sub.w	r3, sl, r3
 8006746:	f8dc a000 	ldr.w	sl, [ip]
 800674a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800674e:	fa1f fa8a 	uxth.w	sl, sl
 8006752:	4453      	add	r3, sl
 8006754:	f8dc a000 	ldr.w	sl, [ip]
 8006758:	b292      	uxth	r2, r2
 800675a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800675e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006768:	4581      	cmp	r9, r0
 800676a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800676e:	f84c 3b04 	str.w	r3, [ip], #4
 8006772:	d2db      	bcs.n	800672c <quorem+0x44>
 8006774:	f855 300b 	ldr.w	r3, [r5, fp]
 8006778:	b92b      	cbnz	r3, 8006786 <quorem+0x9e>
 800677a:	9b01      	ldr	r3, [sp, #4]
 800677c:	3b04      	subs	r3, #4
 800677e:	429d      	cmp	r5, r3
 8006780:	461a      	mov	r2, r3
 8006782:	d32f      	bcc.n	80067e4 <quorem+0xfc>
 8006784:	613c      	str	r4, [r7, #16]
 8006786:	4638      	mov	r0, r7
 8006788:	f001 fc90 	bl	80080ac <__mcmp>
 800678c:	2800      	cmp	r0, #0
 800678e:	db25      	blt.n	80067dc <quorem+0xf4>
 8006790:	4628      	mov	r0, r5
 8006792:	f04f 0c00 	mov.w	ip, #0
 8006796:	3601      	adds	r6, #1
 8006798:	f858 1b04 	ldr.w	r1, [r8], #4
 800679c:	f8d0 e000 	ldr.w	lr, [r0]
 80067a0:	b28b      	uxth	r3, r1
 80067a2:	ebac 0303 	sub.w	r3, ip, r3
 80067a6:	fa1f f28e 	uxth.w	r2, lr
 80067aa:	4413      	add	r3, r2
 80067ac:	0c0a      	lsrs	r2, r1, #16
 80067ae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80067b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067bc:	45c1      	cmp	r9, r8
 80067be:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80067c2:	f840 3b04 	str.w	r3, [r0], #4
 80067c6:	d2e7      	bcs.n	8006798 <quorem+0xb0>
 80067c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d0:	b922      	cbnz	r2, 80067dc <quorem+0xf4>
 80067d2:	3b04      	subs	r3, #4
 80067d4:	429d      	cmp	r5, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	d30a      	bcc.n	80067f0 <quorem+0x108>
 80067da:	613c      	str	r4, [r7, #16]
 80067dc:	4630      	mov	r0, r6
 80067de:	b003      	add	sp, #12
 80067e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	3b04      	subs	r3, #4
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	d1cb      	bne.n	8006784 <quorem+0x9c>
 80067ec:	3c01      	subs	r4, #1
 80067ee:	e7c6      	b.n	800677e <quorem+0x96>
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	3b04      	subs	r3, #4
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1f0      	bne.n	80067da <quorem+0xf2>
 80067f8:	3c01      	subs	r4, #1
 80067fa:	e7eb      	b.n	80067d4 <quorem+0xec>
 80067fc:	2000      	movs	r0, #0
 80067fe:	e7ee      	b.n	80067de <quorem+0xf6>

08006800 <_dtoa_r>:
 8006800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	461f      	mov	r7, r3
 8006808:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800680a:	b099      	sub	sp, #100	; 0x64
 800680c:	4605      	mov	r5, r0
 800680e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006812:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006816:	b974      	cbnz	r4, 8006836 <_dtoa_r+0x36>
 8006818:	2010      	movs	r0, #16
 800681a:	f001 f949 	bl	8007ab0 <malloc>
 800681e:	4602      	mov	r2, r0
 8006820:	6268      	str	r0, [r5, #36]	; 0x24
 8006822:	b920      	cbnz	r0, 800682e <_dtoa_r+0x2e>
 8006824:	21ea      	movs	r1, #234	; 0xea
 8006826:	4ba8      	ldr	r3, [pc, #672]	; (8006ac8 <_dtoa_r+0x2c8>)
 8006828:	48a8      	ldr	r0, [pc, #672]	; (8006acc <_dtoa_r+0x2cc>)
 800682a:	f002 f8b3 	bl	8008994 <__assert_func>
 800682e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006832:	6004      	str	r4, [r0, #0]
 8006834:	60c4      	str	r4, [r0, #12]
 8006836:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006838:	6819      	ldr	r1, [r3, #0]
 800683a:	b151      	cbz	r1, 8006852 <_dtoa_r+0x52>
 800683c:	685a      	ldr	r2, [r3, #4]
 800683e:	2301      	movs	r3, #1
 8006840:	4093      	lsls	r3, r2
 8006842:	604a      	str	r2, [r1, #4]
 8006844:	608b      	str	r3, [r1, #8]
 8006846:	4628      	mov	r0, r5
 8006848:	f001 f9a8 	bl	8007b9c <_Bfree>
 800684c:	2200      	movs	r2, #0
 800684e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	1e3b      	subs	r3, r7, #0
 8006854:	bfaf      	iteee	ge
 8006856:	2300      	movge	r3, #0
 8006858:	2201      	movlt	r2, #1
 800685a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800685e:	9305      	strlt	r3, [sp, #20]
 8006860:	bfa8      	it	ge
 8006862:	f8c8 3000 	strge.w	r3, [r8]
 8006866:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800686a:	4b99      	ldr	r3, [pc, #612]	; (8006ad0 <_dtoa_r+0x2d0>)
 800686c:	bfb8      	it	lt
 800686e:	f8c8 2000 	strlt.w	r2, [r8]
 8006872:	ea33 0309 	bics.w	r3, r3, r9
 8006876:	d119      	bne.n	80068ac <_dtoa_r+0xac>
 8006878:	f242 730f 	movw	r3, #9999	; 0x270f
 800687c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800687e:	6013      	str	r3, [r2, #0]
 8006880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006884:	4333      	orrs	r3, r6
 8006886:	f000 857f 	beq.w	8007388 <_dtoa_r+0xb88>
 800688a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800688c:	b953      	cbnz	r3, 80068a4 <_dtoa_r+0xa4>
 800688e:	4b91      	ldr	r3, [pc, #580]	; (8006ad4 <_dtoa_r+0x2d4>)
 8006890:	e022      	b.n	80068d8 <_dtoa_r+0xd8>
 8006892:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <_dtoa_r+0x2d8>)
 8006894:	9303      	str	r3, [sp, #12]
 8006896:	3308      	adds	r3, #8
 8006898:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800689a:	6013      	str	r3, [r2, #0]
 800689c:	9803      	ldr	r0, [sp, #12]
 800689e:	b019      	add	sp, #100	; 0x64
 80068a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a4:	4b8b      	ldr	r3, [pc, #556]	; (8006ad4 <_dtoa_r+0x2d4>)
 80068a6:	9303      	str	r3, [sp, #12]
 80068a8:	3303      	adds	r3, #3
 80068aa:	e7f5      	b.n	8006898 <_dtoa_r+0x98>
 80068ac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80068b0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80068b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068b8:	2200      	movs	r2, #0
 80068ba:	2300      	movs	r3, #0
 80068bc:	f7fa f874 	bl	80009a8 <__aeabi_dcmpeq>
 80068c0:	4680      	mov	r8, r0
 80068c2:	b158      	cbz	r0, 80068dc <_dtoa_r+0xdc>
 80068c4:	2301      	movs	r3, #1
 80068c6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80068c8:	6013      	str	r3, [r2, #0]
 80068ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8558 	beq.w	8007382 <_dtoa_r+0xb82>
 80068d2:	4882      	ldr	r0, [pc, #520]	; (8006adc <_dtoa_r+0x2dc>)
 80068d4:	6018      	str	r0, [r3, #0]
 80068d6:	1e43      	subs	r3, r0, #1
 80068d8:	9303      	str	r3, [sp, #12]
 80068da:	e7df      	b.n	800689c <_dtoa_r+0x9c>
 80068dc:	ab16      	add	r3, sp, #88	; 0x58
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	ab17      	add	r3, sp, #92	; 0x5c
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	4628      	mov	r0, r5
 80068e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068ea:	f001 fd01 	bl	80082f0 <__d2b>
 80068ee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80068f2:	4683      	mov	fp, r0
 80068f4:	2c00      	cmp	r4, #0
 80068f6:	d07f      	beq.n	80069f8 <_dtoa_r+0x1f8>
 80068f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068fe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006902:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006906:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800690a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800690e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006912:	2200      	movs	r2, #0
 8006914:	4b72      	ldr	r3, [pc, #456]	; (8006ae0 <_dtoa_r+0x2e0>)
 8006916:	f7f9 fc27 	bl	8000168 <__aeabi_dsub>
 800691a:	a365      	add	r3, pc, #404	; (adr r3, 8006ab0 <_dtoa_r+0x2b0>)
 800691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006920:	f7f9 fdda 	bl	80004d8 <__aeabi_dmul>
 8006924:	a364      	add	r3, pc, #400	; (adr r3, 8006ab8 <_dtoa_r+0x2b8>)
 8006926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800692a:	f7f9 fc1f 	bl	800016c <__adddf3>
 800692e:	4606      	mov	r6, r0
 8006930:	4620      	mov	r0, r4
 8006932:	460f      	mov	r7, r1
 8006934:	f7f9 fd66 	bl	8000404 <__aeabi_i2d>
 8006938:	a361      	add	r3, pc, #388	; (adr r3, 8006ac0 <_dtoa_r+0x2c0>)
 800693a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693e:	f7f9 fdcb 	bl	80004d8 <__aeabi_dmul>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4630      	mov	r0, r6
 8006948:	4639      	mov	r1, r7
 800694a:	f7f9 fc0f 	bl	800016c <__adddf3>
 800694e:	4606      	mov	r6, r0
 8006950:	460f      	mov	r7, r1
 8006952:	f7fa f871 	bl	8000a38 <__aeabi_d2iz>
 8006956:	2200      	movs	r2, #0
 8006958:	4682      	mov	sl, r0
 800695a:	2300      	movs	r3, #0
 800695c:	4630      	mov	r0, r6
 800695e:	4639      	mov	r1, r7
 8006960:	f7fa f82c 	bl	80009bc <__aeabi_dcmplt>
 8006964:	b148      	cbz	r0, 800697a <_dtoa_r+0x17a>
 8006966:	4650      	mov	r0, sl
 8006968:	f7f9 fd4c 	bl	8000404 <__aeabi_i2d>
 800696c:	4632      	mov	r2, r6
 800696e:	463b      	mov	r3, r7
 8006970:	f7fa f81a 	bl	80009a8 <__aeabi_dcmpeq>
 8006974:	b908      	cbnz	r0, 800697a <_dtoa_r+0x17a>
 8006976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800697a:	f1ba 0f16 	cmp.w	sl, #22
 800697e:	d858      	bhi.n	8006a32 <_dtoa_r+0x232>
 8006980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006984:	4b57      	ldr	r3, [pc, #348]	; (8006ae4 <_dtoa_r+0x2e4>)
 8006986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	f7fa f815 	bl	80009bc <__aeabi_dcmplt>
 8006992:	2800      	cmp	r0, #0
 8006994:	d04f      	beq.n	8006a36 <_dtoa_r+0x236>
 8006996:	2300      	movs	r3, #0
 8006998:	f10a 3aff 	add.w	sl, sl, #4294967295
 800699c:	930f      	str	r3, [sp, #60]	; 0x3c
 800699e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80069a0:	1b1c      	subs	r4, r3, r4
 80069a2:	1e63      	subs	r3, r4, #1
 80069a4:	9309      	str	r3, [sp, #36]	; 0x24
 80069a6:	bf49      	itett	mi
 80069a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80069ac:	2300      	movpl	r3, #0
 80069ae:	9306      	strmi	r3, [sp, #24]
 80069b0:	2300      	movmi	r3, #0
 80069b2:	bf54      	ite	pl
 80069b4:	9306      	strpl	r3, [sp, #24]
 80069b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80069b8:	f1ba 0f00 	cmp.w	sl, #0
 80069bc:	db3d      	blt.n	8006a3a <_dtoa_r+0x23a>
 80069be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80069c4:	4453      	add	r3, sl
 80069c6:	9309      	str	r3, [sp, #36]	; 0x24
 80069c8:	2300      	movs	r3, #0
 80069ca:	930a      	str	r3, [sp, #40]	; 0x28
 80069cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069ce:	2b09      	cmp	r3, #9
 80069d0:	f200 808c 	bhi.w	8006aec <_dtoa_r+0x2ec>
 80069d4:	2b05      	cmp	r3, #5
 80069d6:	bfc4      	itt	gt
 80069d8:	3b04      	subgt	r3, #4
 80069da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80069dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80069de:	bfc8      	it	gt
 80069e0:	2400      	movgt	r4, #0
 80069e2:	f1a3 0302 	sub.w	r3, r3, #2
 80069e6:	bfd8      	it	le
 80069e8:	2401      	movle	r4, #1
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	f200 808a 	bhi.w	8006b04 <_dtoa_r+0x304>
 80069f0:	e8df f003 	tbb	[pc, r3]
 80069f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80069f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80069fc:	441c      	add	r4, r3
 80069fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006a02:	2b20      	cmp	r3, #32
 8006a04:	bfc3      	ittte	gt
 8006a06:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006a0a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8006a0e:	fa09 f303 	lslgt.w	r3, r9, r3
 8006a12:	f1c3 0320 	rsble	r3, r3, #32
 8006a16:	bfc6      	itte	gt
 8006a18:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006a1c:	4318      	orrgt	r0, r3
 8006a1e:	fa06 f003 	lslle.w	r0, r6, r3
 8006a22:	f7f9 fcdf 	bl	80003e4 <__aeabi_ui2d>
 8006a26:	2301      	movs	r3, #1
 8006a28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006a2c:	3c01      	subs	r4, #1
 8006a2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a30:	e76f      	b.n	8006912 <_dtoa_r+0x112>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e7b2      	b.n	800699c <_dtoa_r+0x19c>
 8006a36:	900f      	str	r0, [sp, #60]	; 0x3c
 8006a38:	e7b1      	b.n	800699e <_dtoa_r+0x19e>
 8006a3a:	9b06      	ldr	r3, [sp, #24]
 8006a3c:	eba3 030a 	sub.w	r3, r3, sl
 8006a40:	9306      	str	r3, [sp, #24]
 8006a42:	f1ca 0300 	rsb	r3, sl, #0
 8006a46:	930a      	str	r3, [sp, #40]	; 0x28
 8006a48:	2300      	movs	r3, #0
 8006a4a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a4c:	e7be      	b.n	80069cc <_dtoa_r+0x1cc>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dc58      	bgt.n	8006b0a <_dtoa_r+0x30a>
 8006a58:	f04f 0901 	mov.w	r9, #1
 8006a5c:	464b      	mov	r3, r9
 8006a5e:	f8cd 9020 	str.w	r9, [sp, #32]
 8006a62:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8006a66:	2200      	movs	r2, #0
 8006a68:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006a6a:	6042      	str	r2, [r0, #4]
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	f102 0614 	add.w	r6, r2, #20
 8006a72:	429e      	cmp	r6, r3
 8006a74:	6841      	ldr	r1, [r0, #4]
 8006a76:	d94e      	bls.n	8006b16 <_dtoa_r+0x316>
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f001 f84f 	bl	8007b1c <_Balloc>
 8006a7e:	9003      	str	r0, [sp, #12]
 8006a80:	2800      	cmp	r0, #0
 8006a82:	d14c      	bne.n	8006b1e <_dtoa_r+0x31e>
 8006a84:	4602      	mov	r2, r0
 8006a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a8a:	4b17      	ldr	r3, [pc, #92]	; (8006ae8 <_dtoa_r+0x2e8>)
 8006a8c:	e6cc      	b.n	8006828 <_dtoa_r+0x28>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e7de      	b.n	8006a50 <_dtoa_r+0x250>
 8006a92:	2300      	movs	r3, #0
 8006a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006a98:	eb0a 0903 	add.w	r9, sl, r3
 8006a9c:	f109 0301 	add.w	r3, r9, #1
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	bfb8      	it	lt
 8006aa6:	2301      	movlt	r3, #1
 8006aa8:	e7dd      	b.n	8006a66 <_dtoa_r+0x266>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e7f2      	b.n	8006a94 <_dtoa_r+0x294>
 8006aae:	bf00      	nop
 8006ab0:	636f4361 	.word	0x636f4361
 8006ab4:	3fd287a7 	.word	0x3fd287a7
 8006ab8:	8b60c8b3 	.word	0x8b60c8b3
 8006abc:	3fc68a28 	.word	0x3fc68a28
 8006ac0:	509f79fb 	.word	0x509f79fb
 8006ac4:	3fd34413 	.word	0x3fd34413
 8006ac8:	08009986 	.word	0x08009986
 8006acc:	0800999d 	.word	0x0800999d
 8006ad0:	7ff00000 	.word	0x7ff00000
 8006ad4:	08009982 	.word	0x08009982
 8006ad8:	08009979 	.word	0x08009979
 8006adc:	080097fd 	.word	0x080097fd
 8006ae0:	3ff80000 	.word	0x3ff80000
 8006ae4:	08009b08 	.word	0x08009b08
 8006ae8:	080099f8 	.word	0x080099f8
 8006aec:	2401      	movs	r4, #1
 8006aee:	2300      	movs	r3, #0
 8006af0:	940b      	str	r4, [sp, #44]	; 0x2c
 8006af2:	9322      	str	r3, [sp, #136]	; 0x88
 8006af4:	f04f 39ff 	mov.w	r9, #4294967295
 8006af8:	2200      	movs	r2, #0
 8006afa:	2312      	movs	r3, #18
 8006afc:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b00:	9223      	str	r2, [sp, #140]	; 0x8c
 8006b02:	e7b0      	b.n	8006a66 <_dtoa_r+0x266>
 8006b04:	2301      	movs	r3, #1
 8006b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b08:	e7f4      	b.n	8006af4 <_dtoa_r+0x2f4>
 8006b0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8006b0e:	464b      	mov	r3, r9
 8006b10:	f8cd 9020 	str.w	r9, [sp, #32]
 8006b14:	e7a7      	b.n	8006a66 <_dtoa_r+0x266>
 8006b16:	3101      	adds	r1, #1
 8006b18:	6041      	str	r1, [r0, #4]
 8006b1a:	0052      	lsls	r2, r2, #1
 8006b1c:	e7a7      	b.n	8006a6e <_dtoa_r+0x26e>
 8006b1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006b20:	9a03      	ldr	r2, [sp, #12]
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	2b0e      	cmp	r3, #14
 8006b28:	f200 80a8 	bhi.w	8006c7c <_dtoa_r+0x47c>
 8006b2c:	2c00      	cmp	r4, #0
 8006b2e:	f000 80a5 	beq.w	8006c7c <_dtoa_r+0x47c>
 8006b32:	f1ba 0f00 	cmp.w	sl, #0
 8006b36:	dd34      	ble.n	8006ba2 <_dtoa_r+0x3a2>
 8006b38:	4a9a      	ldr	r2, [pc, #616]	; (8006da4 <_dtoa_r+0x5a4>)
 8006b3a:	f00a 030f 	and.w	r3, sl, #15
 8006b3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006b42:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006b46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006b4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006b4e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8006b52:	d016      	beq.n	8006b82 <_dtoa_r+0x382>
 8006b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b58:	4b93      	ldr	r3, [pc, #588]	; (8006da8 <_dtoa_r+0x5a8>)
 8006b5a:	2703      	movs	r7, #3
 8006b5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b60:	f7f9 fde4 	bl	800072c <__aeabi_ddiv>
 8006b64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b68:	f004 040f 	and.w	r4, r4, #15
 8006b6c:	4e8e      	ldr	r6, [pc, #568]	; (8006da8 <_dtoa_r+0x5a8>)
 8006b6e:	b954      	cbnz	r4, 8006b86 <_dtoa_r+0x386>
 8006b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b78:	f7f9 fdd8 	bl	800072c <__aeabi_ddiv>
 8006b7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b80:	e029      	b.n	8006bd6 <_dtoa_r+0x3d6>
 8006b82:	2702      	movs	r7, #2
 8006b84:	e7f2      	b.n	8006b6c <_dtoa_r+0x36c>
 8006b86:	07e1      	lsls	r1, r4, #31
 8006b88:	d508      	bpl.n	8006b9c <_dtoa_r+0x39c>
 8006b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006b8e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b92:	f7f9 fca1 	bl	80004d8 <__aeabi_dmul>
 8006b96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006b9a:	3701      	adds	r7, #1
 8006b9c:	1064      	asrs	r4, r4, #1
 8006b9e:	3608      	adds	r6, #8
 8006ba0:	e7e5      	b.n	8006b6e <_dtoa_r+0x36e>
 8006ba2:	f000 80a5 	beq.w	8006cf0 <_dtoa_r+0x4f0>
 8006ba6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006baa:	f1ca 0400 	rsb	r4, sl, #0
 8006bae:	4b7d      	ldr	r3, [pc, #500]	; (8006da4 <_dtoa_r+0x5a4>)
 8006bb0:	f004 020f 	and.w	r2, r4, #15
 8006bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f7f9 fc8c 	bl	80004d8 <__aeabi_dmul>
 8006bc0:	2702      	movs	r7, #2
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bc8:	4e77      	ldr	r6, [pc, #476]	; (8006da8 <_dtoa_r+0x5a8>)
 8006bca:	1124      	asrs	r4, r4, #4
 8006bcc:	2c00      	cmp	r4, #0
 8006bce:	f040 8084 	bne.w	8006cda <_dtoa_r+0x4da>
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1d2      	bne.n	8006b7c <_dtoa_r+0x37c>
 8006bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	f000 808b 	beq.w	8006cf4 <_dtoa_r+0x4f4>
 8006bde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006be2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006be6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006bea:	2200      	movs	r2, #0
 8006bec:	4b6f      	ldr	r3, [pc, #444]	; (8006dac <_dtoa_r+0x5ac>)
 8006bee:	f7f9 fee5 	bl	80009bc <__aeabi_dcmplt>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	d07e      	beq.n	8006cf4 <_dtoa_r+0x4f4>
 8006bf6:	9b08      	ldr	r3, [sp, #32]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d07b      	beq.n	8006cf4 <_dtoa_r+0x4f4>
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	dd38      	ble.n	8006c74 <_dtoa_r+0x474>
 8006c02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006c06:	2200      	movs	r2, #0
 8006c08:	4b69      	ldr	r3, [pc, #420]	; (8006db0 <_dtoa_r+0x5b0>)
 8006c0a:	f7f9 fc65 	bl	80004d8 <__aeabi_dmul>
 8006c0e:	464c      	mov	r4, r9
 8006c10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c14:	f10a 38ff 	add.w	r8, sl, #4294967295
 8006c18:	3701      	adds	r7, #1
 8006c1a:	4638      	mov	r0, r7
 8006c1c:	f7f9 fbf2 	bl	8000404 <__aeabi_i2d>
 8006c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c24:	f7f9 fc58 	bl	80004d8 <__aeabi_dmul>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4b62      	ldr	r3, [pc, #392]	; (8006db4 <_dtoa_r+0x5b4>)
 8006c2c:	f7f9 fa9e 	bl	800016c <__adddf3>
 8006c30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006c34:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006c38:	9611      	str	r6, [sp, #68]	; 0x44
 8006c3a:	2c00      	cmp	r4, #0
 8006c3c:	d15d      	bne.n	8006cfa <_dtoa_r+0x4fa>
 8006c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c42:	2200      	movs	r2, #0
 8006c44:	4b5c      	ldr	r3, [pc, #368]	; (8006db8 <_dtoa_r+0x5b8>)
 8006c46:	f7f9 fa8f 	bl	8000168 <__aeabi_dsub>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006c52:	4633      	mov	r3, r6
 8006c54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c56:	f7f9 fecf 	bl	80009f8 <__aeabi_dcmpgt>
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f040 829c 	bne.w	8007198 <_dtoa_r+0x998>
 8006c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006c66:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006c6a:	f7f9 fea7 	bl	80009bc <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f040 8290 	bne.w	8007194 <_dtoa_r+0x994>
 8006c74:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006c7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f2c0 8152 	blt.w	8006f28 <_dtoa_r+0x728>
 8006c84:	f1ba 0f0e 	cmp.w	sl, #14
 8006c88:	f300 814e 	bgt.w	8006f28 <_dtoa_r+0x728>
 8006c8c:	4b45      	ldr	r3, [pc, #276]	; (8006da4 <_dtoa_r+0x5a4>)
 8006c8e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006c96:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f280 80db 	bge.w	8006e58 <_dtoa_r+0x658>
 8006ca2:	9b08      	ldr	r3, [sp, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f300 80d7 	bgt.w	8006e58 <_dtoa_r+0x658>
 8006caa:	f040 8272 	bne.w	8007192 <_dtoa_r+0x992>
 8006cae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	4b40      	ldr	r3, [pc, #256]	; (8006db8 <_dtoa_r+0x5b8>)
 8006cb6:	f7f9 fc0f 	bl	80004d8 <__aeabi_dmul>
 8006cba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cbe:	f7f9 fe91 	bl	80009e4 <__aeabi_dcmpge>
 8006cc2:	9c08      	ldr	r4, [sp, #32]
 8006cc4:	4626      	mov	r6, r4
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f040 8248 	bne.w	800715c <_dtoa_r+0x95c>
 8006ccc:	2331      	movs	r3, #49	; 0x31
 8006cce:	9f03      	ldr	r7, [sp, #12]
 8006cd0:	f10a 0a01 	add.w	sl, sl, #1
 8006cd4:	f807 3b01 	strb.w	r3, [r7], #1
 8006cd8:	e244      	b.n	8007164 <_dtoa_r+0x964>
 8006cda:	07e2      	lsls	r2, r4, #31
 8006cdc:	d505      	bpl.n	8006cea <_dtoa_r+0x4ea>
 8006cde:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	3701      	adds	r7, #1
 8006cea:	1064      	asrs	r4, r4, #1
 8006cec:	3608      	adds	r6, #8
 8006cee:	e76d      	b.n	8006bcc <_dtoa_r+0x3cc>
 8006cf0:	2702      	movs	r7, #2
 8006cf2:	e770      	b.n	8006bd6 <_dtoa_r+0x3d6>
 8006cf4:	46d0      	mov	r8, sl
 8006cf6:	9c08      	ldr	r4, [sp, #32]
 8006cf8:	e78f      	b.n	8006c1a <_dtoa_r+0x41a>
 8006cfa:	9903      	ldr	r1, [sp, #12]
 8006cfc:	4b29      	ldr	r3, [pc, #164]	; (8006da4 <_dtoa_r+0x5a4>)
 8006cfe:	4421      	add	r1, r4
 8006d00:	9112      	str	r1, [sp, #72]	; 0x48
 8006d02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d08:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006d0c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d10:	2900      	cmp	r1, #0
 8006d12:	d055      	beq.n	8006dc0 <_dtoa_r+0x5c0>
 8006d14:	2000      	movs	r0, #0
 8006d16:	4929      	ldr	r1, [pc, #164]	; (8006dbc <_dtoa_r+0x5bc>)
 8006d18:	f7f9 fd08 	bl	800072c <__aeabi_ddiv>
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	4632      	mov	r2, r6
 8006d20:	f7f9 fa22 	bl	8000168 <__aeabi_dsub>
 8006d24:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d28:	9f03      	ldr	r7, [sp, #12]
 8006d2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d2e:	f7f9 fe83 	bl	8000a38 <__aeabi_d2iz>
 8006d32:	4604      	mov	r4, r0
 8006d34:	f7f9 fb66 	bl	8000404 <__aeabi_i2d>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d40:	f7f9 fa12 	bl	8000168 <__aeabi_dsub>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	3430      	adds	r4, #48	; 0x30
 8006d4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d4e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d52:	f807 4b01 	strb.w	r4, [r7], #1
 8006d56:	f7f9 fe31 	bl	80009bc <__aeabi_dcmplt>
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d174      	bne.n	8006e48 <_dtoa_r+0x648>
 8006d5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d62:	2000      	movs	r0, #0
 8006d64:	4911      	ldr	r1, [pc, #68]	; (8006dac <_dtoa_r+0x5ac>)
 8006d66:	f7f9 f9ff 	bl	8000168 <__aeabi_dsub>
 8006d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006d6e:	f7f9 fe25 	bl	80009bc <__aeabi_dcmplt>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	f040 80b7 	bne.w	8006ee6 <_dtoa_r+0x6e6>
 8006d78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d7a:	429f      	cmp	r7, r3
 8006d7c:	f43f af7a 	beq.w	8006c74 <_dtoa_r+0x474>
 8006d80:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006d84:	2200      	movs	r2, #0
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <_dtoa_r+0x5b0>)
 8006d88:	f7f9 fba6 	bl	80004d8 <__aeabi_dmul>
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006d92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d96:	4b06      	ldr	r3, [pc, #24]	; (8006db0 <_dtoa_r+0x5b0>)
 8006d98:	f7f9 fb9e 	bl	80004d8 <__aeabi_dmul>
 8006d9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006da0:	e7c3      	b.n	8006d2a <_dtoa_r+0x52a>
 8006da2:	bf00      	nop
 8006da4:	08009b08 	.word	0x08009b08
 8006da8:	08009ae0 	.word	0x08009ae0
 8006dac:	3ff00000 	.word	0x3ff00000
 8006db0:	40240000 	.word	0x40240000
 8006db4:	401c0000 	.word	0x401c0000
 8006db8:	40140000 	.word	0x40140000
 8006dbc:	3fe00000 	.word	0x3fe00000
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fb88 	bl	80004d8 <__aeabi_dmul>
 8006dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006dce:	9c03      	ldr	r4, [sp, #12]
 8006dd0:	9314      	str	r3, [sp, #80]	; 0x50
 8006dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dd6:	f7f9 fe2f 	bl	8000a38 <__aeabi_d2iz>
 8006dda:	9015      	str	r0, [sp, #84]	; 0x54
 8006ddc:	f7f9 fb12 	bl	8000404 <__aeabi_i2d>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dee:	4606      	mov	r6, r0
 8006df0:	3330      	adds	r3, #48	; 0x30
 8006df2:	f804 3b01 	strb.w	r3, [r4], #1
 8006df6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006df8:	460f      	mov	r7, r1
 8006dfa:	429c      	cmp	r4, r3
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	d124      	bne.n	8006e4c <_dtoa_r+0x64c>
 8006e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006e06:	4bb0      	ldr	r3, [pc, #704]	; (80070c8 <_dtoa_r+0x8c8>)
 8006e08:	f7f9 f9b0 	bl	800016c <__adddf3>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4630      	mov	r0, r6
 8006e12:	4639      	mov	r1, r7
 8006e14:	f7f9 fdf0 	bl	80009f8 <__aeabi_dcmpgt>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d163      	bne.n	8006ee4 <_dtoa_r+0x6e4>
 8006e1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006e20:	2000      	movs	r0, #0
 8006e22:	49a9      	ldr	r1, [pc, #676]	; (80070c8 <_dtoa_r+0x8c8>)
 8006e24:	f7f9 f9a0 	bl	8000168 <__aeabi_dsub>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	4630      	mov	r0, r6
 8006e2e:	4639      	mov	r1, r7
 8006e30:	f7f9 fdc4 	bl	80009bc <__aeabi_dcmplt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f43f af1d 	beq.w	8006c74 <_dtoa_r+0x474>
 8006e3a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006e3c:	1e7b      	subs	r3, r7, #1
 8006e3e:	9314      	str	r3, [sp, #80]	; 0x50
 8006e40:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006e44:	2b30      	cmp	r3, #48	; 0x30
 8006e46:	d0f8      	beq.n	8006e3a <_dtoa_r+0x63a>
 8006e48:	46c2      	mov	sl, r8
 8006e4a:	e03b      	b.n	8006ec4 <_dtoa_r+0x6c4>
 8006e4c:	4b9f      	ldr	r3, [pc, #636]	; (80070cc <_dtoa_r+0x8cc>)
 8006e4e:	f7f9 fb43 	bl	80004d8 <__aeabi_dmul>
 8006e52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e56:	e7bc      	b.n	8006dd2 <_dtoa_r+0x5d2>
 8006e58:	9f03      	ldr	r7, [sp, #12]
 8006e5a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006e5e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e62:	4640      	mov	r0, r8
 8006e64:	4649      	mov	r1, r9
 8006e66:	f7f9 fc61 	bl	800072c <__aeabi_ddiv>
 8006e6a:	f7f9 fde5 	bl	8000a38 <__aeabi_d2iz>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	f7f9 fac8 	bl	8000404 <__aeabi_i2d>
 8006e74:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e78:	f7f9 fb2e 	bl	80004d8 <__aeabi_dmul>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4640      	mov	r0, r8
 8006e82:	4649      	mov	r1, r9
 8006e84:	f7f9 f970 	bl	8000168 <__aeabi_dsub>
 8006e88:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006e8c:	f807 6b01 	strb.w	r6, [r7], #1
 8006e90:	9e03      	ldr	r6, [sp, #12]
 8006e92:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006e96:	1bbe      	subs	r6, r7, r6
 8006e98:	45b4      	cmp	ip, r6
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	d136      	bne.n	8006f0e <_dtoa_r+0x70e>
 8006ea0:	f7f9 f964 	bl	800016c <__adddf3>
 8006ea4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ea8:	4680      	mov	r8, r0
 8006eaa:	4689      	mov	r9, r1
 8006eac:	f7f9 fda4 	bl	80009f8 <__aeabi_dcmpgt>
 8006eb0:	bb58      	cbnz	r0, 8006f0a <_dtoa_r+0x70a>
 8006eb2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4649      	mov	r1, r9
 8006eba:	f7f9 fd75 	bl	80009a8 <__aeabi_dcmpeq>
 8006ebe:	b108      	cbz	r0, 8006ec4 <_dtoa_r+0x6c4>
 8006ec0:	07e1      	lsls	r1, r4, #31
 8006ec2:	d422      	bmi.n	8006f0a <_dtoa_r+0x70a>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	4659      	mov	r1, fp
 8006ec8:	f000 fe68 	bl	8007b9c <_Bfree>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	703b      	strb	r3, [r7, #0]
 8006ed0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006ed2:	f10a 0001 	add.w	r0, sl, #1
 8006ed6:	6018      	str	r0, [r3, #0]
 8006ed8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f43f acde 	beq.w	800689c <_dtoa_r+0x9c>
 8006ee0:	601f      	str	r7, [r3, #0]
 8006ee2:	e4db      	b.n	800689c <_dtoa_r+0x9c>
 8006ee4:	4627      	mov	r7, r4
 8006ee6:	463b      	mov	r3, r7
 8006ee8:	461f      	mov	r7, r3
 8006eea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eee:	2a39      	cmp	r2, #57	; 0x39
 8006ef0:	d107      	bne.n	8006f02 <_dtoa_r+0x702>
 8006ef2:	9a03      	ldr	r2, [sp, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d1f7      	bne.n	8006ee8 <_dtoa_r+0x6e8>
 8006ef8:	2230      	movs	r2, #48	; 0x30
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	f108 0801 	add.w	r8, r8, #1
 8006f00:	700a      	strb	r2, [r1, #0]
 8006f02:	781a      	ldrb	r2, [r3, #0]
 8006f04:	3201      	adds	r2, #1
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	e79e      	b.n	8006e48 <_dtoa_r+0x648>
 8006f0a:	46d0      	mov	r8, sl
 8006f0c:	e7eb      	b.n	8006ee6 <_dtoa_r+0x6e6>
 8006f0e:	2200      	movs	r2, #0
 8006f10:	4b6e      	ldr	r3, [pc, #440]	; (80070cc <_dtoa_r+0x8cc>)
 8006f12:	f7f9 fae1 	bl	80004d8 <__aeabi_dmul>
 8006f16:	2200      	movs	r2, #0
 8006f18:	2300      	movs	r3, #0
 8006f1a:	4680      	mov	r8, r0
 8006f1c:	4689      	mov	r9, r1
 8006f1e:	f7f9 fd43 	bl	80009a8 <__aeabi_dcmpeq>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d09b      	beq.n	8006e5e <_dtoa_r+0x65e>
 8006f26:	e7cd      	b.n	8006ec4 <_dtoa_r+0x6c4>
 8006f28:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f2a:	2a00      	cmp	r2, #0
 8006f2c:	f000 80d0 	beq.w	80070d0 <_dtoa_r+0x8d0>
 8006f30:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006f32:	2a01      	cmp	r2, #1
 8006f34:	f300 80ae 	bgt.w	8007094 <_dtoa_r+0x894>
 8006f38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006f3a:	2a00      	cmp	r2, #0
 8006f3c:	f000 80a6 	beq.w	800708c <_dtoa_r+0x88c>
 8006f40:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006f44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006f46:	9f06      	ldr	r7, [sp, #24]
 8006f48:	9a06      	ldr	r2, [sp, #24]
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	9206      	str	r2, [sp, #24]
 8006f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f52:	4628      	mov	r0, r5
 8006f54:	441a      	add	r2, r3
 8006f56:	9209      	str	r2, [sp, #36]	; 0x24
 8006f58:	f000 ff20 	bl	8007d9c <__i2b>
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	2f00      	cmp	r7, #0
 8006f60:	dd0c      	ble.n	8006f7c <_dtoa_r+0x77c>
 8006f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	dd09      	ble.n	8006f7c <_dtoa_r+0x77c>
 8006f68:	42bb      	cmp	r3, r7
 8006f6a:	bfa8      	it	ge
 8006f6c:	463b      	movge	r3, r7
 8006f6e:	9a06      	ldr	r2, [sp, #24]
 8006f70:	1aff      	subs	r7, r7, r3
 8006f72:	1ad2      	subs	r2, r2, r3
 8006f74:	9206      	str	r2, [sp, #24]
 8006f76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f78:	1ad3      	subs	r3, r2, r3
 8006f7a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f7e:	b1f3      	cbz	r3, 8006fbe <_dtoa_r+0x7be>
 8006f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80a8 	beq.w	80070d8 <_dtoa_r+0x8d8>
 8006f88:	2c00      	cmp	r4, #0
 8006f8a:	dd10      	ble.n	8006fae <_dtoa_r+0x7ae>
 8006f8c:	4631      	mov	r1, r6
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 ffc1 	bl	8007f18 <__pow5mult>
 8006f96:	465a      	mov	r2, fp
 8006f98:	4601      	mov	r1, r0
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f000 ff13 	bl	8007dc8 <__multiply>
 8006fa2:	4680      	mov	r8, r0
 8006fa4:	4659      	mov	r1, fp
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	f000 fdf8 	bl	8007b9c <_Bfree>
 8006fac:	46c3      	mov	fp, r8
 8006fae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fb0:	1b1a      	subs	r2, r3, r4
 8006fb2:	d004      	beq.n	8006fbe <_dtoa_r+0x7be>
 8006fb4:	4659      	mov	r1, fp
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	f000 ffae 	bl	8007f18 <__pow5mult>
 8006fbc:	4683      	mov	fp, r0
 8006fbe:	2101      	movs	r1, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 feeb 	bl	8007d9c <__i2b>
 8006fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006fc8:	4604      	mov	r4, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f340 8086 	ble.w	80070dc <_dtoa_r+0x8dc>
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4601      	mov	r1, r0
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f000 ff9f 	bl	8007f18 <__pow5mult>
 8006fda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	dd7f      	ble.n	80070e2 <_dtoa_r+0x8e2>
 8006fe2:	f04f 0800 	mov.w	r8, #0
 8006fe6:	6923      	ldr	r3, [r4, #16]
 8006fe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fec:	6918      	ldr	r0, [r3, #16]
 8006fee:	f000 fe87 	bl	8007d00 <__hi0bits>
 8006ff2:	f1c0 0020 	rsb	r0, r0, #32
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	4418      	add	r0, r3
 8006ffa:	f010 001f 	ands.w	r0, r0, #31
 8006ffe:	f000 8092 	beq.w	8007126 <_dtoa_r+0x926>
 8007002:	f1c0 0320 	rsb	r3, r0, #32
 8007006:	2b04      	cmp	r3, #4
 8007008:	f340 808a 	ble.w	8007120 <_dtoa_r+0x920>
 800700c:	f1c0 001c 	rsb	r0, r0, #28
 8007010:	9b06      	ldr	r3, [sp, #24]
 8007012:	4407      	add	r7, r0
 8007014:	4403      	add	r3, r0
 8007016:	9306      	str	r3, [sp, #24]
 8007018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701a:	4403      	add	r3, r0
 800701c:	9309      	str	r3, [sp, #36]	; 0x24
 800701e:	9b06      	ldr	r3, [sp, #24]
 8007020:	2b00      	cmp	r3, #0
 8007022:	dd05      	ble.n	8007030 <_dtoa_r+0x830>
 8007024:	4659      	mov	r1, fp
 8007026:	461a      	mov	r2, r3
 8007028:	4628      	mov	r0, r5
 800702a:	f000 ffcf 	bl	8007fcc <__lshift>
 800702e:	4683      	mov	fp, r0
 8007030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007032:	2b00      	cmp	r3, #0
 8007034:	dd05      	ble.n	8007042 <_dtoa_r+0x842>
 8007036:	4621      	mov	r1, r4
 8007038:	461a      	mov	r2, r3
 800703a:	4628      	mov	r0, r5
 800703c:	f000 ffc6 	bl	8007fcc <__lshift>
 8007040:	4604      	mov	r4, r0
 8007042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007044:	2b00      	cmp	r3, #0
 8007046:	d070      	beq.n	800712a <_dtoa_r+0x92a>
 8007048:	4621      	mov	r1, r4
 800704a:	4658      	mov	r0, fp
 800704c:	f001 f82e 	bl	80080ac <__mcmp>
 8007050:	2800      	cmp	r0, #0
 8007052:	da6a      	bge.n	800712a <_dtoa_r+0x92a>
 8007054:	2300      	movs	r3, #0
 8007056:	4659      	mov	r1, fp
 8007058:	220a      	movs	r2, #10
 800705a:	4628      	mov	r0, r5
 800705c:	f000 fdc0 	bl	8007be0 <__multadd>
 8007060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007062:	4683      	mov	fp, r0
 8007064:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8194 	beq.w	8007396 <_dtoa_r+0xb96>
 800706e:	4631      	mov	r1, r6
 8007070:	2300      	movs	r3, #0
 8007072:	220a      	movs	r2, #10
 8007074:	4628      	mov	r0, r5
 8007076:	f000 fdb3 	bl	8007be0 <__multadd>
 800707a:	f1b9 0f00 	cmp.w	r9, #0
 800707e:	4606      	mov	r6, r0
 8007080:	f300 8093 	bgt.w	80071aa <_dtoa_r+0x9aa>
 8007084:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007086:	2b02      	cmp	r3, #2
 8007088:	dc57      	bgt.n	800713a <_dtoa_r+0x93a>
 800708a:	e08e      	b.n	80071aa <_dtoa_r+0x9aa>
 800708c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800708e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007092:	e757      	b.n	8006f44 <_dtoa_r+0x744>
 8007094:	9b08      	ldr	r3, [sp, #32]
 8007096:	1e5c      	subs	r4, r3, #1
 8007098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800709a:	42a3      	cmp	r3, r4
 800709c:	bfb7      	itett	lt
 800709e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80070a0:	1b1c      	subge	r4, r3, r4
 80070a2:	1ae2      	sublt	r2, r4, r3
 80070a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80070a6:	bfbe      	ittt	lt
 80070a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80070aa:	189b      	addlt	r3, r3, r2
 80070ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80070ae:	9b08      	ldr	r3, [sp, #32]
 80070b0:	bfb8      	it	lt
 80070b2:	2400      	movlt	r4, #0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfbb      	ittet	lt
 80070b8:	9b06      	ldrlt	r3, [sp, #24]
 80070ba:	9a08      	ldrlt	r2, [sp, #32]
 80070bc:	9f06      	ldrge	r7, [sp, #24]
 80070be:	1a9f      	sublt	r7, r3, r2
 80070c0:	bfac      	ite	ge
 80070c2:	9b08      	ldrge	r3, [sp, #32]
 80070c4:	2300      	movlt	r3, #0
 80070c6:	e73f      	b.n	8006f48 <_dtoa_r+0x748>
 80070c8:	3fe00000 	.word	0x3fe00000
 80070cc:	40240000 	.word	0x40240000
 80070d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80070d2:	9f06      	ldr	r7, [sp, #24]
 80070d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80070d6:	e742      	b.n	8006f5e <_dtoa_r+0x75e>
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	e76b      	b.n	8006fb4 <_dtoa_r+0x7b4>
 80070dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070de:	2b01      	cmp	r3, #1
 80070e0:	dc19      	bgt.n	8007116 <_dtoa_r+0x916>
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	b9bb      	cbnz	r3, 8007116 <_dtoa_r+0x916>
 80070e6:	9b05      	ldr	r3, [sp, #20]
 80070e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070ec:	b99b      	cbnz	r3, 8007116 <_dtoa_r+0x916>
 80070ee:	9b05      	ldr	r3, [sp, #20]
 80070f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80070f4:	0d1b      	lsrs	r3, r3, #20
 80070f6:	051b      	lsls	r3, r3, #20
 80070f8:	b183      	cbz	r3, 800711c <_dtoa_r+0x91c>
 80070fa:	f04f 0801 	mov.w	r8, #1
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	3301      	adds	r3, #1
 8007102:	9306      	str	r3, [sp, #24]
 8007104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007106:	3301      	adds	r3, #1
 8007108:	9309      	str	r3, [sp, #36]	; 0x24
 800710a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f af6a 	bne.w	8006fe6 <_dtoa_r+0x7e6>
 8007112:	2001      	movs	r0, #1
 8007114:	e76f      	b.n	8006ff6 <_dtoa_r+0x7f6>
 8007116:	f04f 0800 	mov.w	r8, #0
 800711a:	e7f6      	b.n	800710a <_dtoa_r+0x90a>
 800711c:	4698      	mov	r8, r3
 800711e:	e7f4      	b.n	800710a <_dtoa_r+0x90a>
 8007120:	f43f af7d 	beq.w	800701e <_dtoa_r+0x81e>
 8007124:	4618      	mov	r0, r3
 8007126:	301c      	adds	r0, #28
 8007128:	e772      	b.n	8007010 <_dtoa_r+0x810>
 800712a:	9b08      	ldr	r3, [sp, #32]
 800712c:	2b00      	cmp	r3, #0
 800712e:	dc36      	bgt.n	800719e <_dtoa_r+0x99e>
 8007130:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007132:	2b02      	cmp	r3, #2
 8007134:	dd33      	ble.n	800719e <_dtoa_r+0x99e>
 8007136:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800713a:	f1b9 0f00 	cmp.w	r9, #0
 800713e:	d10d      	bne.n	800715c <_dtoa_r+0x95c>
 8007140:	4621      	mov	r1, r4
 8007142:	464b      	mov	r3, r9
 8007144:	2205      	movs	r2, #5
 8007146:	4628      	mov	r0, r5
 8007148:	f000 fd4a 	bl	8007be0 <__multadd>
 800714c:	4601      	mov	r1, r0
 800714e:	4604      	mov	r4, r0
 8007150:	4658      	mov	r0, fp
 8007152:	f000 ffab 	bl	80080ac <__mcmp>
 8007156:	2800      	cmp	r0, #0
 8007158:	f73f adb8 	bgt.w	8006ccc <_dtoa_r+0x4cc>
 800715c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800715e:	9f03      	ldr	r7, [sp, #12]
 8007160:	ea6f 0a03 	mvn.w	sl, r3
 8007164:	f04f 0800 	mov.w	r8, #0
 8007168:	4621      	mov	r1, r4
 800716a:	4628      	mov	r0, r5
 800716c:	f000 fd16 	bl	8007b9c <_Bfree>
 8007170:	2e00      	cmp	r6, #0
 8007172:	f43f aea7 	beq.w	8006ec4 <_dtoa_r+0x6c4>
 8007176:	f1b8 0f00 	cmp.w	r8, #0
 800717a:	d005      	beq.n	8007188 <_dtoa_r+0x988>
 800717c:	45b0      	cmp	r8, r6
 800717e:	d003      	beq.n	8007188 <_dtoa_r+0x988>
 8007180:	4641      	mov	r1, r8
 8007182:	4628      	mov	r0, r5
 8007184:	f000 fd0a 	bl	8007b9c <_Bfree>
 8007188:	4631      	mov	r1, r6
 800718a:	4628      	mov	r0, r5
 800718c:	f000 fd06 	bl	8007b9c <_Bfree>
 8007190:	e698      	b.n	8006ec4 <_dtoa_r+0x6c4>
 8007192:	2400      	movs	r4, #0
 8007194:	4626      	mov	r6, r4
 8007196:	e7e1      	b.n	800715c <_dtoa_r+0x95c>
 8007198:	46c2      	mov	sl, r8
 800719a:	4626      	mov	r6, r4
 800719c:	e596      	b.n	8006ccc <_dtoa_r+0x4cc>
 800719e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80fd 	beq.w	80073a4 <_dtoa_r+0xba4>
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	dd05      	ble.n	80071ba <_dtoa_r+0x9ba>
 80071ae:	4631      	mov	r1, r6
 80071b0:	463a      	mov	r2, r7
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 ff0a 	bl	8007fcc <__lshift>
 80071b8:	4606      	mov	r6, r0
 80071ba:	f1b8 0f00 	cmp.w	r8, #0
 80071be:	d05c      	beq.n	800727a <_dtoa_r+0xa7a>
 80071c0:	4628      	mov	r0, r5
 80071c2:	6871      	ldr	r1, [r6, #4]
 80071c4:	f000 fcaa 	bl	8007b1c <_Balloc>
 80071c8:	4607      	mov	r7, r0
 80071ca:	b928      	cbnz	r0, 80071d8 <_dtoa_r+0x9d8>
 80071cc:	4602      	mov	r2, r0
 80071ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80071d2:	4b7f      	ldr	r3, [pc, #508]	; (80073d0 <_dtoa_r+0xbd0>)
 80071d4:	f7ff bb28 	b.w	8006828 <_dtoa_r+0x28>
 80071d8:	6932      	ldr	r2, [r6, #16]
 80071da:	f106 010c 	add.w	r1, r6, #12
 80071de:	3202      	adds	r2, #2
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	300c      	adds	r0, #12
 80071e4:	f000 fc8c 	bl	8007b00 <memcpy>
 80071e8:	2201      	movs	r2, #1
 80071ea:	4639      	mov	r1, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	f000 feed 	bl	8007fcc <__lshift>
 80071f2:	46b0      	mov	r8, r6
 80071f4:	4606      	mov	r6, r0
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	9308      	str	r3, [sp, #32]
 80071fc:	9b03      	ldr	r3, [sp, #12]
 80071fe:	444b      	add	r3, r9
 8007200:	930a      	str	r3, [sp, #40]	; 0x28
 8007202:	9b04      	ldr	r3, [sp, #16]
 8007204:	f003 0301 	and.w	r3, r3, #1
 8007208:	9309      	str	r3, [sp, #36]	; 0x24
 800720a:	9b08      	ldr	r3, [sp, #32]
 800720c:	4621      	mov	r1, r4
 800720e:	3b01      	subs	r3, #1
 8007210:	4658      	mov	r0, fp
 8007212:	9304      	str	r3, [sp, #16]
 8007214:	f7ff fa68 	bl	80066e8 <quorem>
 8007218:	4603      	mov	r3, r0
 800721a:	4641      	mov	r1, r8
 800721c:	3330      	adds	r3, #48	; 0x30
 800721e:	9006      	str	r0, [sp, #24]
 8007220:	4658      	mov	r0, fp
 8007222:	930b      	str	r3, [sp, #44]	; 0x2c
 8007224:	f000 ff42 	bl	80080ac <__mcmp>
 8007228:	4632      	mov	r2, r6
 800722a:	4681      	mov	r9, r0
 800722c:	4621      	mov	r1, r4
 800722e:	4628      	mov	r0, r5
 8007230:	f000 ff58 	bl	80080e4 <__mdiff>
 8007234:	68c2      	ldr	r2, [r0, #12]
 8007236:	4607      	mov	r7, r0
 8007238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800723a:	bb02      	cbnz	r2, 800727e <_dtoa_r+0xa7e>
 800723c:	4601      	mov	r1, r0
 800723e:	4658      	mov	r0, fp
 8007240:	f000 ff34 	bl	80080ac <__mcmp>
 8007244:	4602      	mov	r2, r0
 8007246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007248:	4639      	mov	r1, r7
 800724a:	4628      	mov	r0, r5
 800724c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8007250:	f000 fca4 	bl	8007b9c <_Bfree>
 8007254:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007258:	9f08      	ldr	r7, [sp, #32]
 800725a:	ea43 0102 	orr.w	r1, r3, r2
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	430b      	orrs	r3, r1
 8007262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007264:	d10d      	bne.n	8007282 <_dtoa_r+0xa82>
 8007266:	2b39      	cmp	r3, #57	; 0x39
 8007268:	d029      	beq.n	80072be <_dtoa_r+0xabe>
 800726a:	f1b9 0f00 	cmp.w	r9, #0
 800726e:	dd01      	ble.n	8007274 <_dtoa_r+0xa74>
 8007270:	9b06      	ldr	r3, [sp, #24]
 8007272:	3331      	adds	r3, #49	; 0x31
 8007274:	9a04      	ldr	r2, [sp, #16]
 8007276:	7013      	strb	r3, [r2, #0]
 8007278:	e776      	b.n	8007168 <_dtoa_r+0x968>
 800727a:	4630      	mov	r0, r6
 800727c:	e7b9      	b.n	80071f2 <_dtoa_r+0x9f2>
 800727e:	2201      	movs	r2, #1
 8007280:	e7e2      	b.n	8007248 <_dtoa_r+0xa48>
 8007282:	f1b9 0f00 	cmp.w	r9, #0
 8007286:	db06      	blt.n	8007296 <_dtoa_r+0xa96>
 8007288:	9922      	ldr	r1, [sp, #136]	; 0x88
 800728a:	ea41 0909 	orr.w	r9, r1, r9
 800728e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007290:	ea59 0101 	orrs.w	r1, r9, r1
 8007294:	d120      	bne.n	80072d8 <_dtoa_r+0xad8>
 8007296:	2a00      	cmp	r2, #0
 8007298:	ddec      	ble.n	8007274 <_dtoa_r+0xa74>
 800729a:	4659      	mov	r1, fp
 800729c:	2201      	movs	r2, #1
 800729e:	4628      	mov	r0, r5
 80072a0:	9308      	str	r3, [sp, #32]
 80072a2:	f000 fe93 	bl	8007fcc <__lshift>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4683      	mov	fp, r0
 80072aa:	f000 feff 	bl	80080ac <__mcmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	9b08      	ldr	r3, [sp, #32]
 80072b2:	dc02      	bgt.n	80072ba <_dtoa_r+0xaba>
 80072b4:	d1de      	bne.n	8007274 <_dtoa_r+0xa74>
 80072b6:	07da      	lsls	r2, r3, #31
 80072b8:	d5dc      	bpl.n	8007274 <_dtoa_r+0xa74>
 80072ba:	2b39      	cmp	r3, #57	; 0x39
 80072bc:	d1d8      	bne.n	8007270 <_dtoa_r+0xa70>
 80072be:	2339      	movs	r3, #57	; 0x39
 80072c0:	9a04      	ldr	r2, [sp, #16]
 80072c2:	7013      	strb	r3, [r2, #0]
 80072c4:	463b      	mov	r3, r7
 80072c6:	461f      	mov	r7, r3
 80072c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80072cc:	3b01      	subs	r3, #1
 80072ce:	2a39      	cmp	r2, #57	; 0x39
 80072d0:	d050      	beq.n	8007374 <_dtoa_r+0xb74>
 80072d2:	3201      	adds	r2, #1
 80072d4:	701a      	strb	r2, [r3, #0]
 80072d6:	e747      	b.n	8007168 <_dtoa_r+0x968>
 80072d8:	2a00      	cmp	r2, #0
 80072da:	dd03      	ble.n	80072e4 <_dtoa_r+0xae4>
 80072dc:	2b39      	cmp	r3, #57	; 0x39
 80072de:	d0ee      	beq.n	80072be <_dtoa_r+0xabe>
 80072e0:	3301      	adds	r3, #1
 80072e2:	e7c7      	b.n	8007274 <_dtoa_r+0xa74>
 80072e4:	9a08      	ldr	r2, [sp, #32]
 80072e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80072e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80072ec:	428a      	cmp	r2, r1
 80072ee:	d02a      	beq.n	8007346 <_dtoa_r+0xb46>
 80072f0:	4659      	mov	r1, fp
 80072f2:	2300      	movs	r3, #0
 80072f4:	220a      	movs	r2, #10
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fc72 	bl	8007be0 <__multadd>
 80072fc:	45b0      	cmp	r8, r6
 80072fe:	4683      	mov	fp, r0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	f04f 020a 	mov.w	r2, #10
 8007308:	4641      	mov	r1, r8
 800730a:	4628      	mov	r0, r5
 800730c:	d107      	bne.n	800731e <_dtoa_r+0xb1e>
 800730e:	f000 fc67 	bl	8007be0 <__multadd>
 8007312:	4680      	mov	r8, r0
 8007314:	4606      	mov	r6, r0
 8007316:	9b08      	ldr	r3, [sp, #32]
 8007318:	3301      	adds	r3, #1
 800731a:	9308      	str	r3, [sp, #32]
 800731c:	e775      	b.n	800720a <_dtoa_r+0xa0a>
 800731e:	f000 fc5f 	bl	8007be0 <__multadd>
 8007322:	4631      	mov	r1, r6
 8007324:	4680      	mov	r8, r0
 8007326:	2300      	movs	r3, #0
 8007328:	220a      	movs	r2, #10
 800732a:	4628      	mov	r0, r5
 800732c:	f000 fc58 	bl	8007be0 <__multadd>
 8007330:	4606      	mov	r6, r0
 8007332:	e7f0      	b.n	8007316 <_dtoa_r+0xb16>
 8007334:	f1b9 0f00 	cmp.w	r9, #0
 8007338:	bfcc      	ite	gt
 800733a:	464f      	movgt	r7, r9
 800733c:	2701      	movle	r7, #1
 800733e:	f04f 0800 	mov.w	r8, #0
 8007342:	9a03      	ldr	r2, [sp, #12]
 8007344:	4417      	add	r7, r2
 8007346:	4659      	mov	r1, fp
 8007348:	2201      	movs	r2, #1
 800734a:	4628      	mov	r0, r5
 800734c:	9308      	str	r3, [sp, #32]
 800734e:	f000 fe3d 	bl	8007fcc <__lshift>
 8007352:	4621      	mov	r1, r4
 8007354:	4683      	mov	fp, r0
 8007356:	f000 fea9 	bl	80080ac <__mcmp>
 800735a:	2800      	cmp	r0, #0
 800735c:	dcb2      	bgt.n	80072c4 <_dtoa_r+0xac4>
 800735e:	d102      	bne.n	8007366 <_dtoa_r+0xb66>
 8007360:	9b08      	ldr	r3, [sp, #32]
 8007362:	07db      	lsls	r3, r3, #31
 8007364:	d4ae      	bmi.n	80072c4 <_dtoa_r+0xac4>
 8007366:	463b      	mov	r3, r7
 8007368:	461f      	mov	r7, r3
 800736a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800736e:	2a30      	cmp	r2, #48	; 0x30
 8007370:	d0fa      	beq.n	8007368 <_dtoa_r+0xb68>
 8007372:	e6f9      	b.n	8007168 <_dtoa_r+0x968>
 8007374:	9a03      	ldr	r2, [sp, #12]
 8007376:	429a      	cmp	r2, r3
 8007378:	d1a5      	bne.n	80072c6 <_dtoa_r+0xac6>
 800737a:	2331      	movs	r3, #49	; 0x31
 800737c:	f10a 0a01 	add.w	sl, sl, #1
 8007380:	e779      	b.n	8007276 <_dtoa_r+0xa76>
 8007382:	4b14      	ldr	r3, [pc, #80]	; (80073d4 <_dtoa_r+0xbd4>)
 8007384:	f7ff baa8 	b.w	80068d8 <_dtoa_r+0xd8>
 8007388:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800738a:	2b00      	cmp	r3, #0
 800738c:	f47f aa81 	bne.w	8006892 <_dtoa_r+0x92>
 8007390:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <_dtoa_r+0xbd8>)
 8007392:	f7ff baa1 	b.w	80068d8 <_dtoa_r+0xd8>
 8007396:	f1b9 0f00 	cmp.w	r9, #0
 800739a:	dc03      	bgt.n	80073a4 <_dtoa_r+0xba4>
 800739c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800739e:	2b02      	cmp	r3, #2
 80073a0:	f73f aecb 	bgt.w	800713a <_dtoa_r+0x93a>
 80073a4:	9f03      	ldr	r7, [sp, #12]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4658      	mov	r0, fp
 80073aa:	f7ff f99d 	bl	80066e8 <quorem>
 80073ae:	9a03      	ldr	r2, [sp, #12]
 80073b0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80073b4:	f807 3b01 	strb.w	r3, [r7], #1
 80073b8:	1aba      	subs	r2, r7, r2
 80073ba:	4591      	cmp	r9, r2
 80073bc:	ddba      	ble.n	8007334 <_dtoa_r+0xb34>
 80073be:	4659      	mov	r1, fp
 80073c0:	2300      	movs	r3, #0
 80073c2:	220a      	movs	r2, #10
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 fc0b 	bl	8007be0 <__multadd>
 80073ca:	4683      	mov	fp, r0
 80073cc:	e7eb      	b.n	80073a6 <_dtoa_r+0xba6>
 80073ce:	bf00      	nop
 80073d0:	080099f8 	.word	0x080099f8
 80073d4:	080097fc 	.word	0x080097fc
 80073d8:	08009979 	.word	0x08009979

080073dc <rshift>:
 80073dc:	6903      	ldr	r3, [r0, #16]
 80073de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073e6:	f100 0414 	add.w	r4, r0, #20
 80073ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073ee:	dd46      	ble.n	800747e <rshift+0xa2>
 80073f0:	f011 011f 	ands.w	r1, r1, #31
 80073f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073fc:	d10c      	bne.n	8007418 <rshift+0x3c>
 80073fe:	4629      	mov	r1, r5
 8007400:	f100 0710 	add.w	r7, r0, #16
 8007404:	42b1      	cmp	r1, r6
 8007406:	d335      	bcc.n	8007474 <rshift+0x98>
 8007408:	1a9b      	subs	r3, r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	1eea      	subs	r2, r5, #3
 800740e:	4296      	cmp	r6, r2
 8007410:	bf38      	it	cc
 8007412:	2300      	movcc	r3, #0
 8007414:	4423      	add	r3, r4
 8007416:	e015      	b.n	8007444 <rshift+0x68>
 8007418:	46a1      	mov	r9, r4
 800741a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800741e:	f1c1 0820 	rsb	r8, r1, #32
 8007422:	40cf      	lsrs	r7, r1
 8007424:	f105 0e04 	add.w	lr, r5, #4
 8007428:	4576      	cmp	r6, lr
 800742a:	46f4      	mov	ip, lr
 800742c:	d816      	bhi.n	800745c <rshift+0x80>
 800742e:	1a9a      	subs	r2, r3, r2
 8007430:	0092      	lsls	r2, r2, #2
 8007432:	3a04      	subs	r2, #4
 8007434:	3501      	adds	r5, #1
 8007436:	42ae      	cmp	r6, r5
 8007438:	bf38      	it	cc
 800743a:	2200      	movcc	r2, #0
 800743c:	18a3      	adds	r3, r4, r2
 800743e:	50a7      	str	r7, [r4, r2]
 8007440:	b107      	cbz	r7, 8007444 <rshift+0x68>
 8007442:	3304      	adds	r3, #4
 8007444:	42a3      	cmp	r3, r4
 8007446:	eba3 0204 	sub.w	r2, r3, r4
 800744a:	bf08      	it	eq
 800744c:	2300      	moveq	r3, #0
 800744e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007452:	6102      	str	r2, [r0, #16]
 8007454:	bf08      	it	eq
 8007456:	6143      	streq	r3, [r0, #20]
 8007458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800745c:	f8dc c000 	ldr.w	ip, [ip]
 8007460:	fa0c fc08 	lsl.w	ip, ip, r8
 8007464:	ea4c 0707 	orr.w	r7, ip, r7
 8007468:	f849 7b04 	str.w	r7, [r9], #4
 800746c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007470:	40cf      	lsrs	r7, r1
 8007472:	e7d9      	b.n	8007428 <rshift+0x4c>
 8007474:	f851 cb04 	ldr.w	ip, [r1], #4
 8007478:	f847 cf04 	str.w	ip, [r7, #4]!
 800747c:	e7c2      	b.n	8007404 <rshift+0x28>
 800747e:	4623      	mov	r3, r4
 8007480:	e7e0      	b.n	8007444 <rshift+0x68>

08007482 <__hexdig_fun>:
 8007482:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007486:	2b09      	cmp	r3, #9
 8007488:	d802      	bhi.n	8007490 <__hexdig_fun+0xe>
 800748a:	3820      	subs	r0, #32
 800748c:	b2c0      	uxtb	r0, r0
 800748e:	4770      	bx	lr
 8007490:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007494:	2b05      	cmp	r3, #5
 8007496:	d801      	bhi.n	800749c <__hexdig_fun+0x1a>
 8007498:	3847      	subs	r0, #71	; 0x47
 800749a:	e7f7      	b.n	800748c <__hexdig_fun+0xa>
 800749c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074a0:	2b05      	cmp	r3, #5
 80074a2:	d801      	bhi.n	80074a8 <__hexdig_fun+0x26>
 80074a4:	3827      	subs	r0, #39	; 0x27
 80074a6:	e7f1      	b.n	800748c <__hexdig_fun+0xa>
 80074a8:	2000      	movs	r0, #0
 80074aa:	4770      	bx	lr

080074ac <__gethex>:
 80074ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b0:	b08b      	sub	sp, #44	; 0x2c
 80074b2:	9305      	str	r3, [sp, #20]
 80074b4:	4bb2      	ldr	r3, [pc, #712]	; (8007780 <__gethex+0x2d4>)
 80074b6:	9002      	str	r0, [sp, #8]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	468b      	mov	fp, r1
 80074bc:	4618      	mov	r0, r3
 80074be:	4690      	mov	r8, r2
 80074c0:	9303      	str	r3, [sp, #12]
 80074c2:	f7f8 fe45 	bl	8000150 <strlen>
 80074c6:	4682      	mov	sl, r0
 80074c8:	9b03      	ldr	r3, [sp, #12]
 80074ca:	f8db 2000 	ldr.w	r2, [fp]
 80074ce:	4403      	add	r3, r0
 80074d0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074d4:	9306      	str	r3, [sp, #24]
 80074d6:	1c93      	adds	r3, r2, #2
 80074d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80074dc:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80074e0:	32fe      	adds	r2, #254	; 0xfe
 80074e2:	18d1      	adds	r1, r2, r3
 80074e4:	461f      	mov	r7, r3
 80074e6:	f813 0b01 	ldrb.w	r0, [r3], #1
 80074ea:	9101      	str	r1, [sp, #4]
 80074ec:	2830      	cmp	r0, #48	; 0x30
 80074ee:	d0f8      	beq.n	80074e2 <__gethex+0x36>
 80074f0:	f7ff ffc7 	bl	8007482 <__hexdig_fun>
 80074f4:	4604      	mov	r4, r0
 80074f6:	2800      	cmp	r0, #0
 80074f8:	d13a      	bne.n	8007570 <__gethex+0xc4>
 80074fa:	4652      	mov	r2, sl
 80074fc:	4638      	mov	r0, r7
 80074fe:	9903      	ldr	r1, [sp, #12]
 8007500:	f001 fa26 	bl	8008950 <strncmp>
 8007504:	4605      	mov	r5, r0
 8007506:	2800      	cmp	r0, #0
 8007508:	d166      	bne.n	80075d8 <__gethex+0x12c>
 800750a:	f817 000a 	ldrb.w	r0, [r7, sl]
 800750e:	eb07 060a 	add.w	r6, r7, sl
 8007512:	f7ff ffb6 	bl	8007482 <__hexdig_fun>
 8007516:	2800      	cmp	r0, #0
 8007518:	d060      	beq.n	80075dc <__gethex+0x130>
 800751a:	4633      	mov	r3, r6
 800751c:	7818      	ldrb	r0, [r3, #0]
 800751e:	461f      	mov	r7, r3
 8007520:	2830      	cmp	r0, #48	; 0x30
 8007522:	f103 0301 	add.w	r3, r3, #1
 8007526:	d0f9      	beq.n	800751c <__gethex+0x70>
 8007528:	f7ff ffab 	bl	8007482 <__hexdig_fun>
 800752c:	2301      	movs	r3, #1
 800752e:	fab0 f480 	clz	r4, r0
 8007532:	4635      	mov	r5, r6
 8007534:	0964      	lsrs	r4, r4, #5
 8007536:	9301      	str	r3, [sp, #4]
 8007538:	463a      	mov	r2, r7
 800753a:	4616      	mov	r6, r2
 800753c:	7830      	ldrb	r0, [r6, #0]
 800753e:	3201      	adds	r2, #1
 8007540:	f7ff ff9f 	bl	8007482 <__hexdig_fun>
 8007544:	2800      	cmp	r0, #0
 8007546:	d1f8      	bne.n	800753a <__gethex+0x8e>
 8007548:	4652      	mov	r2, sl
 800754a:	4630      	mov	r0, r6
 800754c:	9903      	ldr	r1, [sp, #12]
 800754e:	f001 f9ff 	bl	8008950 <strncmp>
 8007552:	b980      	cbnz	r0, 8007576 <__gethex+0xca>
 8007554:	b94d      	cbnz	r5, 800756a <__gethex+0xbe>
 8007556:	eb06 050a 	add.w	r5, r6, sl
 800755a:	462a      	mov	r2, r5
 800755c:	4616      	mov	r6, r2
 800755e:	7830      	ldrb	r0, [r6, #0]
 8007560:	3201      	adds	r2, #1
 8007562:	f7ff ff8e 	bl	8007482 <__hexdig_fun>
 8007566:	2800      	cmp	r0, #0
 8007568:	d1f8      	bne.n	800755c <__gethex+0xb0>
 800756a:	1bad      	subs	r5, r5, r6
 800756c:	00ad      	lsls	r5, r5, #2
 800756e:	e004      	b.n	800757a <__gethex+0xce>
 8007570:	2400      	movs	r4, #0
 8007572:	4625      	mov	r5, r4
 8007574:	e7e0      	b.n	8007538 <__gethex+0x8c>
 8007576:	2d00      	cmp	r5, #0
 8007578:	d1f7      	bne.n	800756a <__gethex+0xbe>
 800757a:	7833      	ldrb	r3, [r6, #0]
 800757c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007580:	2b50      	cmp	r3, #80	; 0x50
 8007582:	d139      	bne.n	80075f8 <__gethex+0x14c>
 8007584:	7873      	ldrb	r3, [r6, #1]
 8007586:	2b2b      	cmp	r3, #43	; 0x2b
 8007588:	d02a      	beq.n	80075e0 <__gethex+0x134>
 800758a:	2b2d      	cmp	r3, #45	; 0x2d
 800758c:	d02c      	beq.n	80075e8 <__gethex+0x13c>
 800758e:	f04f 0900 	mov.w	r9, #0
 8007592:	1c71      	adds	r1, r6, #1
 8007594:	7808      	ldrb	r0, [r1, #0]
 8007596:	f7ff ff74 	bl	8007482 <__hexdig_fun>
 800759a:	1e43      	subs	r3, r0, #1
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b18      	cmp	r3, #24
 80075a0:	d82a      	bhi.n	80075f8 <__gethex+0x14c>
 80075a2:	f1a0 0210 	sub.w	r2, r0, #16
 80075a6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075aa:	f7ff ff6a 	bl	8007482 <__hexdig_fun>
 80075ae:	1e43      	subs	r3, r0, #1
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b18      	cmp	r3, #24
 80075b4:	d91b      	bls.n	80075ee <__gethex+0x142>
 80075b6:	f1b9 0f00 	cmp.w	r9, #0
 80075ba:	d000      	beq.n	80075be <__gethex+0x112>
 80075bc:	4252      	negs	r2, r2
 80075be:	4415      	add	r5, r2
 80075c0:	f8cb 1000 	str.w	r1, [fp]
 80075c4:	b1d4      	cbz	r4, 80075fc <__gethex+0x150>
 80075c6:	9b01      	ldr	r3, [sp, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf14      	ite	ne
 80075cc:	2700      	movne	r7, #0
 80075ce:	2706      	moveq	r7, #6
 80075d0:	4638      	mov	r0, r7
 80075d2:	b00b      	add	sp, #44	; 0x2c
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	463e      	mov	r6, r7
 80075da:	4625      	mov	r5, r4
 80075dc:	2401      	movs	r4, #1
 80075de:	e7cc      	b.n	800757a <__gethex+0xce>
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	1cb1      	adds	r1, r6, #2
 80075e6:	e7d5      	b.n	8007594 <__gethex+0xe8>
 80075e8:	f04f 0901 	mov.w	r9, #1
 80075ec:	e7fa      	b.n	80075e4 <__gethex+0x138>
 80075ee:	230a      	movs	r3, #10
 80075f0:	fb03 0202 	mla	r2, r3, r2, r0
 80075f4:	3a10      	subs	r2, #16
 80075f6:	e7d6      	b.n	80075a6 <__gethex+0xfa>
 80075f8:	4631      	mov	r1, r6
 80075fa:	e7e1      	b.n	80075c0 <__gethex+0x114>
 80075fc:	4621      	mov	r1, r4
 80075fe:	1bf3      	subs	r3, r6, r7
 8007600:	3b01      	subs	r3, #1
 8007602:	2b07      	cmp	r3, #7
 8007604:	dc0a      	bgt.n	800761c <__gethex+0x170>
 8007606:	9802      	ldr	r0, [sp, #8]
 8007608:	f000 fa88 	bl	8007b1c <_Balloc>
 800760c:	4604      	mov	r4, r0
 800760e:	b940      	cbnz	r0, 8007622 <__gethex+0x176>
 8007610:	4602      	mov	r2, r0
 8007612:	21de      	movs	r1, #222	; 0xde
 8007614:	4b5b      	ldr	r3, [pc, #364]	; (8007784 <__gethex+0x2d8>)
 8007616:	485c      	ldr	r0, [pc, #368]	; (8007788 <__gethex+0x2dc>)
 8007618:	f001 f9bc 	bl	8008994 <__assert_func>
 800761c:	3101      	adds	r1, #1
 800761e:	105b      	asrs	r3, r3, #1
 8007620:	e7ef      	b.n	8007602 <__gethex+0x156>
 8007622:	f04f 0b00 	mov.w	fp, #0
 8007626:	f100 0914 	add.w	r9, r0, #20
 800762a:	f1ca 0301 	rsb	r3, sl, #1
 800762e:	f8cd 9010 	str.w	r9, [sp, #16]
 8007632:	f8cd b004 	str.w	fp, [sp, #4]
 8007636:	9308      	str	r3, [sp, #32]
 8007638:	42b7      	cmp	r7, r6
 800763a:	d33f      	bcc.n	80076bc <__gethex+0x210>
 800763c:	9f04      	ldr	r7, [sp, #16]
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	f847 3b04 	str.w	r3, [r7], #4
 8007644:	eba7 0709 	sub.w	r7, r7, r9
 8007648:	10bf      	asrs	r7, r7, #2
 800764a:	6127      	str	r7, [r4, #16]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb57 	bl	8007d00 <__hi0bits>
 8007652:	017f      	lsls	r7, r7, #5
 8007654:	f8d8 6000 	ldr.w	r6, [r8]
 8007658:	1a3f      	subs	r7, r7, r0
 800765a:	42b7      	cmp	r7, r6
 800765c:	dd62      	ble.n	8007724 <__gethex+0x278>
 800765e:	1bbf      	subs	r7, r7, r6
 8007660:	4639      	mov	r1, r7
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fef1 	bl	800844a <__any_on>
 8007668:	4682      	mov	sl, r0
 800766a:	b1a8      	cbz	r0, 8007698 <__gethex+0x1ec>
 800766c:	f04f 0a01 	mov.w	sl, #1
 8007670:	1e7b      	subs	r3, r7, #1
 8007672:	1159      	asrs	r1, r3, #5
 8007674:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007678:	f003 021f 	and.w	r2, r3, #31
 800767c:	fa0a f202 	lsl.w	r2, sl, r2
 8007680:	420a      	tst	r2, r1
 8007682:	d009      	beq.n	8007698 <__gethex+0x1ec>
 8007684:	4553      	cmp	r3, sl
 8007686:	dd05      	ble.n	8007694 <__gethex+0x1e8>
 8007688:	4620      	mov	r0, r4
 800768a:	1eb9      	subs	r1, r7, #2
 800768c:	f000 fedd 	bl	800844a <__any_on>
 8007690:	2800      	cmp	r0, #0
 8007692:	d144      	bne.n	800771e <__gethex+0x272>
 8007694:	f04f 0a02 	mov.w	sl, #2
 8007698:	4639      	mov	r1, r7
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff fe9e 	bl	80073dc <rshift>
 80076a0:	443d      	add	r5, r7
 80076a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076a6:	42ab      	cmp	r3, r5
 80076a8:	da4a      	bge.n	8007740 <__gethex+0x294>
 80076aa:	4621      	mov	r1, r4
 80076ac:	9802      	ldr	r0, [sp, #8]
 80076ae:	f000 fa75 	bl	8007b9c <_Bfree>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076b6:	27a3      	movs	r7, #163	; 0xa3
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e789      	b.n	80075d0 <__gethex+0x124>
 80076bc:	1e73      	subs	r3, r6, #1
 80076be:	9a06      	ldr	r2, [sp, #24]
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d019      	beq.n	80076fe <__gethex+0x252>
 80076ca:	f1bb 0f20 	cmp.w	fp, #32
 80076ce:	d107      	bne.n	80076e0 <__gethex+0x234>
 80076d0:	9b04      	ldr	r3, [sp, #16]
 80076d2:	9a01      	ldr	r2, [sp, #4]
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	2300      	movs	r3, #0
 80076dc:	469b      	mov	fp, r3
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80076e4:	f7ff fecd 	bl	8007482 <__hexdig_fun>
 80076e8:	9b01      	ldr	r3, [sp, #4]
 80076ea:	f000 000f 	and.w	r0, r0, #15
 80076ee:	fa00 f00b 	lsl.w	r0, r0, fp
 80076f2:	4303      	orrs	r3, r0
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f10b 0b04 	add.w	fp, fp, #4
 80076fa:	9b07      	ldr	r3, [sp, #28]
 80076fc:	e00d      	b.n	800771a <__gethex+0x26e>
 80076fe:	9a08      	ldr	r2, [sp, #32]
 8007700:	1e73      	subs	r3, r6, #1
 8007702:	4413      	add	r3, r2
 8007704:	42bb      	cmp	r3, r7
 8007706:	d3e0      	bcc.n	80076ca <__gethex+0x21e>
 8007708:	4618      	mov	r0, r3
 800770a:	4652      	mov	r2, sl
 800770c:	9903      	ldr	r1, [sp, #12]
 800770e:	9309      	str	r3, [sp, #36]	; 0x24
 8007710:	f001 f91e 	bl	8008950 <strncmp>
 8007714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007716:	2800      	cmp	r0, #0
 8007718:	d1d7      	bne.n	80076ca <__gethex+0x21e>
 800771a:	461e      	mov	r6, r3
 800771c:	e78c      	b.n	8007638 <__gethex+0x18c>
 800771e:	f04f 0a03 	mov.w	sl, #3
 8007722:	e7b9      	b.n	8007698 <__gethex+0x1ec>
 8007724:	da09      	bge.n	800773a <__gethex+0x28e>
 8007726:	1bf7      	subs	r7, r6, r7
 8007728:	4621      	mov	r1, r4
 800772a:	463a      	mov	r2, r7
 800772c:	9802      	ldr	r0, [sp, #8]
 800772e:	f000 fc4d 	bl	8007fcc <__lshift>
 8007732:	4604      	mov	r4, r0
 8007734:	1bed      	subs	r5, r5, r7
 8007736:	f100 0914 	add.w	r9, r0, #20
 800773a:	f04f 0a00 	mov.w	sl, #0
 800773e:	e7b0      	b.n	80076a2 <__gethex+0x1f6>
 8007740:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007744:	42a8      	cmp	r0, r5
 8007746:	dd72      	ble.n	800782e <__gethex+0x382>
 8007748:	1b45      	subs	r5, r0, r5
 800774a:	42ae      	cmp	r6, r5
 800774c:	dc35      	bgt.n	80077ba <__gethex+0x30e>
 800774e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007752:	2b02      	cmp	r3, #2
 8007754:	d029      	beq.n	80077aa <__gethex+0x2fe>
 8007756:	2b03      	cmp	r3, #3
 8007758:	d02b      	beq.n	80077b2 <__gethex+0x306>
 800775a:	2b01      	cmp	r3, #1
 800775c:	d11c      	bne.n	8007798 <__gethex+0x2ec>
 800775e:	42ae      	cmp	r6, r5
 8007760:	d11a      	bne.n	8007798 <__gethex+0x2ec>
 8007762:	2e01      	cmp	r6, #1
 8007764:	d112      	bne.n	800778c <__gethex+0x2e0>
 8007766:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800776a:	9a05      	ldr	r2, [sp, #20]
 800776c:	2762      	movs	r7, #98	; 0x62
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	2301      	movs	r3, #1
 8007772:	6123      	str	r3, [r4, #16]
 8007774:	f8c9 3000 	str.w	r3, [r9]
 8007778:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800777a:	601c      	str	r4, [r3, #0]
 800777c:	e728      	b.n	80075d0 <__gethex+0x124>
 800777e:	bf00      	nop
 8007780:	08009a70 	.word	0x08009a70
 8007784:	080099f8 	.word	0x080099f8
 8007788:	08009a09 	.word	0x08009a09
 800778c:	4620      	mov	r0, r4
 800778e:	1e71      	subs	r1, r6, #1
 8007790:	f000 fe5b 	bl	800844a <__any_on>
 8007794:	2800      	cmp	r0, #0
 8007796:	d1e6      	bne.n	8007766 <__gethex+0x2ba>
 8007798:	4621      	mov	r1, r4
 800779a:	9802      	ldr	r0, [sp, #8]
 800779c:	f000 f9fe 	bl	8007b9c <_Bfree>
 80077a0:	2300      	movs	r3, #0
 80077a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077a4:	2750      	movs	r7, #80	; 0x50
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	e712      	b.n	80075d0 <__gethex+0x124>
 80077aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f3      	bne.n	8007798 <__gethex+0x2ec>
 80077b0:	e7d9      	b.n	8007766 <__gethex+0x2ba>
 80077b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1d6      	bne.n	8007766 <__gethex+0x2ba>
 80077b8:	e7ee      	b.n	8007798 <__gethex+0x2ec>
 80077ba:	1e6f      	subs	r7, r5, #1
 80077bc:	f1ba 0f00 	cmp.w	sl, #0
 80077c0:	d132      	bne.n	8007828 <__gethex+0x37c>
 80077c2:	b127      	cbz	r7, 80077ce <__gethex+0x322>
 80077c4:	4639      	mov	r1, r7
 80077c6:	4620      	mov	r0, r4
 80077c8:	f000 fe3f 	bl	800844a <__any_on>
 80077cc:	4682      	mov	sl, r0
 80077ce:	2101      	movs	r1, #1
 80077d0:	117b      	asrs	r3, r7, #5
 80077d2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80077d6:	f007 071f 	and.w	r7, r7, #31
 80077da:	fa01 f707 	lsl.w	r7, r1, r7
 80077de:	421f      	tst	r7, r3
 80077e0:	f04f 0702 	mov.w	r7, #2
 80077e4:	4629      	mov	r1, r5
 80077e6:	4620      	mov	r0, r4
 80077e8:	bf18      	it	ne
 80077ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80077ee:	1b76      	subs	r6, r6, r5
 80077f0:	f7ff fdf4 	bl	80073dc <rshift>
 80077f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80077f8:	f1ba 0f00 	cmp.w	sl, #0
 80077fc:	d048      	beq.n	8007890 <__gethex+0x3e4>
 80077fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007802:	2b02      	cmp	r3, #2
 8007804:	d015      	beq.n	8007832 <__gethex+0x386>
 8007806:	2b03      	cmp	r3, #3
 8007808:	d017      	beq.n	800783a <__gethex+0x38e>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d109      	bne.n	8007822 <__gethex+0x376>
 800780e:	f01a 0f02 	tst.w	sl, #2
 8007812:	d006      	beq.n	8007822 <__gethex+0x376>
 8007814:	f8d9 0000 	ldr.w	r0, [r9]
 8007818:	ea4a 0a00 	orr.w	sl, sl, r0
 800781c:	f01a 0f01 	tst.w	sl, #1
 8007820:	d10e      	bne.n	8007840 <__gethex+0x394>
 8007822:	f047 0710 	orr.w	r7, r7, #16
 8007826:	e033      	b.n	8007890 <__gethex+0x3e4>
 8007828:	f04f 0a01 	mov.w	sl, #1
 800782c:	e7cf      	b.n	80077ce <__gethex+0x322>
 800782e:	2701      	movs	r7, #1
 8007830:	e7e2      	b.n	80077f8 <__gethex+0x34c>
 8007832:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007834:	f1c3 0301 	rsb	r3, r3, #1
 8007838:	9315      	str	r3, [sp, #84]	; 0x54
 800783a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800783c:	2b00      	cmp	r3, #0
 800783e:	d0f0      	beq.n	8007822 <__gethex+0x376>
 8007840:	f04f 0c00 	mov.w	ip, #0
 8007844:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007848:	f104 0314 	add.w	r3, r4, #20
 800784c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007850:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007854:	4618      	mov	r0, r3
 8007856:	f853 2b04 	ldr.w	r2, [r3], #4
 800785a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800785e:	d01c      	beq.n	800789a <__gethex+0x3ee>
 8007860:	3201      	adds	r2, #1
 8007862:	6002      	str	r2, [r0, #0]
 8007864:	2f02      	cmp	r7, #2
 8007866:	f104 0314 	add.w	r3, r4, #20
 800786a:	d13d      	bne.n	80078e8 <__gethex+0x43c>
 800786c:	f8d8 2000 	ldr.w	r2, [r8]
 8007870:	3a01      	subs	r2, #1
 8007872:	42b2      	cmp	r2, r6
 8007874:	d10a      	bne.n	800788c <__gethex+0x3e0>
 8007876:	2201      	movs	r2, #1
 8007878:	1171      	asrs	r1, r6, #5
 800787a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800787e:	f006 061f 	and.w	r6, r6, #31
 8007882:	fa02 f606 	lsl.w	r6, r2, r6
 8007886:	421e      	tst	r6, r3
 8007888:	bf18      	it	ne
 800788a:	4617      	movne	r7, r2
 800788c:	f047 0720 	orr.w	r7, r7, #32
 8007890:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007892:	601c      	str	r4, [r3, #0]
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	601d      	str	r5, [r3, #0]
 8007898:	e69a      	b.n	80075d0 <__gethex+0x124>
 800789a:	4299      	cmp	r1, r3
 800789c:	f843 cc04 	str.w	ip, [r3, #-4]
 80078a0:	d8d8      	bhi.n	8007854 <__gethex+0x3a8>
 80078a2:	68a3      	ldr	r3, [r4, #8]
 80078a4:	459b      	cmp	fp, r3
 80078a6:	db17      	blt.n	80078d8 <__gethex+0x42c>
 80078a8:	6861      	ldr	r1, [r4, #4]
 80078aa:	9802      	ldr	r0, [sp, #8]
 80078ac:	3101      	adds	r1, #1
 80078ae:	f000 f935 	bl	8007b1c <_Balloc>
 80078b2:	4681      	mov	r9, r0
 80078b4:	b918      	cbnz	r0, 80078be <__gethex+0x412>
 80078b6:	4602      	mov	r2, r0
 80078b8:	2184      	movs	r1, #132	; 0x84
 80078ba:	4b19      	ldr	r3, [pc, #100]	; (8007920 <__gethex+0x474>)
 80078bc:	e6ab      	b.n	8007616 <__gethex+0x16a>
 80078be:	6922      	ldr	r2, [r4, #16]
 80078c0:	f104 010c 	add.w	r1, r4, #12
 80078c4:	3202      	adds	r2, #2
 80078c6:	0092      	lsls	r2, r2, #2
 80078c8:	300c      	adds	r0, #12
 80078ca:	f000 f919 	bl	8007b00 <memcpy>
 80078ce:	4621      	mov	r1, r4
 80078d0:	9802      	ldr	r0, [sp, #8]
 80078d2:	f000 f963 	bl	8007b9c <_Bfree>
 80078d6:	464c      	mov	r4, r9
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	1c5a      	adds	r2, r3, #1
 80078dc:	6122      	str	r2, [r4, #16]
 80078de:	2201      	movs	r2, #1
 80078e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078e4:	615a      	str	r2, [r3, #20]
 80078e6:	e7bd      	b.n	8007864 <__gethex+0x3b8>
 80078e8:	6922      	ldr	r2, [r4, #16]
 80078ea:	455a      	cmp	r2, fp
 80078ec:	dd0b      	ble.n	8007906 <__gethex+0x45a>
 80078ee:	2101      	movs	r1, #1
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff fd73 	bl	80073dc <rshift>
 80078f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078fa:	3501      	adds	r5, #1
 80078fc:	42ab      	cmp	r3, r5
 80078fe:	f6ff aed4 	blt.w	80076aa <__gethex+0x1fe>
 8007902:	2701      	movs	r7, #1
 8007904:	e7c2      	b.n	800788c <__gethex+0x3e0>
 8007906:	f016 061f 	ands.w	r6, r6, #31
 800790a:	d0fa      	beq.n	8007902 <__gethex+0x456>
 800790c:	4453      	add	r3, sl
 800790e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007912:	f000 f9f5 	bl	8007d00 <__hi0bits>
 8007916:	f1c6 0620 	rsb	r6, r6, #32
 800791a:	42b0      	cmp	r0, r6
 800791c:	dbe7      	blt.n	80078ee <__gethex+0x442>
 800791e:	e7f0      	b.n	8007902 <__gethex+0x456>
 8007920:	080099f8 	.word	0x080099f8

08007924 <L_shift>:
 8007924:	f1c2 0208 	rsb	r2, r2, #8
 8007928:	0092      	lsls	r2, r2, #2
 800792a:	b570      	push	{r4, r5, r6, lr}
 800792c:	f1c2 0620 	rsb	r6, r2, #32
 8007930:	6843      	ldr	r3, [r0, #4]
 8007932:	6804      	ldr	r4, [r0, #0]
 8007934:	fa03 f506 	lsl.w	r5, r3, r6
 8007938:	432c      	orrs	r4, r5
 800793a:	40d3      	lsrs	r3, r2
 800793c:	6004      	str	r4, [r0, #0]
 800793e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007942:	4288      	cmp	r0, r1
 8007944:	d3f4      	bcc.n	8007930 <L_shift+0xc>
 8007946:	bd70      	pop	{r4, r5, r6, pc}

08007948 <__match>:
 8007948:	b530      	push	{r4, r5, lr}
 800794a:	6803      	ldr	r3, [r0, #0]
 800794c:	3301      	adds	r3, #1
 800794e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007952:	b914      	cbnz	r4, 800795a <__match+0x12>
 8007954:	6003      	str	r3, [r0, #0]
 8007956:	2001      	movs	r0, #1
 8007958:	bd30      	pop	{r4, r5, pc}
 800795a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800795e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007962:	2d19      	cmp	r5, #25
 8007964:	bf98      	it	ls
 8007966:	3220      	addls	r2, #32
 8007968:	42a2      	cmp	r2, r4
 800796a:	d0f0      	beq.n	800794e <__match+0x6>
 800796c:	2000      	movs	r0, #0
 800796e:	e7f3      	b.n	8007958 <__match+0x10>

08007970 <__hexnan>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	2500      	movs	r5, #0
 8007976:	680b      	ldr	r3, [r1, #0]
 8007978:	4682      	mov	sl, r0
 800797a:	115e      	asrs	r6, r3, #5
 800797c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007980:	f013 031f 	ands.w	r3, r3, #31
 8007984:	bf18      	it	ne
 8007986:	3604      	addne	r6, #4
 8007988:	1f37      	subs	r7, r6, #4
 800798a:	46b9      	mov	r9, r7
 800798c:	463c      	mov	r4, r7
 800798e:	46ab      	mov	fp, r5
 8007990:	b087      	sub	sp, #28
 8007992:	4690      	mov	r8, r2
 8007994:	6802      	ldr	r2, [r0, #0]
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	f846 5c04 	str.w	r5, [r6, #-4]
 800799c:	9502      	str	r5, [sp, #8]
 800799e:	7851      	ldrb	r1, [r2, #1]
 80079a0:	1c53      	adds	r3, r2, #1
 80079a2:	9303      	str	r3, [sp, #12]
 80079a4:	b341      	cbz	r1, 80079f8 <__hexnan+0x88>
 80079a6:	4608      	mov	r0, r1
 80079a8:	9205      	str	r2, [sp, #20]
 80079aa:	9104      	str	r1, [sp, #16]
 80079ac:	f7ff fd69 	bl	8007482 <__hexdig_fun>
 80079b0:	2800      	cmp	r0, #0
 80079b2:	d14f      	bne.n	8007a54 <__hexnan+0xe4>
 80079b4:	9904      	ldr	r1, [sp, #16]
 80079b6:	9a05      	ldr	r2, [sp, #20]
 80079b8:	2920      	cmp	r1, #32
 80079ba:	d818      	bhi.n	80079ee <__hexnan+0x7e>
 80079bc:	9b02      	ldr	r3, [sp, #8]
 80079be:	459b      	cmp	fp, r3
 80079c0:	dd13      	ble.n	80079ea <__hexnan+0x7a>
 80079c2:	454c      	cmp	r4, r9
 80079c4:	d206      	bcs.n	80079d4 <__hexnan+0x64>
 80079c6:	2d07      	cmp	r5, #7
 80079c8:	dc04      	bgt.n	80079d4 <__hexnan+0x64>
 80079ca:	462a      	mov	r2, r5
 80079cc:	4649      	mov	r1, r9
 80079ce:	4620      	mov	r0, r4
 80079d0:	f7ff ffa8 	bl	8007924 <L_shift>
 80079d4:	4544      	cmp	r4, r8
 80079d6:	d950      	bls.n	8007a7a <__hexnan+0x10a>
 80079d8:	2300      	movs	r3, #0
 80079da:	f1a4 0904 	sub.w	r9, r4, #4
 80079de:	f844 3c04 	str.w	r3, [r4, #-4]
 80079e2:	461d      	mov	r5, r3
 80079e4:	464c      	mov	r4, r9
 80079e6:	f8cd b008 	str.w	fp, [sp, #8]
 80079ea:	9a03      	ldr	r2, [sp, #12]
 80079ec:	e7d7      	b.n	800799e <__hexnan+0x2e>
 80079ee:	2929      	cmp	r1, #41	; 0x29
 80079f0:	d156      	bne.n	8007aa0 <__hexnan+0x130>
 80079f2:	3202      	adds	r2, #2
 80079f4:	f8ca 2000 	str.w	r2, [sl]
 80079f8:	f1bb 0f00 	cmp.w	fp, #0
 80079fc:	d050      	beq.n	8007aa0 <__hexnan+0x130>
 80079fe:	454c      	cmp	r4, r9
 8007a00:	d206      	bcs.n	8007a10 <__hexnan+0xa0>
 8007a02:	2d07      	cmp	r5, #7
 8007a04:	dc04      	bgt.n	8007a10 <__hexnan+0xa0>
 8007a06:	462a      	mov	r2, r5
 8007a08:	4649      	mov	r1, r9
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f7ff ff8a 	bl	8007924 <L_shift>
 8007a10:	4544      	cmp	r4, r8
 8007a12:	d934      	bls.n	8007a7e <__hexnan+0x10e>
 8007a14:	4623      	mov	r3, r4
 8007a16:	f1a8 0204 	sub.w	r2, r8, #4
 8007a1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a1e:	429f      	cmp	r7, r3
 8007a20:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a24:	d2f9      	bcs.n	8007a1a <__hexnan+0xaa>
 8007a26:	1b3b      	subs	r3, r7, r4
 8007a28:	f023 0303 	bic.w	r3, r3, #3
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	3401      	adds	r4, #1
 8007a30:	3e03      	subs	r6, #3
 8007a32:	42b4      	cmp	r4, r6
 8007a34:	bf88      	it	hi
 8007a36:	2304      	movhi	r3, #4
 8007a38:	2200      	movs	r2, #0
 8007a3a:	4443      	add	r3, r8
 8007a3c:	f843 2b04 	str.w	r2, [r3], #4
 8007a40:	429f      	cmp	r7, r3
 8007a42:	d2fb      	bcs.n	8007a3c <__hexnan+0xcc>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	b91b      	cbnz	r3, 8007a50 <__hexnan+0xe0>
 8007a48:	4547      	cmp	r7, r8
 8007a4a:	d127      	bne.n	8007a9c <__hexnan+0x12c>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	603b      	str	r3, [r7, #0]
 8007a50:	2005      	movs	r0, #5
 8007a52:	e026      	b.n	8007aa2 <__hexnan+0x132>
 8007a54:	3501      	adds	r5, #1
 8007a56:	2d08      	cmp	r5, #8
 8007a58:	f10b 0b01 	add.w	fp, fp, #1
 8007a5c:	dd06      	ble.n	8007a6c <__hexnan+0xfc>
 8007a5e:	4544      	cmp	r4, r8
 8007a60:	d9c3      	bls.n	80079ea <__hexnan+0x7a>
 8007a62:	2300      	movs	r3, #0
 8007a64:	2501      	movs	r5, #1
 8007a66:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a6a:	3c04      	subs	r4, #4
 8007a6c:	6822      	ldr	r2, [r4, #0]
 8007a6e:	f000 000f 	and.w	r0, r0, #15
 8007a72:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	e7b7      	b.n	80079ea <__hexnan+0x7a>
 8007a7a:	2508      	movs	r5, #8
 8007a7c:	e7b5      	b.n	80079ea <__hexnan+0x7a>
 8007a7e:	9b01      	ldr	r3, [sp, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0df      	beq.n	8007a44 <__hexnan+0xd4>
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	f1c3 0320 	rsb	r3, r3, #32
 8007a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8007a90:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a94:	401a      	ands	r2, r3
 8007a96:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a9a:	e7d3      	b.n	8007a44 <__hexnan+0xd4>
 8007a9c:	3f04      	subs	r7, #4
 8007a9e:	e7d1      	b.n	8007a44 <__hexnan+0xd4>
 8007aa0:	2004      	movs	r0, #4
 8007aa2:	b007      	add	sp, #28
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007aa8 <_localeconv_r>:
 8007aa8:	4800      	ldr	r0, [pc, #0]	; (8007aac <_localeconv_r+0x4>)
 8007aaa:	4770      	bx	lr
 8007aac:	20000164 	.word	0x20000164

08007ab0 <malloc>:
 8007ab0:	4b02      	ldr	r3, [pc, #8]	; (8007abc <malloc+0xc>)
 8007ab2:	4601      	mov	r1, r0
 8007ab4:	6818      	ldr	r0, [r3, #0]
 8007ab6:	f000 bd65 	b.w	8008584 <_malloc_r>
 8007aba:	bf00      	nop
 8007abc:	2000000c 	.word	0x2000000c

08007ac0 <__ascii_mbtowc>:
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	b901      	cbnz	r1, 8007ac6 <__ascii_mbtowc+0x6>
 8007ac4:	a901      	add	r1, sp, #4
 8007ac6:	b142      	cbz	r2, 8007ada <__ascii_mbtowc+0x1a>
 8007ac8:	b14b      	cbz	r3, 8007ade <__ascii_mbtowc+0x1e>
 8007aca:	7813      	ldrb	r3, [r2, #0]
 8007acc:	600b      	str	r3, [r1, #0]
 8007ace:	7812      	ldrb	r2, [r2, #0]
 8007ad0:	1e10      	subs	r0, r2, #0
 8007ad2:	bf18      	it	ne
 8007ad4:	2001      	movne	r0, #1
 8007ad6:	b002      	add	sp, #8
 8007ad8:	4770      	bx	lr
 8007ada:	4610      	mov	r0, r2
 8007adc:	e7fb      	b.n	8007ad6 <__ascii_mbtowc+0x16>
 8007ade:	f06f 0001 	mvn.w	r0, #1
 8007ae2:	e7f8      	b.n	8007ad6 <__ascii_mbtowc+0x16>

08007ae4 <memchr>:
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	b2c9      	uxtb	r1, r1
 8007aea:	4402      	add	r2, r0
 8007aec:	4293      	cmp	r3, r2
 8007aee:	4618      	mov	r0, r3
 8007af0:	d101      	bne.n	8007af6 <memchr+0x12>
 8007af2:	2000      	movs	r0, #0
 8007af4:	e003      	b.n	8007afe <memchr+0x1a>
 8007af6:	7804      	ldrb	r4, [r0, #0]
 8007af8:	3301      	adds	r3, #1
 8007afa:	428c      	cmp	r4, r1
 8007afc:	d1f6      	bne.n	8007aec <memchr+0x8>
 8007afe:	bd10      	pop	{r4, pc}

08007b00 <memcpy>:
 8007b00:	440a      	add	r2, r1
 8007b02:	4291      	cmp	r1, r2
 8007b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b08:	d100      	bne.n	8007b0c <memcpy+0xc>
 8007b0a:	4770      	bx	lr
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b12:	4291      	cmp	r1, r2
 8007b14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b18:	d1f9      	bne.n	8007b0e <memcpy+0xe>
 8007b1a:	bd10      	pop	{r4, pc}

08007b1c <_Balloc>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b20:	4604      	mov	r4, r0
 8007b22:	460d      	mov	r5, r1
 8007b24:	b976      	cbnz	r6, 8007b44 <_Balloc+0x28>
 8007b26:	2010      	movs	r0, #16
 8007b28:	f7ff ffc2 	bl	8007ab0 <malloc>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6260      	str	r0, [r4, #36]	; 0x24
 8007b30:	b920      	cbnz	r0, 8007b3c <_Balloc+0x20>
 8007b32:	2166      	movs	r1, #102	; 0x66
 8007b34:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <_Balloc+0x78>)
 8007b36:	4818      	ldr	r0, [pc, #96]	; (8007b98 <_Balloc+0x7c>)
 8007b38:	f000 ff2c 	bl	8008994 <__assert_func>
 8007b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b40:	6006      	str	r6, [r0, #0]
 8007b42:	60c6      	str	r6, [r0, #12]
 8007b44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b46:	68f3      	ldr	r3, [r6, #12]
 8007b48:	b183      	cbz	r3, 8007b6c <_Balloc+0x50>
 8007b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b52:	b9b8      	cbnz	r0, 8007b84 <_Balloc+0x68>
 8007b54:	2101      	movs	r1, #1
 8007b56:	fa01 f605 	lsl.w	r6, r1, r5
 8007b5a:	1d72      	adds	r2, r6, #5
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	0092      	lsls	r2, r2, #2
 8007b60:	f000 fc94 	bl	800848c <_calloc_r>
 8007b64:	b160      	cbz	r0, 8007b80 <_Balloc+0x64>
 8007b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b6a:	e00e      	b.n	8007b8a <_Balloc+0x6e>
 8007b6c:	2221      	movs	r2, #33	; 0x21
 8007b6e:	2104      	movs	r1, #4
 8007b70:	4620      	mov	r0, r4
 8007b72:	f000 fc8b 	bl	800848c <_calloc_r>
 8007b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b78:	60f0      	str	r0, [r6, #12]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e4      	bne.n	8007b4a <_Balloc+0x2e>
 8007b80:	2000      	movs	r0, #0
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
 8007b84:	6802      	ldr	r2, [r0, #0]
 8007b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b90:	e7f7      	b.n	8007b82 <_Balloc+0x66>
 8007b92:	bf00      	nop
 8007b94:	08009986 	.word	0x08009986
 8007b98:	08009a84 	.word	0x08009a84

08007b9c <_Bfree>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b976      	cbnz	r6, 8007bc4 <_Bfree+0x28>
 8007ba6:	2010      	movs	r0, #16
 8007ba8:	f7ff ff82 	bl	8007ab0 <malloc>
 8007bac:	4602      	mov	r2, r0
 8007bae:	6268      	str	r0, [r5, #36]	; 0x24
 8007bb0:	b920      	cbnz	r0, 8007bbc <_Bfree+0x20>
 8007bb2:	218a      	movs	r1, #138	; 0x8a
 8007bb4:	4b08      	ldr	r3, [pc, #32]	; (8007bd8 <_Bfree+0x3c>)
 8007bb6:	4809      	ldr	r0, [pc, #36]	; (8007bdc <_Bfree+0x40>)
 8007bb8:	f000 feec 	bl	8008994 <__assert_func>
 8007bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bc0:	6006      	str	r6, [r0, #0]
 8007bc2:	60c6      	str	r6, [r0, #12]
 8007bc4:	b13c      	cbz	r4, 8007bd6 <_Bfree+0x3a>
 8007bc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007bc8:	6862      	ldr	r2, [r4, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bd0:	6021      	str	r1, [r4, #0]
 8007bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	08009986 	.word	0x08009986
 8007bdc:	08009a84 	.word	0x08009a84

08007be0 <__multadd>:
 8007be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be4:	4607      	mov	r7, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	461e      	mov	r6, r3
 8007bea:	2000      	movs	r0, #0
 8007bec:	690d      	ldr	r5, [r1, #16]
 8007bee:	f101 0c14 	add.w	ip, r1, #20
 8007bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	b299      	uxth	r1, r3
 8007bfa:	fb02 6101 	mla	r1, r2, r1, r6
 8007bfe:	0c1e      	lsrs	r6, r3, #16
 8007c00:	0c0b      	lsrs	r3, r1, #16
 8007c02:	fb02 3306 	mla	r3, r2, r6, r3
 8007c06:	b289      	uxth	r1, r1
 8007c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c0c:	4285      	cmp	r5, r0
 8007c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c12:	f84c 1b04 	str.w	r1, [ip], #4
 8007c16:	dcec      	bgt.n	8007bf2 <__multadd+0x12>
 8007c18:	b30e      	cbz	r6, 8007c5e <__multadd+0x7e>
 8007c1a:	68a3      	ldr	r3, [r4, #8]
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	dc19      	bgt.n	8007c54 <__multadd+0x74>
 8007c20:	6861      	ldr	r1, [r4, #4]
 8007c22:	4638      	mov	r0, r7
 8007c24:	3101      	adds	r1, #1
 8007c26:	f7ff ff79 	bl	8007b1c <_Balloc>
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	b928      	cbnz	r0, 8007c3a <__multadd+0x5a>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	21b5      	movs	r1, #181	; 0xb5
 8007c32:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <__multadd+0x84>)
 8007c34:	480c      	ldr	r0, [pc, #48]	; (8007c68 <__multadd+0x88>)
 8007c36:	f000 fead 	bl	8008994 <__assert_func>
 8007c3a:	6922      	ldr	r2, [r4, #16]
 8007c3c:	f104 010c 	add.w	r1, r4, #12
 8007c40:	3202      	adds	r2, #2
 8007c42:	0092      	lsls	r2, r2, #2
 8007c44:	300c      	adds	r0, #12
 8007c46:	f7ff ff5b 	bl	8007b00 <memcpy>
 8007c4a:	4621      	mov	r1, r4
 8007c4c:	4638      	mov	r0, r7
 8007c4e:	f7ff ffa5 	bl	8007b9c <_Bfree>
 8007c52:	4644      	mov	r4, r8
 8007c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c58:	3501      	adds	r5, #1
 8007c5a:	615e      	str	r6, [r3, #20]
 8007c5c:	6125      	str	r5, [r4, #16]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c64:	080099f8 	.word	0x080099f8
 8007c68:	08009a84 	.word	0x08009a84

08007c6c <__s2b>:
 8007c6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c70:	4615      	mov	r5, r2
 8007c72:	2209      	movs	r2, #9
 8007c74:	461f      	mov	r7, r3
 8007c76:	3308      	adds	r3, #8
 8007c78:	460c      	mov	r4, r1
 8007c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c7e:	4606      	mov	r6, r0
 8007c80:	2201      	movs	r2, #1
 8007c82:	2100      	movs	r1, #0
 8007c84:	429a      	cmp	r2, r3
 8007c86:	db09      	blt.n	8007c9c <__s2b+0x30>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f7ff ff47 	bl	8007b1c <_Balloc>
 8007c8e:	b940      	cbnz	r0, 8007ca2 <__s2b+0x36>
 8007c90:	4602      	mov	r2, r0
 8007c92:	21ce      	movs	r1, #206	; 0xce
 8007c94:	4b18      	ldr	r3, [pc, #96]	; (8007cf8 <__s2b+0x8c>)
 8007c96:	4819      	ldr	r0, [pc, #100]	; (8007cfc <__s2b+0x90>)
 8007c98:	f000 fe7c 	bl	8008994 <__assert_func>
 8007c9c:	0052      	lsls	r2, r2, #1
 8007c9e:	3101      	adds	r1, #1
 8007ca0:	e7f0      	b.n	8007c84 <__s2b+0x18>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	2d09      	cmp	r5, #9
 8007ca6:	6143      	str	r3, [r0, #20]
 8007ca8:	f04f 0301 	mov.w	r3, #1
 8007cac:	6103      	str	r3, [r0, #16]
 8007cae:	dd16      	ble.n	8007cde <__s2b+0x72>
 8007cb0:	f104 0909 	add.w	r9, r4, #9
 8007cb4:	46c8      	mov	r8, r9
 8007cb6:	442c      	add	r4, r5
 8007cb8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007cbc:	4601      	mov	r1, r0
 8007cbe:	220a      	movs	r2, #10
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	3b30      	subs	r3, #48	; 0x30
 8007cc4:	f7ff ff8c 	bl	8007be0 <__multadd>
 8007cc8:	45a0      	cmp	r8, r4
 8007cca:	d1f5      	bne.n	8007cb8 <__s2b+0x4c>
 8007ccc:	f1a5 0408 	sub.w	r4, r5, #8
 8007cd0:	444c      	add	r4, r9
 8007cd2:	1b2d      	subs	r5, r5, r4
 8007cd4:	1963      	adds	r3, r4, r5
 8007cd6:	42bb      	cmp	r3, r7
 8007cd8:	db04      	blt.n	8007ce4 <__s2b+0x78>
 8007cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cde:	2509      	movs	r5, #9
 8007ce0:	340a      	adds	r4, #10
 8007ce2:	e7f6      	b.n	8007cd2 <__s2b+0x66>
 8007ce4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ce8:	4601      	mov	r1, r0
 8007cea:	220a      	movs	r2, #10
 8007cec:	4630      	mov	r0, r6
 8007cee:	3b30      	subs	r3, #48	; 0x30
 8007cf0:	f7ff ff76 	bl	8007be0 <__multadd>
 8007cf4:	e7ee      	b.n	8007cd4 <__s2b+0x68>
 8007cf6:	bf00      	nop
 8007cf8:	080099f8 	.word	0x080099f8
 8007cfc:	08009a84 	.word	0x08009a84

08007d00 <__hi0bits>:
 8007d00:	0c02      	lsrs	r2, r0, #16
 8007d02:	0412      	lsls	r2, r2, #16
 8007d04:	4603      	mov	r3, r0
 8007d06:	b9ca      	cbnz	r2, 8007d3c <__hi0bits+0x3c>
 8007d08:	0403      	lsls	r3, r0, #16
 8007d0a:	2010      	movs	r0, #16
 8007d0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007d10:	bf04      	itt	eq
 8007d12:	021b      	lsleq	r3, r3, #8
 8007d14:	3008      	addeq	r0, #8
 8007d16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007d1a:	bf04      	itt	eq
 8007d1c:	011b      	lsleq	r3, r3, #4
 8007d1e:	3004      	addeq	r0, #4
 8007d20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007d24:	bf04      	itt	eq
 8007d26:	009b      	lsleq	r3, r3, #2
 8007d28:	3002      	addeq	r0, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	db05      	blt.n	8007d3a <__hi0bits+0x3a>
 8007d2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007d32:	f100 0001 	add.w	r0, r0, #1
 8007d36:	bf08      	it	eq
 8007d38:	2020      	moveq	r0, #32
 8007d3a:	4770      	bx	lr
 8007d3c:	2000      	movs	r0, #0
 8007d3e:	e7e5      	b.n	8007d0c <__hi0bits+0xc>

08007d40 <__lo0bits>:
 8007d40:	6803      	ldr	r3, [r0, #0]
 8007d42:	4602      	mov	r2, r0
 8007d44:	f013 0007 	ands.w	r0, r3, #7
 8007d48:	d00b      	beq.n	8007d62 <__lo0bits+0x22>
 8007d4a:	07d9      	lsls	r1, r3, #31
 8007d4c:	d421      	bmi.n	8007d92 <__lo0bits+0x52>
 8007d4e:	0798      	lsls	r0, r3, #30
 8007d50:	bf49      	itett	mi
 8007d52:	085b      	lsrmi	r3, r3, #1
 8007d54:	089b      	lsrpl	r3, r3, #2
 8007d56:	2001      	movmi	r0, #1
 8007d58:	6013      	strmi	r3, [r2, #0]
 8007d5a:	bf5c      	itt	pl
 8007d5c:	2002      	movpl	r0, #2
 8007d5e:	6013      	strpl	r3, [r2, #0]
 8007d60:	4770      	bx	lr
 8007d62:	b299      	uxth	r1, r3
 8007d64:	b909      	cbnz	r1, 8007d6a <__lo0bits+0x2a>
 8007d66:	2010      	movs	r0, #16
 8007d68:	0c1b      	lsrs	r3, r3, #16
 8007d6a:	b2d9      	uxtb	r1, r3
 8007d6c:	b909      	cbnz	r1, 8007d72 <__lo0bits+0x32>
 8007d6e:	3008      	adds	r0, #8
 8007d70:	0a1b      	lsrs	r3, r3, #8
 8007d72:	0719      	lsls	r1, r3, #28
 8007d74:	bf04      	itt	eq
 8007d76:	091b      	lsreq	r3, r3, #4
 8007d78:	3004      	addeq	r0, #4
 8007d7a:	0799      	lsls	r1, r3, #30
 8007d7c:	bf04      	itt	eq
 8007d7e:	089b      	lsreq	r3, r3, #2
 8007d80:	3002      	addeq	r0, #2
 8007d82:	07d9      	lsls	r1, r3, #31
 8007d84:	d403      	bmi.n	8007d8e <__lo0bits+0x4e>
 8007d86:	085b      	lsrs	r3, r3, #1
 8007d88:	f100 0001 	add.w	r0, r0, #1
 8007d8c:	d003      	beq.n	8007d96 <__lo0bits+0x56>
 8007d8e:	6013      	str	r3, [r2, #0]
 8007d90:	4770      	bx	lr
 8007d92:	2000      	movs	r0, #0
 8007d94:	4770      	bx	lr
 8007d96:	2020      	movs	r0, #32
 8007d98:	4770      	bx	lr
	...

08007d9c <__i2b>:
 8007d9c:	b510      	push	{r4, lr}
 8007d9e:	460c      	mov	r4, r1
 8007da0:	2101      	movs	r1, #1
 8007da2:	f7ff febb 	bl	8007b1c <_Balloc>
 8007da6:	4602      	mov	r2, r0
 8007da8:	b928      	cbnz	r0, 8007db6 <__i2b+0x1a>
 8007daa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007dae:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <__i2b+0x24>)
 8007db0:	4804      	ldr	r0, [pc, #16]	; (8007dc4 <__i2b+0x28>)
 8007db2:	f000 fdef 	bl	8008994 <__assert_func>
 8007db6:	2301      	movs	r3, #1
 8007db8:	6144      	str	r4, [r0, #20]
 8007dba:	6103      	str	r3, [r0, #16]
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	bf00      	nop
 8007dc0:	080099f8 	.word	0x080099f8
 8007dc4:	08009a84 	.word	0x08009a84

08007dc8 <__multiply>:
 8007dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dcc:	4691      	mov	r9, r2
 8007dce:	690a      	ldr	r2, [r1, #16]
 8007dd0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	bfbe      	ittt	lt
 8007dda:	460b      	movlt	r3, r1
 8007ddc:	464c      	movlt	r4, r9
 8007dde:	4699      	movlt	r9, r3
 8007de0:	6927      	ldr	r7, [r4, #16]
 8007de2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007de6:	68a3      	ldr	r3, [r4, #8]
 8007de8:	6861      	ldr	r1, [r4, #4]
 8007dea:	eb07 060a 	add.w	r6, r7, sl
 8007dee:	42b3      	cmp	r3, r6
 8007df0:	b085      	sub	sp, #20
 8007df2:	bfb8      	it	lt
 8007df4:	3101      	addlt	r1, #1
 8007df6:	f7ff fe91 	bl	8007b1c <_Balloc>
 8007dfa:	b930      	cbnz	r0, 8007e0a <__multiply+0x42>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f240 115d 	movw	r1, #349	; 0x15d
 8007e02:	4b43      	ldr	r3, [pc, #268]	; (8007f10 <__multiply+0x148>)
 8007e04:	4843      	ldr	r0, [pc, #268]	; (8007f14 <__multiply+0x14c>)
 8007e06:	f000 fdc5 	bl	8008994 <__assert_func>
 8007e0a:	f100 0514 	add.w	r5, r0, #20
 8007e0e:	462b      	mov	r3, r5
 8007e10:	2200      	movs	r2, #0
 8007e12:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e16:	4543      	cmp	r3, r8
 8007e18:	d321      	bcc.n	8007e5e <__multiply+0x96>
 8007e1a:	f104 0314 	add.w	r3, r4, #20
 8007e1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007e22:	f109 0314 	add.w	r3, r9, #20
 8007e26:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007e2a:	9202      	str	r2, [sp, #8]
 8007e2c:	1b3a      	subs	r2, r7, r4
 8007e2e:	3a15      	subs	r2, #21
 8007e30:	f022 0203 	bic.w	r2, r2, #3
 8007e34:	3204      	adds	r2, #4
 8007e36:	f104 0115 	add.w	r1, r4, #21
 8007e3a:	428f      	cmp	r7, r1
 8007e3c:	bf38      	it	cc
 8007e3e:	2204      	movcc	r2, #4
 8007e40:	9201      	str	r2, [sp, #4]
 8007e42:	9a02      	ldr	r2, [sp, #8]
 8007e44:	9303      	str	r3, [sp, #12]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d80c      	bhi.n	8007e64 <__multiply+0x9c>
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	dd03      	ble.n	8007e56 <__multiply+0x8e>
 8007e4e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d059      	beq.n	8007f0a <__multiply+0x142>
 8007e56:	6106      	str	r6, [r0, #16]
 8007e58:	b005      	add	sp, #20
 8007e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5e:	f843 2b04 	str.w	r2, [r3], #4
 8007e62:	e7d8      	b.n	8007e16 <__multiply+0x4e>
 8007e64:	f8b3 a000 	ldrh.w	sl, [r3]
 8007e68:	f1ba 0f00 	cmp.w	sl, #0
 8007e6c:	d023      	beq.n	8007eb6 <__multiply+0xee>
 8007e6e:	46a9      	mov	r9, r5
 8007e70:	f04f 0c00 	mov.w	ip, #0
 8007e74:	f104 0e14 	add.w	lr, r4, #20
 8007e78:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e7c:	f8d9 1000 	ldr.w	r1, [r9]
 8007e80:	fa1f fb82 	uxth.w	fp, r2
 8007e84:	b289      	uxth	r1, r1
 8007e86:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e8a:	4461      	add	r1, ip
 8007e8c:	f8d9 c000 	ldr.w	ip, [r9]
 8007e90:	0c12      	lsrs	r2, r2, #16
 8007e92:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007e96:	fb0a c202 	mla	r2, sl, r2, ip
 8007e9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e9e:	b289      	uxth	r1, r1
 8007ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ea4:	4577      	cmp	r7, lr
 8007ea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007eaa:	f849 1b04 	str.w	r1, [r9], #4
 8007eae:	d8e3      	bhi.n	8007e78 <__multiply+0xb0>
 8007eb0:	9a01      	ldr	r2, [sp, #4]
 8007eb2:	f845 c002 	str.w	ip, [r5, r2]
 8007eb6:	9a03      	ldr	r2, [sp, #12]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007ebe:	f1b9 0f00 	cmp.w	r9, #0
 8007ec2:	d020      	beq.n	8007f06 <__multiply+0x13e>
 8007ec4:	46ae      	mov	lr, r5
 8007ec6:	f04f 0a00 	mov.w	sl, #0
 8007eca:	6829      	ldr	r1, [r5, #0]
 8007ecc:	f104 0c14 	add.w	ip, r4, #20
 8007ed0:	f8bc b000 	ldrh.w	fp, [ip]
 8007ed4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007ed8:	b289      	uxth	r1, r1
 8007eda:	fb09 220b 	mla	r2, r9, fp, r2
 8007ede:	4492      	add	sl, r2
 8007ee0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007ee4:	f84e 1b04 	str.w	r1, [lr], #4
 8007ee8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007eec:	f8be 1000 	ldrh.w	r1, [lr]
 8007ef0:	0c12      	lsrs	r2, r2, #16
 8007ef2:	fb09 1102 	mla	r1, r9, r2, r1
 8007ef6:	4567      	cmp	r7, ip
 8007ef8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007efc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007f00:	d8e6      	bhi.n	8007ed0 <__multiply+0x108>
 8007f02:	9a01      	ldr	r2, [sp, #4]
 8007f04:	50a9      	str	r1, [r5, r2]
 8007f06:	3504      	adds	r5, #4
 8007f08:	e79b      	b.n	8007e42 <__multiply+0x7a>
 8007f0a:	3e01      	subs	r6, #1
 8007f0c:	e79d      	b.n	8007e4a <__multiply+0x82>
 8007f0e:	bf00      	nop
 8007f10:	080099f8 	.word	0x080099f8
 8007f14:	08009a84 	.word	0x08009a84

08007f18 <__pow5mult>:
 8007f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f1c:	4615      	mov	r5, r2
 8007f1e:	f012 0203 	ands.w	r2, r2, #3
 8007f22:	4606      	mov	r6, r0
 8007f24:	460f      	mov	r7, r1
 8007f26:	d007      	beq.n	8007f38 <__pow5mult+0x20>
 8007f28:	4c25      	ldr	r4, [pc, #148]	; (8007fc0 <__pow5mult+0xa8>)
 8007f2a:	3a01      	subs	r2, #1
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f32:	f7ff fe55 	bl	8007be0 <__multadd>
 8007f36:	4607      	mov	r7, r0
 8007f38:	10ad      	asrs	r5, r5, #2
 8007f3a:	d03d      	beq.n	8007fb8 <__pow5mult+0xa0>
 8007f3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007f3e:	b97c      	cbnz	r4, 8007f60 <__pow5mult+0x48>
 8007f40:	2010      	movs	r0, #16
 8007f42:	f7ff fdb5 	bl	8007ab0 <malloc>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6270      	str	r0, [r6, #36]	; 0x24
 8007f4a:	b928      	cbnz	r0, 8007f58 <__pow5mult+0x40>
 8007f4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007f50:	4b1c      	ldr	r3, [pc, #112]	; (8007fc4 <__pow5mult+0xac>)
 8007f52:	481d      	ldr	r0, [pc, #116]	; (8007fc8 <__pow5mult+0xb0>)
 8007f54:	f000 fd1e 	bl	8008994 <__assert_func>
 8007f58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f5c:	6004      	str	r4, [r0, #0]
 8007f5e:	60c4      	str	r4, [r0, #12]
 8007f60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007f64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f68:	b94c      	cbnz	r4, 8007f7e <__pow5mult+0x66>
 8007f6a:	f240 2171 	movw	r1, #625	; 0x271
 8007f6e:	4630      	mov	r0, r6
 8007f70:	f7ff ff14 	bl	8007d9c <__i2b>
 8007f74:	2300      	movs	r3, #0
 8007f76:	4604      	mov	r4, r0
 8007f78:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f7c:	6003      	str	r3, [r0, #0]
 8007f7e:	f04f 0900 	mov.w	r9, #0
 8007f82:	07eb      	lsls	r3, r5, #31
 8007f84:	d50a      	bpl.n	8007f9c <__pow5mult+0x84>
 8007f86:	4639      	mov	r1, r7
 8007f88:	4622      	mov	r2, r4
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ff1c 	bl	8007dc8 <__multiply>
 8007f90:	4680      	mov	r8, r0
 8007f92:	4639      	mov	r1, r7
 8007f94:	4630      	mov	r0, r6
 8007f96:	f7ff fe01 	bl	8007b9c <_Bfree>
 8007f9a:	4647      	mov	r7, r8
 8007f9c:	106d      	asrs	r5, r5, #1
 8007f9e:	d00b      	beq.n	8007fb8 <__pow5mult+0xa0>
 8007fa0:	6820      	ldr	r0, [r4, #0]
 8007fa2:	b938      	cbnz	r0, 8007fb4 <__pow5mult+0x9c>
 8007fa4:	4622      	mov	r2, r4
 8007fa6:	4621      	mov	r1, r4
 8007fa8:	4630      	mov	r0, r6
 8007faa:	f7ff ff0d 	bl	8007dc8 <__multiply>
 8007fae:	6020      	str	r0, [r4, #0]
 8007fb0:	f8c0 9000 	str.w	r9, [r0]
 8007fb4:	4604      	mov	r4, r0
 8007fb6:	e7e4      	b.n	8007f82 <__pow5mult+0x6a>
 8007fb8:	4638      	mov	r0, r7
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	bf00      	nop
 8007fc0:	08009bd0 	.word	0x08009bd0
 8007fc4:	08009986 	.word	0x08009986
 8007fc8:	08009a84 	.word	0x08009a84

08007fcc <__lshift>:
 8007fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd0:	460c      	mov	r4, r1
 8007fd2:	4607      	mov	r7, r0
 8007fd4:	4691      	mov	r9, r2
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	6849      	ldr	r1, [r1, #4]
 8007fda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fde:	68a3      	ldr	r3, [r4, #8]
 8007fe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fe4:	f108 0601 	add.w	r6, r8, #1
 8007fe8:	42b3      	cmp	r3, r6
 8007fea:	db0b      	blt.n	8008004 <__lshift+0x38>
 8007fec:	4638      	mov	r0, r7
 8007fee:	f7ff fd95 	bl	8007b1c <_Balloc>
 8007ff2:	4605      	mov	r5, r0
 8007ff4:	b948      	cbnz	r0, 800800a <__lshift+0x3e>
 8007ff6:	4602      	mov	r2, r0
 8007ff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ffc:	4b29      	ldr	r3, [pc, #164]	; (80080a4 <__lshift+0xd8>)
 8007ffe:	482a      	ldr	r0, [pc, #168]	; (80080a8 <__lshift+0xdc>)
 8008000:	f000 fcc8 	bl	8008994 <__assert_func>
 8008004:	3101      	adds	r1, #1
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	e7ee      	b.n	8007fe8 <__lshift+0x1c>
 800800a:	2300      	movs	r3, #0
 800800c:	f100 0114 	add.w	r1, r0, #20
 8008010:	f100 0210 	add.w	r2, r0, #16
 8008014:	4618      	mov	r0, r3
 8008016:	4553      	cmp	r3, sl
 8008018:	db37      	blt.n	800808a <__lshift+0xbe>
 800801a:	6920      	ldr	r0, [r4, #16]
 800801c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008020:	f104 0314 	add.w	r3, r4, #20
 8008024:	f019 091f 	ands.w	r9, r9, #31
 8008028:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800802c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008030:	d02f      	beq.n	8008092 <__lshift+0xc6>
 8008032:	468a      	mov	sl, r1
 8008034:	f04f 0c00 	mov.w	ip, #0
 8008038:	f1c9 0e20 	rsb	lr, r9, #32
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	fa02 f209 	lsl.w	r2, r2, r9
 8008042:	ea42 020c 	orr.w	r2, r2, ip
 8008046:	f84a 2b04 	str.w	r2, [sl], #4
 800804a:	f853 2b04 	ldr.w	r2, [r3], #4
 800804e:	4298      	cmp	r0, r3
 8008050:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008054:	d8f2      	bhi.n	800803c <__lshift+0x70>
 8008056:	1b03      	subs	r3, r0, r4
 8008058:	3b15      	subs	r3, #21
 800805a:	f023 0303 	bic.w	r3, r3, #3
 800805e:	3304      	adds	r3, #4
 8008060:	f104 0215 	add.w	r2, r4, #21
 8008064:	4290      	cmp	r0, r2
 8008066:	bf38      	it	cc
 8008068:	2304      	movcc	r3, #4
 800806a:	f841 c003 	str.w	ip, [r1, r3]
 800806e:	f1bc 0f00 	cmp.w	ip, #0
 8008072:	d001      	beq.n	8008078 <__lshift+0xac>
 8008074:	f108 0602 	add.w	r6, r8, #2
 8008078:	3e01      	subs	r6, #1
 800807a:	4638      	mov	r0, r7
 800807c:	4621      	mov	r1, r4
 800807e:	612e      	str	r6, [r5, #16]
 8008080:	f7ff fd8c 	bl	8007b9c <_Bfree>
 8008084:	4628      	mov	r0, r5
 8008086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808a:	f842 0f04 	str.w	r0, [r2, #4]!
 800808e:	3301      	adds	r3, #1
 8008090:	e7c1      	b.n	8008016 <__lshift+0x4a>
 8008092:	3904      	subs	r1, #4
 8008094:	f853 2b04 	ldr.w	r2, [r3], #4
 8008098:	4298      	cmp	r0, r3
 800809a:	f841 2f04 	str.w	r2, [r1, #4]!
 800809e:	d8f9      	bhi.n	8008094 <__lshift+0xc8>
 80080a0:	e7ea      	b.n	8008078 <__lshift+0xac>
 80080a2:	bf00      	nop
 80080a4:	080099f8 	.word	0x080099f8
 80080a8:	08009a84 	.word	0x08009a84

080080ac <__mcmp>:
 80080ac:	4603      	mov	r3, r0
 80080ae:	690a      	ldr	r2, [r1, #16]
 80080b0:	6900      	ldr	r0, [r0, #16]
 80080b2:	b530      	push	{r4, r5, lr}
 80080b4:	1a80      	subs	r0, r0, r2
 80080b6:	d10d      	bne.n	80080d4 <__mcmp+0x28>
 80080b8:	3314      	adds	r3, #20
 80080ba:	3114      	adds	r1, #20
 80080bc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80080c0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80080c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80080c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80080cc:	4295      	cmp	r5, r2
 80080ce:	d002      	beq.n	80080d6 <__mcmp+0x2a>
 80080d0:	d304      	bcc.n	80080dc <__mcmp+0x30>
 80080d2:	2001      	movs	r0, #1
 80080d4:	bd30      	pop	{r4, r5, pc}
 80080d6:	42a3      	cmp	r3, r4
 80080d8:	d3f4      	bcc.n	80080c4 <__mcmp+0x18>
 80080da:	e7fb      	b.n	80080d4 <__mcmp+0x28>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e7f8      	b.n	80080d4 <__mcmp+0x28>
	...

080080e4 <__mdiff>:
 80080e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080e8:	460d      	mov	r5, r1
 80080ea:	4607      	mov	r7, r0
 80080ec:	4611      	mov	r1, r2
 80080ee:	4628      	mov	r0, r5
 80080f0:	4614      	mov	r4, r2
 80080f2:	f7ff ffdb 	bl	80080ac <__mcmp>
 80080f6:	1e06      	subs	r6, r0, #0
 80080f8:	d111      	bne.n	800811e <__mdiff+0x3a>
 80080fa:	4631      	mov	r1, r6
 80080fc:	4638      	mov	r0, r7
 80080fe:	f7ff fd0d 	bl	8007b1c <_Balloc>
 8008102:	4602      	mov	r2, r0
 8008104:	b928      	cbnz	r0, 8008112 <__mdiff+0x2e>
 8008106:	f240 2132 	movw	r1, #562	; 0x232
 800810a:	4b3a      	ldr	r3, [pc, #232]	; (80081f4 <__mdiff+0x110>)
 800810c:	483a      	ldr	r0, [pc, #232]	; (80081f8 <__mdiff+0x114>)
 800810e:	f000 fc41 	bl	8008994 <__assert_func>
 8008112:	2301      	movs	r3, #1
 8008114:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008118:	4610      	mov	r0, r2
 800811a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811e:	bfa4      	itt	ge
 8008120:	4623      	movge	r3, r4
 8008122:	462c      	movge	r4, r5
 8008124:	4638      	mov	r0, r7
 8008126:	6861      	ldr	r1, [r4, #4]
 8008128:	bfa6      	itte	ge
 800812a:	461d      	movge	r5, r3
 800812c:	2600      	movge	r6, #0
 800812e:	2601      	movlt	r6, #1
 8008130:	f7ff fcf4 	bl	8007b1c <_Balloc>
 8008134:	4602      	mov	r2, r0
 8008136:	b918      	cbnz	r0, 8008140 <__mdiff+0x5c>
 8008138:	f44f 7110 	mov.w	r1, #576	; 0x240
 800813c:	4b2d      	ldr	r3, [pc, #180]	; (80081f4 <__mdiff+0x110>)
 800813e:	e7e5      	b.n	800810c <__mdiff+0x28>
 8008140:	f102 0814 	add.w	r8, r2, #20
 8008144:	46c2      	mov	sl, r8
 8008146:	f04f 0c00 	mov.w	ip, #0
 800814a:	6927      	ldr	r7, [r4, #16]
 800814c:	60c6      	str	r6, [r0, #12]
 800814e:	692e      	ldr	r6, [r5, #16]
 8008150:	f104 0014 	add.w	r0, r4, #20
 8008154:	f105 0914 	add.w	r9, r5, #20
 8008158:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800815c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008160:	3410      	adds	r4, #16
 8008162:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8008166:	f859 3b04 	ldr.w	r3, [r9], #4
 800816a:	fa1f f18b 	uxth.w	r1, fp
 800816e:	448c      	add	ip, r1
 8008170:	b299      	uxth	r1, r3
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	ebac 0101 	sub.w	r1, ip, r1
 8008178:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800817c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008180:	b289      	uxth	r1, r1
 8008182:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008186:	454e      	cmp	r6, r9
 8008188:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800818c:	f84a 3b04 	str.w	r3, [sl], #4
 8008190:	d8e7      	bhi.n	8008162 <__mdiff+0x7e>
 8008192:	1b73      	subs	r3, r6, r5
 8008194:	3b15      	subs	r3, #21
 8008196:	f023 0303 	bic.w	r3, r3, #3
 800819a:	3515      	adds	r5, #21
 800819c:	3304      	adds	r3, #4
 800819e:	42ae      	cmp	r6, r5
 80081a0:	bf38      	it	cc
 80081a2:	2304      	movcc	r3, #4
 80081a4:	4418      	add	r0, r3
 80081a6:	4443      	add	r3, r8
 80081a8:	461e      	mov	r6, r3
 80081aa:	4605      	mov	r5, r0
 80081ac:	4575      	cmp	r5, lr
 80081ae:	d30e      	bcc.n	80081ce <__mdiff+0xea>
 80081b0:	f10e 0103 	add.w	r1, lr, #3
 80081b4:	1a09      	subs	r1, r1, r0
 80081b6:	f021 0103 	bic.w	r1, r1, #3
 80081ba:	3803      	subs	r0, #3
 80081bc:	4586      	cmp	lr, r0
 80081be:	bf38      	it	cc
 80081c0:	2100      	movcc	r1, #0
 80081c2:	4419      	add	r1, r3
 80081c4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80081c8:	b18b      	cbz	r3, 80081ee <__mdiff+0x10a>
 80081ca:	6117      	str	r7, [r2, #16]
 80081cc:	e7a4      	b.n	8008118 <__mdiff+0x34>
 80081ce:	f855 8b04 	ldr.w	r8, [r5], #4
 80081d2:	fa1f f188 	uxth.w	r1, r8
 80081d6:	4461      	add	r1, ip
 80081d8:	140c      	asrs	r4, r1, #16
 80081da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80081de:	b289      	uxth	r1, r1
 80081e0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80081e4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80081e8:	f846 1b04 	str.w	r1, [r6], #4
 80081ec:	e7de      	b.n	80081ac <__mdiff+0xc8>
 80081ee:	3f01      	subs	r7, #1
 80081f0:	e7e8      	b.n	80081c4 <__mdiff+0xe0>
 80081f2:	bf00      	nop
 80081f4:	080099f8 	.word	0x080099f8
 80081f8:	08009a84 	.word	0x08009a84

080081fc <__ulp>:
 80081fc:	4b11      	ldr	r3, [pc, #68]	; (8008244 <__ulp+0x48>)
 80081fe:	400b      	ands	r3, r1
 8008200:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008204:	2b00      	cmp	r3, #0
 8008206:	dd02      	ble.n	800820e <__ulp+0x12>
 8008208:	2000      	movs	r0, #0
 800820a:	4619      	mov	r1, r3
 800820c:	4770      	bx	lr
 800820e:	425b      	negs	r3, r3
 8008210:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008214:	f04f 0000 	mov.w	r0, #0
 8008218:	f04f 0100 	mov.w	r1, #0
 800821c:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008220:	da04      	bge.n	800822c <__ulp+0x30>
 8008222:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008226:	fa43 f102 	asr.w	r1, r3, r2
 800822a:	4770      	bx	lr
 800822c:	f1a2 0314 	sub.w	r3, r2, #20
 8008230:	2b1e      	cmp	r3, #30
 8008232:	bfd6      	itet	le
 8008234:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008238:	2301      	movgt	r3, #1
 800823a:	fa22 f303 	lsrle.w	r3, r2, r3
 800823e:	4618      	mov	r0, r3
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	7ff00000 	.word	0x7ff00000

08008248 <__b2d>:
 8008248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800824c:	6907      	ldr	r7, [r0, #16]
 800824e:	f100 0914 	add.w	r9, r0, #20
 8008252:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8008256:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800825a:	f1a7 0804 	sub.w	r8, r7, #4
 800825e:	4630      	mov	r0, r6
 8008260:	f7ff fd4e 	bl	8007d00 <__hi0bits>
 8008264:	f1c0 0320 	rsb	r3, r0, #32
 8008268:	280a      	cmp	r0, #10
 800826a:	600b      	str	r3, [r1, #0]
 800826c:	491f      	ldr	r1, [pc, #124]	; (80082ec <__b2d+0xa4>)
 800826e:	dc17      	bgt.n	80082a0 <__b2d+0x58>
 8008270:	45c1      	cmp	r9, r8
 8008272:	bf28      	it	cs
 8008274:	2200      	movcs	r2, #0
 8008276:	f1c0 0c0b 	rsb	ip, r0, #11
 800827a:	fa26 f30c 	lsr.w	r3, r6, ip
 800827e:	bf38      	it	cc
 8008280:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8008284:	ea43 0501 	orr.w	r5, r3, r1
 8008288:	f100 0315 	add.w	r3, r0, #21
 800828c:	fa06 f303 	lsl.w	r3, r6, r3
 8008290:	fa22 f20c 	lsr.w	r2, r2, ip
 8008294:	ea43 0402 	orr.w	r4, r3, r2
 8008298:	4620      	mov	r0, r4
 800829a:	4629      	mov	r1, r5
 800829c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082a0:	45c1      	cmp	r9, r8
 80082a2:	bf2e      	itee	cs
 80082a4:	2200      	movcs	r2, #0
 80082a6:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80082aa:	f1a7 0808 	subcc.w	r8, r7, #8
 80082ae:	f1b0 030b 	subs.w	r3, r0, #11
 80082b2:	d016      	beq.n	80082e2 <__b2d+0x9a>
 80082b4:	f1c3 0720 	rsb	r7, r3, #32
 80082b8:	fa22 f107 	lsr.w	r1, r2, r7
 80082bc:	45c8      	cmp	r8, r9
 80082be:	fa06 f603 	lsl.w	r6, r6, r3
 80082c2:	ea46 0601 	orr.w	r6, r6, r1
 80082c6:	bf94      	ite	ls
 80082c8:	2100      	movls	r1, #0
 80082ca:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 80082ce:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 80082d2:	fa02 f003 	lsl.w	r0, r2, r3
 80082d6:	40f9      	lsrs	r1, r7
 80082d8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80082dc:	ea40 0401 	orr.w	r4, r0, r1
 80082e0:	e7da      	b.n	8008298 <__b2d+0x50>
 80082e2:	4614      	mov	r4, r2
 80082e4:	ea46 0501 	orr.w	r5, r6, r1
 80082e8:	e7d6      	b.n	8008298 <__b2d+0x50>
 80082ea:	bf00      	nop
 80082ec:	3ff00000 	.word	0x3ff00000

080082f0 <__d2b>:
 80082f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80082f4:	2101      	movs	r1, #1
 80082f6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80082fa:	4690      	mov	r8, r2
 80082fc:	461d      	mov	r5, r3
 80082fe:	f7ff fc0d 	bl	8007b1c <_Balloc>
 8008302:	4604      	mov	r4, r0
 8008304:	b930      	cbnz	r0, 8008314 <__d2b+0x24>
 8008306:	4602      	mov	r2, r0
 8008308:	f240 310a 	movw	r1, #778	; 0x30a
 800830c:	4b24      	ldr	r3, [pc, #144]	; (80083a0 <__d2b+0xb0>)
 800830e:	4825      	ldr	r0, [pc, #148]	; (80083a4 <__d2b+0xb4>)
 8008310:	f000 fb40 	bl	8008994 <__assert_func>
 8008314:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8008318:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800831c:	bb2d      	cbnz	r5, 800836a <__d2b+0x7a>
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	f1b8 0300 	subs.w	r3, r8, #0
 8008324:	d026      	beq.n	8008374 <__d2b+0x84>
 8008326:	4668      	mov	r0, sp
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	f7ff fd09 	bl	8007d40 <__lo0bits>
 800832e:	9900      	ldr	r1, [sp, #0]
 8008330:	b1f0      	cbz	r0, 8008370 <__d2b+0x80>
 8008332:	9a01      	ldr	r2, [sp, #4]
 8008334:	f1c0 0320 	rsb	r3, r0, #32
 8008338:	fa02 f303 	lsl.w	r3, r2, r3
 800833c:	430b      	orrs	r3, r1
 800833e:	40c2      	lsrs	r2, r0
 8008340:	6163      	str	r3, [r4, #20]
 8008342:	9201      	str	r2, [sp, #4]
 8008344:	9b01      	ldr	r3, [sp, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	bf14      	ite	ne
 800834a:	2102      	movne	r1, #2
 800834c:	2101      	moveq	r1, #1
 800834e:	61a3      	str	r3, [r4, #24]
 8008350:	6121      	str	r1, [r4, #16]
 8008352:	b1c5      	cbz	r5, 8008386 <__d2b+0x96>
 8008354:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008358:	4405      	add	r5, r0
 800835a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800835e:	603d      	str	r5, [r7, #0]
 8008360:	6030      	str	r0, [r6, #0]
 8008362:	4620      	mov	r0, r4
 8008364:	b002      	add	sp, #8
 8008366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800836e:	e7d6      	b.n	800831e <__d2b+0x2e>
 8008370:	6161      	str	r1, [r4, #20]
 8008372:	e7e7      	b.n	8008344 <__d2b+0x54>
 8008374:	a801      	add	r0, sp, #4
 8008376:	f7ff fce3 	bl	8007d40 <__lo0bits>
 800837a:	2101      	movs	r1, #1
 800837c:	9b01      	ldr	r3, [sp, #4]
 800837e:	6121      	str	r1, [r4, #16]
 8008380:	6163      	str	r3, [r4, #20]
 8008382:	3020      	adds	r0, #32
 8008384:	e7e5      	b.n	8008352 <__d2b+0x62>
 8008386:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800838a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800838e:	6038      	str	r0, [r7, #0]
 8008390:	6918      	ldr	r0, [r3, #16]
 8008392:	f7ff fcb5 	bl	8007d00 <__hi0bits>
 8008396:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800839a:	6031      	str	r1, [r6, #0]
 800839c:	e7e1      	b.n	8008362 <__d2b+0x72>
 800839e:	bf00      	nop
 80083a0:	080099f8 	.word	0x080099f8
 80083a4:	08009a84 	.word	0x08009a84

080083a8 <__ratio>:
 80083a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ac:	4688      	mov	r8, r1
 80083ae:	4669      	mov	r1, sp
 80083b0:	4681      	mov	r9, r0
 80083b2:	f7ff ff49 	bl	8008248 <__b2d>
 80083b6:	460f      	mov	r7, r1
 80083b8:	4604      	mov	r4, r0
 80083ba:	460d      	mov	r5, r1
 80083bc:	4640      	mov	r0, r8
 80083be:	a901      	add	r1, sp, #4
 80083c0:	f7ff ff42 	bl	8008248 <__b2d>
 80083c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80083c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80083cc:	468b      	mov	fp, r1
 80083ce:	eba3 0c02 	sub.w	ip, r3, r2
 80083d2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80083d6:	1a9b      	subs	r3, r3, r2
 80083d8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bfd5      	itete	le
 80083e0:	460a      	movle	r2, r1
 80083e2:	462a      	movgt	r2, r5
 80083e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80083e8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80083ec:	bfd8      	it	le
 80083ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80083f2:	465b      	mov	r3, fp
 80083f4:	4602      	mov	r2, r0
 80083f6:	4639      	mov	r1, r7
 80083f8:	4620      	mov	r0, r4
 80083fa:	f7f8 f997 	bl	800072c <__aeabi_ddiv>
 80083fe:	b003      	add	sp, #12
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008404 <__copybits>:
 8008404:	3901      	subs	r1, #1
 8008406:	b570      	push	{r4, r5, r6, lr}
 8008408:	1149      	asrs	r1, r1, #5
 800840a:	6914      	ldr	r4, [r2, #16]
 800840c:	3101      	adds	r1, #1
 800840e:	f102 0314 	add.w	r3, r2, #20
 8008412:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008416:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800841a:	1f05      	subs	r5, r0, #4
 800841c:	42a3      	cmp	r3, r4
 800841e:	d30c      	bcc.n	800843a <__copybits+0x36>
 8008420:	1aa3      	subs	r3, r4, r2
 8008422:	3b11      	subs	r3, #17
 8008424:	f023 0303 	bic.w	r3, r3, #3
 8008428:	3211      	adds	r2, #17
 800842a:	42a2      	cmp	r2, r4
 800842c:	bf88      	it	hi
 800842e:	2300      	movhi	r3, #0
 8008430:	4418      	add	r0, r3
 8008432:	2300      	movs	r3, #0
 8008434:	4288      	cmp	r0, r1
 8008436:	d305      	bcc.n	8008444 <__copybits+0x40>
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	f853 6b04 	ldr.w	r6, [r3], #4
 800843e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008442:	e7eb      	b.n	800841c <__copybits+0x18>
 8008444:	f840 3b04 	str.w	r3, [r0], #4
 8008448:	e7f4      	b.n	8008434 <__copybits+0x30>

0800844a <__any_on>:
 800844a:	f100 0214 	add.w	r2, r0, #20
 800844e:	6900      	ldr	r0, [r0, #16]
 8008450:	114b      	asrs	r3, r1, #5
 8008452:	4298      	cmp	r0, r3
 8008454:	b510      	push	{r4, lr}
 8008456:	db11      	blt.n	800847c <__any_on+0x32>
 8008458:	dd0a      	ble.n	8008470 <__any_on+0x26>
 800845a:	f011 011f 	ands.w	r1, r1, #31
 800845e:	d007      	beq.n	8008470 <__any_on+0x26>
 8008460:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008464:	fa24 f001 	lsr.w	r0, r4, r1
 8008468:	fa00 f101 	lsl.w	r1, r0, r1
 800846c:	428c      	cmp	r4, r1
 800846e:	d10b      	bne.n	8008488 <__any_on+0x3e>
 8008470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008474:	4293      	cmp	r3, r2
 8008476:	d803      	bhi.n	8008480 <__any_on+0x36>
 8008478:	2000      	movs	r0, #0
 800847a:	bd10      	pop	{r4, pc}
 800847c:	4603      	mov	r3, r0
 800847e:	e7f7      	b.n	8008470 <__any_on+0x26>
 8008480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008484:	2900      	cmp	r1, #0
 8008486:	d0f5      	beq.n	8008474 <__any_on+0x2a>
 8008488:	2001      	movs	r0, #1
 800848a:	e7f6      	b.n	800847a <__any_on+0x30>

0800848c <_calloc_r>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	fba1 5402 	umull	r5, r4, r1, r2
 8008492:	b934      	cbnz	r4, 80084a2 <_calloc_r+0x16>
 8008494:	4629      	mov	r1, r5
 8008496:	f000 f875 	bl	8008584 <_malloc_r>
 800849a:	4606      	mov	r6, r0
 800849c:	b928      	cbnz	r0, 80084aa <_calloc_r+0x1e>
 800849e:	4630      	mov	r0, r6
 80084a0:	bd70      	pop	{r4, r5, r6, pc}
 80084a2:	220c      	movs	r2, #12
 80084a4:	2600      	movs	r6, #0
 80084a6:	6002      	str	r2, [r0, #0]
 80084a8:	e7f9      	b.n	800849e <_calloc_r+0x12>
 80084aa:	462a      	mov	r2, r5
 80084ac:	4621      	mov	r1, r4
 80084ae:	f7fc fbf1 	bl	8004c94 <memset>
 80084b2:	e7f4      	b.n	800849e <_calloc_r+0x12>

080084b4 <_free_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4605      	mov	r5, r0
 80084b8:	2900      	cmp	r1, #0
 80084ba:	d040      	beq.n	800853e <_free_r+0x8a>
 80084bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c0:	1f0c      	subs	r4, r1, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	bfb8      	it	lt
 80084c6:	18e4      	addlt	r4, r4, r3
 80084c8:	f000 faae 	bl	8008a28 <__malloc_lock>
 80084cc:	4a1c      	ldr	r2, [pc, #112]	; (8008540 <_free_r+0x8c>)
 80084ce:	6813      	ldr	r3, [r2, #0]
 80084d0:	b933      	cbnz	r3, 80084e0 <_free_r+0x2c>
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	6014      	str	r4, [r2, #0]
 80084d6:	4628      	mov	r0, r5
 80084d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084dc:	f000 baaa 	b.w	8008a34 <__malloc_unlock>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d908      	bls.n	80084f6 <_free_r+0x42>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	1821      	adds	r1, r4, r0
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf01      	itttt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	1809      	addeq	r1, r1, r0
 80084f2:	6021      	streq	r1, [r4, #0]
 80084f4:	e7ed      	b.n	80084d2 <_free_r+0x1e>
 80084f6:	461a      	mov	r2, r3
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	b10b      	cbz	r3, 8008500 <_free_r+0x4c>
 80084fc:	42a3      	cmp	r3, r4
 80084fe:	d9fa      	bls.n	80084f6 <_free_r+0x42>
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	1850      	adds	r0, r2, r1
 8008504:	42a0      	cmp	r0, r4
 8008506:	d10b      	bne.n	8008520 <_free_r+0x6c>
 8008508:	6820      	ldr	r0, [r4, #0]
 800850a:	4401      	add	r1, r0
 800850c:	1850      	adds	r0, r2, r1
 800850e:	4283      	cmp	r3, r0
 8008510:	6011      	str	r1, [r2, #0]
 8008512:	d1e0      	bne.n	80084d6 <_free_r+0x22>
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	4401      	add	r1, r0
 800851a:	6011      	str	r1, [r2, #0]
 800851c:	6053      	str	r3, [r2, #4]
 800851e:	e7da      	b.n	80084d6 <_free_r+0x22>
 8008520:	d902      	bls.n	8008528 <_free_r+0x74>
 8008522:	230c      	movs	r3, #12
 8008524:	602b      	str	r3, [r5, #0]
 8008526:	e7d6      	b.n	80084d6 <_free_r+0x22>
 8008528:	6820      	ldr	r0, [r4, #0]
 800852a:	1821      	adds	r1, r4, r0
 800852c:	428b      	cmp	r3, r1
 800852e:	bf01      	itttt	eq
 8008530:	6819      	ldreq	r1, [r3, #0]
 8008532:	685b      	ldreq	r3, [r3, #4]
 8008534:	1809      	addeq	r1, r1, r0
 8008536:	6021      	streq	r1, [r4, #0]
 8008538:	6063      	str	r3, [r4, #4]
 800853a:	6054      	str	r4, [r2, #4]
 800853c:	e7cb      	b.n	80084d6 <_free_r+0x22>
 800853e:	bd38      	pop	{r3, r4, r5, pc}
 8008540:	2000043c 	.word	0x2000043c

08008544 <sbrk_aligned>:
 8008544:	b570      	push	{r4, r5, r6, lr}
 8008546:	4e0e      	ldr	r6, [pc, #56]	; (8008580 <sbrk_aligned+0x3c>)
 8008548:	460c      	mov	r4, r1
 800854a:	6831      	ldr	r1, [r6, #0]
 800854c:	4605      	mov	r5, r0
 800854e:	b911      	cbnz	r1, 8008556 <sbrk_aligned+0x12>
 8008550:	f000 f9ee 	bl	8008930 <_sbrk_r>
 8008554:	6030      	str	r0, [r6, #0]
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f9e9 	bl	8008930 <_sbrk_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d00a      	beq.n	8008578 <sbrk_aligned+0x34>
 8008562:	1cc4      	adds	r4, r0, #3
 8008564:	f024 0403 	bic.w	r4, r4, #3
 8008568:	42a0      	cmp	r0, r4
 800856a:	d007      	beq.n	800857c <sbrk_aligned+0x38>
 800856c:	1a21      	subs	r1, r4, r0
 800856e:	4628      	mov	r0, r5
 8008570:	f000 f9de 	bl	8008930 <_sbrk_r>
 8008574:	3001      	adds	r0, #1
 8008576:	d101      	bne.n	800857c <sbrk_aligned+0x38>
 8008578:	f04f 34ff 	mov.w	r4, #4294967295
 800857c:	4620      	mov	r0, r4
 800857e:	bd70      	pop	{r4, r5, r6, pc}
 8008580:	20000440 	.word	0x20000440

08008584 <_malloc_r>:
 8008584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008588:	1ccd      	adds	r5, r1, #3
 800858a:	f025 0503 	bic.w	r5, r5, #3
 800858e:	3508      	adds	r5, #8
 8008590:	2d0c      	cmp	r5, #12
 8008592:	bf38      	it	cc
 8008594:	250c      	movcc	r5, #12
 8008596:	2d00      	cmp	r5, #0
 8008598:	4607      	mov	r7, r0
 800859a:	db01      	blt.n	80085a0 <_malloc_r+0x1c>
 800859c:	42a9      	cmp	r1, r5
 800859e:	d905      	bls.n	80085ac <_malloc_r+0x28>
 80085a0:	230c      	movs	r3, #12
 80085a2:	2600      	movs	r6, #0
 80085a4:	603b      	str	r3, [r7, #0]
 80085a6:	4630      	mov	r0, r6
 80085a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085ac:	4e2e      	ldr	r6, [pc, #184]	; (8008668 <_malloc_r+0xe4>)
 80085ae:	f000 fa3b 	bl	8008a28 <__malloc_lock>
 80085b2:	6833      	ldr	r3, [r6, #0]
 80085b4:	461c      	mov	r4, r3
 80085b6:	bb34      	cbnz	r4, 8008606 <_malloc_r+0x82>
 80085b8:	4629      	mov	r1, r5
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ffc2 	bl	8008544 <sbrk_aligned>
 80085c0:	1c43      	adds	r3, r0, #1
 80085c2:	4604      	mov	r4, r0
 80085c4:	d14d      	bne.n	8008662 <_malloc_r+0xde>
 80085c6:	6834      	ldr	r4, [r6, #0]
 80085c8:	4626      	mov	r6, r4
 80085ca:	2e00      	cmp	r6, #0
 80085cc:	d140      	bne.n	8008650 <_malloc_r+0xcc>
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	4631      	mov	r1, r6
 80085d2:	4638      	mov	r0, r7
 80085d4:	eb04 0803 	add.w	r8, r4, r3
 80085d8:	f000 f9aa 	bl	8008930 <_sbrk_r>
 80085dc:	4580      	cmp	r8, r0
 80085de:	d13a      	bne.n	8008656 <_malloc_r+0xd2>
 80085e0:	6821      	ldr	r1, [r4, #0]
 80085e2:	3503      	adds	r5, #3
 80085e4:	1a6d      	subs	r5, r5, r1
 80085e6:	f025 0503 	bic.w	r5, r5, #3
 80085ea:	3508      	adds	r5, #8
 80085ec:	2d0c      	cmp	r5, #12
 80085ee:	bf38      	it	cc
 80085f0:	250c      	movcc	r5, #12
 80085f2:	4638      	mov	r0, r7
 80085f4:	4629      	mov	r1, r5
 80085f6:	f7ff ffa5 	bl	8008544 <sbrk_aligned>
 80085fa:	3001      	adds	r0, #1
 80085fc:	d02b      	beq.n	8008656 <_malloc_r+0xd2>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	442b      	add	r3, r5
 8008602:	6023      	str	r3, [r4, #0]
 8008604:	e00e      	b.n	8008624 <_malloc_r+0xa0>
 8008606:	6822      	ldr	r2, [r4, #0]
 8008608:	1b52      	subs	r2, r2, r5
 800860a:	d41e      	bmi.n	800864a <_malloc_r+0xc6>
 800860c:	2a0b      	cmp	r2, #11
 800860e:	d916      	bls.n	800863e <_malloc_r+0xba>
 8008610:	1961      	adds	r1, r4, r5
 8008612:	42a3      	cmp	r3, r4
 8008614:	6025      	str	r5, [r4, #0]
 8008616:	bf18      	it	ne
 8008618:	6059      	strne	r1, [r3, #4]
 800861a:	6863      	ldr	r3, [r4, #4]
 800861c:	bf08      	it	eq
 800861e:	6031      	streq	r1, [r6, #0]
 8008620:	5162      	str	r2, [r4, r5]
 8008622:	604b      	str	r3, [r1, #4]
 8008624:	4638      	mov	r0, r7
 8008626:	f104 060b 	add.w	r6, r4, #11
 800862a:	f000 fa03 	bl	8008a34 <__malloc_unlock>
 800862e:	f026 0607 	bic.w	r6, r6, #7
 8008632:	1d23      	adds	r3, r4, #4
 8008634:	1af2      	subs	r2, r6, r3
 8008636:	d0b6      	beq.n	80085a6 <_malloc_r+0x22>
 8008638:	1b9b      	subs	r3, r3, r6
 800863a:	50a3      	str	r3, [r4, r2]
 800863c:	e7b3      	b.n	80085a6 <_malloc_r+0x22>
 800863e:	6862      	ldr	r2, [r4, #4]
 8008640:	42a3      	cmp	r3, r4
 8008642:	bf0c      	ite	eq
 8008644:	6032      	streq	r2, [r6, #0]
 8008646:	605a      	strne	r2, [r3, #4]
 8008648:	e7ec      	b.n	8008624 <_malloc_r+0xa0>
 800864a:	4623      	mov	r3, r4
 800864c:	6864      	ldr	r4, [r4, #4]
 800864e:	e7b2      	b.n	80085b6 <_malloc_r+0x32>
 8008650:	4634      	mov	r4, r6
 8008652:	6876      	ldr	r6, [r6, #4]
 8008654:	e7b9      	b.n	80085ca <_malloc_r+0x46>
 8008656:	230c      	movs	r3, #12
 8008658:	4638      	mov	r0, r7
 800865a:	603b      	str	r3, [r7, #0]
 800865c:	f000 f9ea 	bl	8008a34 <__malloc_unlock>
 8008660:	e7a1      	b.n	80085a6 <_malloc_r+0x22>
 8008662:	6025      	str	r5, [r4, #0]
 8008664:	e7de      	b.n	8008624 <_malloc_r+0xa0>
 8008666:	bf00      	nop
 8008668:	2000043c 	.word	0x2000043c

0800866c <__ssputs_r>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	688e      	ldr	r6, [r1, #8]
 8008672:	4682      	mov	sl, r0
 8008674:	429e      	cmp	r6, r3
 8008676:	460c      	mov	r4, r1
 8008678:	4690      	mov	r8, r2
 800867a:	461f      	mov	r7, r3
 800867c:	d838      	bhi.n	80086f0 <__ssputs_r+0x84>
 800867e:	898a      	ldrh	r2, [r1, #12]
 8008680:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008684:	d032      	beq.n	80086ec <__ssputs_r+0x80>
 8008686:	6825      	ldr	r5, [r4, #0]
 8008688:	6909      	ldr	r1, [r1, #16]
 800868a:	3301      	adds	r3, #1
 800868c:	eba5 0901 	sub.w	r9, r5, r1
 8008690:	6965      	ldr	r5, [r4, #20]
 8008692:	444b      	add	r3, r9
 8008694:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008698:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869c:	106d      	asrs	r5, r5, #1
 800869e:	429d      	cmp	r5, r3
 80086a0:	bf38      	it	cc
 80086a2:	461d      	movcc	r5, r3
 80086a4:	0553      	lsls	r3, r2, #21
 80086a6:	d531      	bpl.n	800870c <__ssputs_r+0xa0>
 80086a8:	4629      	mov	r1, r5
 80086aa:	f7ff ff6b 	bl	8008584 <_malloc_r>
 80086ae:	4606      	mov	r6, r0
 80086b0:	b950      	cbnz	r0, 80086c8 <__ssputs_r+0x5c>
 80086b2:	230c      	movs	r3, #12
 80086b4:	f04f 30ff 	mov.w	r0, #4294967295
 80086b8:	f8ca 3000 	str.w	r3, [sl]
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086c2:	81a3      	strh	r3, [r4, #12]
 80086c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086c8:	464a      	mov	r2, r9
 80086ca:	6921      	ldr	r1, [r4, #16]
 80086cc:	f7ff fa18 	bl	8007b00 <memcpy>
 80086d0:	89a3      	ldrh	r3, [r4, #12]
 80086d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80086d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086da:	81a3      	strh	r3, [r4, #12]
 80086dc:	6126      	str	r6, [r4, #16]
 80086de:	444e      	add	r6, r9
 80086e0:	6026      	str	r6, [r4, #0]
 80086e2:	463e      	mov	r6, r7
 80086e4:	6165      	str	r5, [r4, #20]
 80086e6:	eba5 0509 	sub.w	r5, r5, r9
 80086ea:	60a5      	str	r5, [r4, #8]
 80086ec:	42be      	cmp	r6, r7
 80086ee:	d900      	bls.n	80086f2 <__ssputs_r+0x86>
 80086f0:	463e      	mov	r6, r7
 80086f2:	4632      	mov	r2, r6
 80086f4:	4641      	mov	r1, r8
 80086f6:	6820      	ldr	r0, [r4, #0]
 80086f8:	f000 f97c 	bl	80089f4 <memmove>
 80086fc:	68a3      	ldr	r3, [r4, #8]
 80086fe:	2000      	movs	r0, #0
 8008700:	1b9b      	subs	r3, r3, r6
 8008702:	60a3      	str	r3, [r4, #8]
 8008704:	6823      	ldr	r3, [r4, #0]
 8008706:	4433      	add	r3, r6
 8008708:	6023      	str	r3, [r4, #0]
 800870a:	e7db      	b.n	80086c4 <__ssputs_r+0x58>
 800870c:	462a      	mov	r2, r5
 800870e:	f000 f997 	bl	8008a40 <_realloc_r>
 8008712:	4606      	mov	r6, r0
 8008714:	2800      	cmp	r0, #0
 8008716:	d1e1      	bne.n	80086dc <__ssputs_r+0x70>
 8008718:	4650      	mov	r0, sl
 800871a:	6921      	ldr	r1, [r4, #16]
 800871c:	f7ff feca 	bl	80084b4 <_free_r>
 8008720:	e7c7      	b.n	80086b2 <__ssputs_r+0x46>
	...

08008724 <_svfiprintf_r>:
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	4698      	mov	r8, r3
 800872a:	898b      	ldrh	r3, [r1, #12]
 800872c:	4607      	mov	r7, r0
 800872e:	061b      	lsls	r3, r3, #24
 8008730:	460d      	mov	r5, r1
 8008732:	4614      	mov	r4, r2
 8008734:	b09d      	sub	sp, #116	; 0x74
 8008736:	d50e      	bpl.n	8008756 <_svfiprintf_r+0x32>
 8008738:	690b      	ldr	r3, [r1, #16]
 800873a:	b963      	cbnz	r3, 8008756 <_svfiprintf_r+0x32>
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	f7ff ff21 	bl	8008584 <_malloc_r>
 8008742:	6028      	str	r0, [r5, #0]
 8008744:	6128      	str	r0, [r5, #16]
 8008746:	b920      	cbnz	r0, 8008752 <_svfiprintf_r+0x2e>
 8008748:	230c      	movs	r3, #12
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	e0d1      	b.n	80088f6 <_svfiprintf_r+0x1d2>
 8008752:	2340      	movs	r3, #64	; 0x40
 8008754:	616b      	str	r3, [r5, #20]
 8008756:	2300      	movs	r3, #0
 8008758:	9309      	str	r3, [sp, #36]	; 0x24
 800875a:	2320      	movs	r3, #32
 800875c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008760:	2330      	movs	r3, #48	; 0x30
 8008762:	f04f 0901 	mov.w	r9, #1
 8008766:	f8cd 800c 	str.w	r8, [sp, #12]
 800876a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008910 <_svfiprintf_r+0x1ec>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008772:	4623      	mov	r3, r4
 8008774:	469a      	mov	sl, r3
 8008776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877a:	b10a      	cbz	r2, 8008780 <_svfiprintf_r+0x5c>
 800877c:	2a25      	cmp	r2, #37	; 0x25
 800877e:	d1f9      	bne.n	8008774 <_svfiprintf_r+0x50>
 8008780:	ebba 0b04 	subs.w	fp, sl, r4
 8008784:	d00b      	beq.n	800879e <_svfiprintf_r+0x7a>
 8008786:	465b      	mov	r3, fp
 8008788:	4622      	mov	r2, r4
 800878a:	4629      	mov	r1, r5
 800878c:	4638      	mov	r0, r7
 800878e:	f7ff ff6d 	bl	800866c <__ssputs_r>
 8008792:	3001      	adds	r0, #1
 8008794:	f000 80aa 	beq.w	80088ec <_svfiprintf_r+0x1c8>
 8008798:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800879a:	445a      	add	r2, fp
 800879c:	9209      	str	r2, [sp, #36]	; 0x24
 800879e:	f89a 3000 	ldrb.w	r3, [sl]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80a2 	beq.w	80088ec <_svfiprintf_r+0x1c8>
 80087a8:	2300      	movs	r3, #0
 80087aa:	f04f 32ff 	mov.w	r2, #4294967295
 80087ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b2:	f10a 0a01 	add.w	sl, sl, #1
 80087b6:	9304      	str	r3, [sp, #16]
 80087b8:	9307      	str	r3, [sp, #28]
 80087ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80087be:	931a      	str	r3, [sp, #104]	; 0x68
 80087c0:	4654      	mov	r4, sl
 80087c2:	2205      	movs	r2, #5
 80087c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087c8:	4851      	ldr	r0, [pc, #324]	; (8008910 <_svfiprintf_r+0x1ec>)
 80087ca:	f7ff f98b 	bl	8007ae4 <memchr>
 80087ce:	9a04      	ldr	r2, [sp, #16]
 80087d0:	b9d8      	cbnz	r0, 800880a <_svfiprintf_r+0xe6>
 80087d2:	06d0      	lsls	r0, r2, #27
 80087d4:	bf44      	itt	mi
 80087d6:	2320      	movmi	r3, #32
 80087d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087dc:	0711      	lsls	r1, r2, #28
 80087de:	bf44      	itt	mi
 80087e0:	232b      	movmi	r3, #43	; 0x2b
 80087e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80087e6:	f89a 3000 	ldrb.w	r3, [sl]
 80087ea:	2b2a      	cmp	r3, #42	; 0x2a
 80087ec:	d015      	beq.n	800881a <_svfiprintf_r+0xf6>
 80087ee:	4654      	mov	r4, sl
 80087f0:	2000      	movs	r0, #0
 80087f2:	f04f 0c0a 	mov.w	ip, #10
 80087f6:	9a07      	ldr	r2, [sp, #28]
 80087f8:	4621      	mov	r1, r4
 80087fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087fe:	3b30      	subs	r3, #48	; 0x30
 8008800:	2b09      	cmp	r3, #9
 8008802:	d94e      	bls.n	80088a2 <_svfiprintf_r+0x17e>
 8008804:	b1b0      	cbz	r0, 8008834 <_svfiprintf_r+0x110>
 8008806:	9207      	str	r2, [sp, #28]
 8008808:	e014      	b.n	8008834 <_svfiprintf_r+0x110>
 800880a:	eba0 0308 	sub.w	r3, r0, r8
 800880e:	fa09 f303 	lsl.w	r3, r9, r3
 8008812:	4313      	orrs	r3, r2
 8008814:	46a2      	mov	sl, r4
 8008816:	9304      	str	r3, [sp, #16]
 8008818:	e7d2      	b.n	80087c0 <_svfiprintf_r+0x9c>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	9103      	str	r1, [sp, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	bfbb      	ittet	lt
 8008826:	425b      	neglt	r3, r3
 8008828:	f042 0202 	orrlt.w	r2, r2, #2
 800882c:	9307      	strge	r3, [sp, #28]
 800882e:	9307      	strlt	r3, [sp, #28]
 8008830:	bfb8      	it	lt
 8008832:	9204      	strlt	r2, [sp, #16]
 8008834:	7823      	ldrb	r3, [r4, #0]
 8008836:	2b2e      	cmp	r3, #46	; 0x2e
 8008838:	d10c      	bne.n	8008854 <_svfiprintf_r+0x130>
 800883a:	7863      	ldrb	r3, [r4, #1]
 800883c:	2b2a      	cmp	r3, #42	; 0x2a
 800883e:	d135      	bne.n	80088ac <_svfiprintf_r+0x188>
 8008840:	9b03      	ldr	r3, [sp, #12]
 8008842:	3402      	adds	r4, #2
 8008844:	1d1a      	adds	r2, r3, #4
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	9203      	str	r2, [sp, #12]
 800884a:	2b00      	cmp	r3, #0
 800884c:	bfb8      	it	lt
 800884e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008914 <_svfiprintf_r+0x1f0>
 8008858:	2203      	movs	r2, #3
 800885a:	4650      	mov	r0, sl
 800885c:	7821      	ldrb	r1, [r4, #0]
 800885e:	f7ff f941 	bl	8007ae4 <memchr>
 8008862:	b140      	cbz	r0, 8008876 <_svfiprintf_r+0x152>
 8008864:	2340      	movs	r3, #64	; 0x40
 8008866:	eba0 000a 	sub.w	r0, r0, sl
 800886a:	fa03 f000 	lsl.w	r0, r3, r0
 800886e:	9b04      	ldr	r3, [sp, #16]
 8008870:	3401      	adds	r4, #1
 8008872:	4303      	orrs	r3, r0
 8008874:	9304      	str	r3, [sp, #16]
 8008876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887a:	2206      	movs	r2, #6
 800887c:	4826      	ldr	r0, [pc, #152]	; (8008918 <_svfiprintf_r+0x1f4>)
 800887e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008882:	f7ff f92f 	bl	8007ae4 <memchr>
 8008886:	2800      	cmp	r0, #0
 8008888:	d038      	beq.n	80088fc <_svfiprintf_r+0x1d8>
 800888a:	4b24      	ldr	r3, [pc, #144]	; (800891c <_svfiprintf_r+0x1f8>)
 800888c:	bb1b      	cbnz	r3, 80088d6 <_svfiprintf_r+0x1b2>
 800888e:	9b03      	ldr	r3, [sp, #12]
 8008890:	3307      	adds	r3, #7
 8008892:	f023 0307 	bic.w	r3, r3, #7
 8008896:	3308      	adds	r3, #8
 8008898:	9303      	str	r3, [sp, #12]
 800889a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800889c:	4433      	add	r3, r6
 800889e:	9309      	str	r3, [sp, #36]	; 0x24
 80088a0:	e767      	b.n	8008772 <_svfiprintf_r+0x4e>
 80088a2:	460c      	mov	r4, r1
 80088a4:	2001      	movs	r0, #1
 80088a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80088aa:	e7a5      	b.n	80087f8 <_svfiprintf_r+0xd4>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f04f 0c0a 	mov.w	ip, #10
 80088b2:	4619      	mov	r1, r3
 80088b4:	3401      	adds	r4, #1
 80088b6:	9305      	str	r3, [sp, #20]
 80088b8:	4620      	mov	r0, r4
 80088ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088be:	3a30      	subs	r2, #48	; 0x30
 80088c0:	2a09      	cmp	r2, #9
 80088c2:	d903      	bls.n	80088cc <_svfiprintf_r+0x1a8>
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0c5      	beq.n	8008854 <_svfiprintf_r+0x130>
 80088c8:	9105      	str	r1, [sp, #20]
 80088ca:	e7c3      	b.n	8008854 <_svfiprintf_r+0x130>
 80088cc:	4604      	mov	r4, r0
 80088ce:	2301      	movs	r3, #1
 80088d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80088d4:	e7f0      	b.n	80088b8 <_svfiprintf_r+0x194>
 80088d6:	ab03      	add	r3, sp, #12
 80088d8:	9300      	str	r3, [sp, #0]
 80088da:	462a      	mov	r2, r5
 80088dc:	4638      	mov	r0, r7
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <_svfiprintf_r+0x1fc>)
 80088e0:	a904      	add	r1, sp, #16
 80088e2:	f7fc fa7d 	bl	8004de0 <_printf_float>
 80088e6:	1c42      	adds	r2, r0, #1
 80088e8:	4606      	mov	r6, r0
 80088ea:	d1d6      	bne.n	800889a <_svfiprintf_r+0x176>
 80088ec:	89ab      	ldrh	r3, [r5, #12]
 80088ee:	065b      	lsls	r3, r3, #25
 80088f0:	f53f af2c 	bmi.w	800874c <_svfiprintf_r+0x28>
 80088f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088f6:	b01d      	add	sp, #116	; 0x74
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088fc:	ab03      	add	r3, sp, #12
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	462a      	mov	r2, r5
 8008902:	4638      	mov	r0, r7
 8008904:	4b06      	ldr	r3, [pc, #24]	; (8008920 <_svfiprintf_r+0x1fc>)
 8008906:	a904      	add	r1, sp, #16
 8008908:	f7fc fd06 	bl	8005318 <_printf_i>
 800890c:	e7eb      	b.n	80088e6 <_svfiprintf_r+0x1c2>
 800890e:	bf00      	nop
 8008910:	08009bdc 	.word	0x08009bdc
 8008914:	08009be2 	.word	0x08009be2
 8008918:	08009be6 	.word	0x08009be6
 800891c:	08004de1 	.word	0x08004de1
 8008920:	0800866d 	.word	0x0800866d

08008924 <nan>:
 8008924:	2000      	movs	r0, #0
 8008926:	4901      	ldr	r1, [pc, #4]	; (800892c <nan+0x8>)
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	7ff80000 	.word	0x7ff80000

08008930 <_sbrk_r>:
 8008930:	b538      	push	{r3, r4, r5, lr}
 8008932:	2300      	movs	r3, #0
 8008934:	4d05      	ldr	r5, [pc, #20]	; (800894c <_sbrk_r+0x1c>)
 8008936:	4604      	mov	r4, r0
 8008938:	4608      	mov	r0, r1
 800893a:	602b      	str	r3, [r5, #0]
 800893c:	f7f9 fe44 	bl	80025c8 <_sbrk>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d102      	bne.n	800894a <_sbrk_r+0x1a>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	b103      	cbz	r3, 800894a <_sbrk_r+0x1a>
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	bd38      	pop	{r3, r4, r5, pc}
 800894c:	20000444 	.word	0x20000444

08008950 <strncmp>:
 8008950:	4603      	mov	r3, r0
 8008952:	b510      	push	{r4, lr}
 8008954:	b172      	cbz	r2, 8008974 <strncmp+0x24>
 8008956:	3901      	subs	r1, #1
 8008958:	1884      	adds	r4, r0, r2
 800895a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800895e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008962:	4290      	cmp	r0, r2
 8008964:	d101      	bne.n	800896a <strncmp+0x1a>
 8008966:	42a3      	cmp	r3, r4
 8008968:	d101      	bne.n	800896e <strncmp+0x1e>
 800896a:	1a80      	subs	r0, r0, r2
 800896c:	bd10      	pop	{r4, pc}
 800896e:	2800      	cmp	r0, #0
 8008970:	d1f3      	bne.n	800895a <strncmp+0xa>
 8008972:	e7fa      	b.n	800896a <strncmp+0x1a>
 8008974:	4610      	mov	r0, r2
 8008976:	e7f9      	b.n	800896c <strncmp+0x1c>

08008978 <__ascii_wctomb>:
 8008978:	4603      	mov	r3, r0
 800897a:	4608      	mov	r0, r1
 800897c:	b141      	cbz	r1, 8008990 <__ascii_wctomb+0x18>
 800897e:	2aff      	cmp	r2, #255	; 0xff
 8008980:	d904      	bls.n	800898c <__ascii_wctomb+0x14>
 8008982:	228a      	movs	r2, #138	; 0x8a
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	601a      	str	r2, [r3, #0]
 800898a:	4770      	bx	lr
 800898c:	2001      	movs	r0, #1
 800898e:	700a      	strb	r2, [r1, #0]
 8008990:	4770      	bx	lr
	...

08008994 <__assert_func>:
 8008994:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008996:	4614      	mov	r4, r2
 8008998:	461a      	mov	r2, r3
 800899a:	4b09      	ldr	r3, [pc, #36]	; (80089c0 <__assert_func+0x2c>)
 800899c:	4605      	mov	r5, r0
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68d8      	ldr	r0, [r3, #12]
 80089a2:	b14c      	cbz	r4, 80089b8 <__assert_func+0x24>
 80089a4:	4b07      	ldr	r3, [pc, #28]	; (80089c4 <__assert_func+0x30>)
 80089a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089aa:	9100      	str	r1, [sp, #0]
 80089ac:	462b      	mov	r3, r5
 80089ae:	4906      	ldr	r1, [pc, #24]	; (80089c8 <__assert_func+0x34>)
 80089b0:	f000 f80e 	bl	80089d0 <fiprintf>
 80089b4:	f000 fa8a 	bl	8008ecc <abort>
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <__assert_func+0x38>)
 80089ba:	461c      	mov	r4, r3
 80089bc:	e7f3      	b.n	80089a6 <__assert_func+0x12>
 80089be:	bf00      	nop
 80089c0:	2000000c 	.word	0x2000000c
 80089c4:	08009bed 	.word	0x08009bed
 80089c8:	08009bfa 	.word	0x08009bfa
 80089cc:	08009c28 	.word	0x08009c28

080089d0 <fiprintf>:
 80089d0:	b40e      	push	{r1, r2, r3}
 80089d2:	b503      	push	{r0, r1, lr}
 80089d4:	4601      	mov	r1, r0
 80089d6:	ab03      	add	r3, sp, #12
 80089d8:	4805      	ldr	r0, [pc, #20]	; (80089f0 <fiprintf+0x20>)
 80089da:	f853 2b04 	ldr.w	r2, [r3], #4
 80089de:	6800      	ldr	r0, [r0, #0]
 80089e0:	9301      	str	r3, [sp, #4]
 80089e2:	f000 f883 	bl	8008aec <_vfiprintf_r>
 80089e6:	b002      	add	sp, #8
 80089e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80089ec:	b003      	add	sp, #12
 80089ee:	4770      	bx	lr
 80089f0:	2000000c 	.word	0x2000000c

080089f4 <memmove>:
 80089f4:	4288      	cmp	r0, r1
 80089f6:	b510      	push	{r4, lr}
 80089f8:	eb01 0402 	add.w	r4, r1, r2
 80089fc:	d902      	bls.n	8008a04 <memmove+0x10>
 80089fe:	4284      	cmp	r4, r0
 8008a00:	4623      	mov	r3, r4
 8008a02:	d807      	bhi.n	8008a14 <memmove+0x20>
 8008a04:	1e43      	subs	r3, r0, #1
 8008a06:	42a1      	cmp	r1, r4
 8008a08:	d008      	beq.n	8008a1c <memmove+0x28>
 8008a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a12:	e7f8      	b.n	8008a06 <memmove+0x12>
 8008a14:	4601      	mov	r1, r0
 8008a16:	4402      	add	r2, r0
 8008a18:	428a      	cmp	r2, r1
 8008a1a:	d100      	bne.n	8008a1e <memmove+0x2a>
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a26:	e7f7      	b.n	8008a18 <memmove+0x24>

08008a28 <__malloc_lock>:
 8008a28:	4801      	ldr	r0, [pc, #4]	; (8008a30 <__malloc_lock+0x8>)
 8008a2a:	f000 bc0b 	b.w	8009244 <__retarget_lock_acquire_recursive>
 8008a2e:	bf00      	nop
 8008a30:	20000448 	.word	0x20000448

08008a34 <__malloc_unlock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	; (8008a3c <__malloc_unlock+0x8>)
 8008a36:	f000 bc06 	b.w	8009246 <__retarget_lock_release_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	20000448 	.word	0x20000448

08008a40 <_realloc_r>:
 8008a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a44:	4680      	mov	r8, r0
 8008a46:	4614      	mov	r4, r2
 8008a48:	460e      	mov	r6, r1
 8008a4a:	b921      	cbnz	r1, 8008a56 <_realloc_r+0x16>
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a52:	f7ff bd97 	b.w	8008584 <_malloc_r>
 8008a56:	b92a      	cbnz	r2, 8008a64 <_realloc_r+0x24>
 8008a58:	f7ff fd2c 	bl	80084b4 <_free_r>
 8008a5c:	4625      	mov	r5, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a64:	f000 fc56 	bl	8009314 <_malloc_usable_size_r>
 8008a68:	4284      	cmp	r4, r0
 8008a6a:	4607      	mov	r7, r0
 8008a6c:	d802      	bhi.n	8008a74 <_realloc_r+0x34>
 8008a6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a72:	d812      	bhi.n	8008a9a <_realloc_r+0x5a>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4640      	mov	r0, r8
 8008a78:	f7ff fd84 	bl	8008584 <_malloc_r>
 8008a7c:	4605      	mov	r5, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	d0ed      	beq.n	8008a5e <_realloc_r+0x1e>
 8008a82:	42bc      	cmp	r4, r7
 8008a84:	4622      	mov	r2, r4
 8008a86:	4631      	mov	r1, r6
 8008a88:	bf28      	it	cs
 8008a8a:	463a      	movcs	r2, r7
 8008a8c:	f7ff f838 	bl	8007b00 <memcpy>
 8008a90:	4631      	mov	r1, r6
 8008a92:	4640      	mov	r0, r8
 8008a94:	f7ff fd0e 	bl	80084b4 <_free_r>
 8008a98:	e7e1      	b.n	8008a5e <_realloc_r+0x1e>
 8008a9a:	4635      	mov	r5, r6
 8008a9c:	e7df      	b.n	8008a5e <_realloc_r+0x1e>

08008a9e <__sfputc_r>:
 8008a9e:	6893      	ldr	r3, [r2, #8]
 8008aa0:	b410      	push	{r4}
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	6093      	str	r3, [r2, #8]
 8008aa8:	da07      	bge.n	8008aba <__sfputc_r+0x1c>
 8008aaa:	6994      	ldr	r4, [r2, #24]
 8008aac:	42a3      	cmp	r3, r4
 8008aae:	db01      	blt.n	8008ab4 <__sfputc_r+0x16>
 8008ab0:	290a      	cmp	r1, #10
 8008ab2:	d102      	bne.n	8008aba <__sfputc_r+0x1c>
 8008ab4:	bc10      	pop	{r4}
 8008ab6:	f000 b949 	b.w	8008d4c <__swbuf_r>
 8008aba:	6813      	ldr	r3, [r2, #0]
 8008abc:	1c58      	adds	r0, r3, #1
 8008abe:	6010      	str	r0, [r2, #0]
 8008ac0:	7019      	strb	r1, [r3, #0]
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	bc10      	pop	{r4}
 8008ac6:	4770      	bx	lr

08008ac8 <__sfputs_r>:
 8008ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aca:	4606      	mov	r6, r0
 8008acc:	460f      	mov	r7, r1
 8008ace:	4614      	mov	r4, r2
 8008ad0:	18d5      	adds	r5, r2, r3
 8008ad2:	42ac      	cmp	r4, r5
 8008ad4:	d101      	bne.n	8008ada <__sfputs_r+0x12>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	e007      	b.n	8008aea <__sfputs_r+0x22>
 8008ada:	463a      	mov	r2, r7
 8008adc:	4630      	mov	r0, r6
 8008ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae2:	f7ff ffdc 	bl	8008a9e <__sfputc_r>
 8008ae6:	1c43      	adds	r3, r0, #1
 8008ae8:	d1f3      	bne.n	8008ad2 <__sfputs_r+0xa>
 8008aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aec <_vfiprintf_r>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	4614      	mov	r4, r2
 8008af4:	4698      	mov	r8, r3
 8008af6:	4606      	mov	r6, r0
 8008af8:	b09d      	sub	sp, #116	; 0x74
 8008afa:	b118      	cbz	r0, 8008b04 <_vfiprintf_r+0x18>
 8008afc:	6983      	ldr	r3, [r0, #24]
 8008afe:	b90b      	cbnz	r3, 8008b04 <_vfiprintf_r+0x18>
 8008b00:	f000 fb02 	bl	8009108 <__sinit>
 8008b04:	4b89      	ldr	r3, [pc, #548]	; (8008d2c <_vfiprintf_r+0x240>)
 8008b06:	429d      	cmp	r5, r3
 8008b08:	d11b      	bne.n	8008b42 <_vfiprintf_r+0x56>
 8008b0a:	6875      	ldr	r5, [r6, #4]
 8008b0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b0e:	07d9      	lsls	r1, r3, #31
 8008b10:	d405      	bmi.n	8008b1e <_vfiprintf_r+0x32>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	059a      	lsls	r2, r3, #22
 8008b16:	d402      	bmi.n	8008b1e <_vfiprintf_r+0x32>
 8008b18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b1a:	f000 fb93 	bl	8009244 <__retarget_lock_acquire_recursive>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	071b      	lsls	r3, r3, #28
 8008b22:	d501      	bpl.n	8008b28 <_vfiprintf_r+0x3c>
 8008b24:	692b      	ldr	r3, [r5, #16]
 8008b26:	b9eb      	cbnz	r3, 8008b64 <_vfiprintf_r+0x78>
 8008b28:	4629      	mov	r1, r5
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f000 f960 	bl	8008df0 <__swsetup_r>
 8008b30:	b1c0      	cbz	r0, 8008b64 <_vfiprintf_r+0x78>
 8008b32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b34:	07dc      	lsls	r4, r3, #31
 8008b36:	d50e      	bpl.n	8008b56 <_vfiprintf_r+0x6a>
 8008b38:	f04f 30ff 	mov.w	r0, #4294967295
 8008b3c:	b01d      	add	sp, #116	; 0x74
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	4b7b      	ldr	r3, [pc, #492]	; (8008d30 <_vfiprintf_r+0x244>)
 8008b44:	429d      	cmp	r5, r3
 8008b46:	d101      	bne.n	8008b4c <_vfiprintf_r+0x60>
 8008b48:	68b5      	ldr	r5, [r6, #8]
 8008b4a:	e7df      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008b4c:	4b79      	ldr	r3, [pc, #484]	; (8008d34 <_vfiprintf_r+0x248>)
 8008b4e:	429d      	cmp	r5, r3
 8008b50:	bf08      	it	eq
 8008b52:	68f5      	ldreq	r5, [r6, #12]
 8008b54:	e7da      	b.n	8008b0c <_vfiprintf_r+0x20>
 8008b56:	89ab      	ldrh	r3, [r5, #12]
 8008b58:	0598      	lsls	r0, r3, #22
 8008b5a:	d4ed      	bmi.n	8008b38 <_vfiprintf_r+0x4c>
 8008b5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b5e:	f000 fb72 	bl	8009246 <__retarget_lock_release_recursive>
 8008b62:	e7e9      	b.n	8008b38 <_vfiprintf_r+0x4c>
 8008b64:	2300      	movs	r3, #0
 8008b66:	9309      	str	r3, [sp, #36]	; 0x24
 8008b68:	2320      	movs	r3, #32
 8008b6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b6e:	2330      	movs	r3, #48	; 0x30
 8008b70:	f04f 0901 	mov.w	r9, #1
 8008b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b78:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8008d38 <_vfiprintf_r+0x24c>
 8008b7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b80:	4623      	mov	r3, r4
 8008b82:	469a      	mov	sl, r3
 8008b84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b88:	b10a      	cbz	r2, 8008b8e <_vfiprintf_r+0xa2>
 8008b8a:	2a25      	cmp	r2, #37	; 0x25
 8008b8c:	d1f9      	bne.n	8008b82 <_vfiprintf_r+0x96>
 8008b8e:	ebba 0b04 	subs.w	fp, sl, r4
 8008b92:	d00b      	beq.n	8008bac <_vfiprintf_r+0xc0>
 8008b94:	465b      	mov	r3, fp
 8008b96:	4622      	mov	r2, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4630      	mov	r0, r6
 8008b9c:	f7ff ff94 	bl	8008ac8 <__sfputs_r>
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	f000 80aa 	beq.w	8008cfa <_vfiprintf_r+0x20e>
 8008ba6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ba8:	445a      	add	r2, fp
 8008baa:	9209      	str	r2, [sp, #36]	; 0x24
 8008bac:	f89a 3000 	ldrb.w	r3, [sl]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	f000 80a2 	beq.w	8008cfa <_vfiprintf_r+0x20e>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bc0:	f10a 0a01 	add.w	sl, sl, #1
 8008bc4:	9304      	str	r3, [sp, #16]
 8008bc6:	9307      	str	r3, [sp, #28]
 8008bc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008bcc:	931a      	str	r3, [sp, #104]	; 0x68
 8008bce:	4654      	mov	r4, sl
 8008bd0:	2205      	movs	r2, #5
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	4858      	ldr	r0, [pc, #352]	; (8008d38 <_vfiprintf_r+0x24c>)
 8008bd8:	f7fe ff84 	bl	8007ae4 <memchr>
 8008bdc:	9a04      	ldr	r2, [sp, #16]
 8008bde:	b9d8      	cbnz	r0, 8008c18 <_vfiprintf_r+0x12c>
 8008be0:	06d1      	lsls	r1, r2, #27
 8008be2:	bf44      	itt	mi
 8008be4:	2320      	movmi	r3, #32
 8008be6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bea:	0713      	lsls	r3, r2, #28
 8008bec:	bf44      	itt	mi
 8008bee:	232b      	movmi	r3, #43	; 0x2b
 8008bf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bfa:	d015      	beq.n	8008c28 <_vfiprintf_r+0x13c>
 8008bfc:	4654      	mov	r4, sl
 8008bfe:	2000      	movs	r0, #0
 8008c00:	f04f 0c0a 	mov.w	ip, #10
 8008c04:	9a07      	ldr	r2, [sp, #28]
 8008c06:	4621      	mov	r1, r4
 8008c08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c0c:	3b30      	subs	r3, #48	; 0x30
 8008c0e:	2b09      	cmp	r3, #9
 8008c10:	d94e      	bls.n	8008cb0 <_vfiprintf_r+0x1c4>
 8008c12:	b1b0      	cbz	r0, 8008c42 <_vfiprintf_r+0x156>
 8008c14:	9207      	str	r2, [sp, #28]
 8008c16:	e014      	b.n	8008c42 <_vfiprintf_r+0x156>
 8008c18:	eba0 0308 	sub.w	r3, r0, r8
 8008c1c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c20:	4313      	orrs	r3, r2
 8008c22:	46a2      	mov	sl, r4
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	e7d2      	b.n	8008bce <_vfiprintf_r+0xe2>
 8008c28:	9b03      	ldr	r3, [sp, #12]
 8008c2a:	1d19      	adds	r1, r3, #4
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	9103      	str	r1, [sp, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bfbb      	ittet	lt
 8008c34:	425b      	neglt	r3, r3
 8008c36:	f042 0202 	orrlt.w	r2, r2, #2
 8008c3a:	9307      	strge	r3, [sp, #28]
 8008c3c:	9307      	strlt	r3, [sp, #28]
 8008c3e:	bfb8      	it	lt
 8008c40:	9204      	strlt	r2, [sp, #16]
 8008c42:	7823      	ldrb	r3, [r4, #0]
 8008c44:	2b2e      	cmp	r3, #46	; 0x2e
 8008c46:	d10c      	bne.n	8008c62 <_vfiprintf_r+0x176>
 8008c48:	7863      	ldrb	r3, [r4, #1]
 8008c4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c4c:	d135      	bne.n	8008cba <_vfiprintf_r+0x1ce>
 8008c4e:	9b03      	ldr	r3, [sp, #12]
 8008c50:	3402      	adds	r4, #2
 8008c52:	1d1a      	adds	r2, r3, #4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	9203      	str	r2, [sp, #12]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfb8      	it	lt
 8008c5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c60:	9305      	str	r3, [sp, #20]
 8008c62:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8008d3c <_vfiprintf_r+0x250>
 8008c66:	2203      	movs	r2, #3
 8008c68:	4650      	mov	r0, sl
 8008c6a:	7821      	ldrb	r1, [r4, #0]
 8008c6c:	f7fe ff3a 	bl	8007ae4 <memchr>
 8008c70:	b140      	cbz	r0, 8008c84 <_vfiprintf_r+0x198>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	eba0 000a 	sub.w	r0, r0, sl
 8008c78:	fa03 f000 	lsl.w	r0, r3, r0
 8008c7c:	9b04      	ldr	r3, [sp, #16]
 8008c7e:	3401      	adds	r4, #1
 8008c80:	4303      	orrs	r3, r0
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c88:	2206      	movs	r2, #6
 8008c8a:	482d      	ldr	r0, [pc, #180]	; (8008d40 <_vfiprintf_r+0x254>)
 8008c8c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c90:	f7fe ff28 	bl	8007ae4 <memchr>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d03f      	beq.n	8008d18 <_vfiprintf_r+0x22c>
 8008c98:	4b2a      	ldr	r3, [pc, #168]	; (8008d44 <_vfiprintf_r+0x258>)
 8008c9a:	bb1b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x1f8>
 8008c9c:	9b03      	ldr	r3, [sp, #12]
 8008c9e:	3307      	adds	r3, #7
 8008ca0:	f023 0307 	bic.w	r3, r3, #7
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	9303      	str	r3, [sp, #12]
 8008ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008caa:	443b      	add	r3, r7
 8008cac:	9309      	str	r3, [sp, #36]	; 0x24
 8008cae:	e767      	b.n	8008b80 <_vfiprintf_r+0x94>
 8008cb0:	460c      	mov	r4, r1
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008cb8:	e7a5      	b.n	8008c06 <_vfiprintf_r+0x11a>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f04f 0c0a 	mov.w	ip, #10
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	3401      	adds	r4, #1
 8008cc4:	9305      	str	r3, [sp, #20]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ccc:	3a30      	subs	r2, #48	; 0x30
 8008cce:	2a09      	cmp	r2, #9
 8008cd0:	d903      	bls.n	8008cda <_vfiprintf_r+0x1ee>
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0c5      	beq.n	8008c62 <_vfiprintf_r+0x176>
 8008cd6:	9105      	str	r1, [sp, #20]
 8008cd8:	e7c3      	b.n	8008c62 <_vfiprintf_r+0x176>
 8008cda:	4604      	mov	r4, r0
 8008cdc:	2301      	movs	r3, #1
 8008cde:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ce2:	e7f0      	b.n	8008cc6 <_vfiprintf_r+0x1da>
 8008ce4:	ab03      	add	r3, sp, #12
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4630      	mov	r0, r6
 8008cec:	4b16      	ldr	r3, [pc, #88]	; (8008d48 <_vfiprintf_r+0x25c>)
 8008cee:	a904      	add	r1, sp, #16
 8008cf0:	f7fc f876 	bl	8004de0 <_printf_float>
 8008cf4:	4607      	mov	r7, r0
 8008cf6:	1c78      	adds	r0, r7, #1
 8008cf8:	d1d6      	bne.n	8008ca8 <_vfiprintf_r+0x1bc>
 8008cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cfc:	07d9      	lsls	r1, r3, #31
 8008cfe:	d405      	bmi.n	8008d0c <_vfiprintf_r+0x220>
 8008d00:	89ab      	ldrh	r3, [r5, #12]
 8008d02:	059a      	lsls	r2, r3, #22
 8008d04:	d402      	bmi.n	8008d0c <_vfiprintf_r+0x220>
 8008d06:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d08:	f000 fa9d 	bl	8009246 <__retarget_lock_release_recursive>
 8008d0c:	89ab      	ldrh	r3, [r5, #12]
 8008d0e:	065b      	lsls	r3, r3, #25
 8008d10:	f53f af12 	bmi.w	8008b38 <_vfiprintf_r+0x4c>
 8008d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d16:	e711      	b.n	8008b3c <_vfiprintf_r+0x50>
 8008d18:	ab03      	add	r3, sp, #12
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <_vfiprintf_r+0x25c>)
 8008d22:	a904      	add	r1, sp, #16
 8008d24:	f7fc faf8 	bl	8005318 <_printf_i>
 8008d28:	e7e4      	b.n	8008cf4 <_vfiprintf_r+0x208>
 8008d2a:	bf00      	nop
 8008d2c:	08009c4c 	.word	0x08009c4c
 8008d30:	08009c6c 	.word	0x08009c6c
 8008d34:	08009c2c 	.word	0x08009c2c
 8008d38:	08009bdc 	.word	0x08009bdc
 8008d3c:	08009be2 	.word	0x08009be2
 8008d40:	08009be6 	.word	0x08009be6
 8008d44:	08004de1 	.word	0x08004de1
 8008d48:	08008ac9 	.word	0x08008ac9

08008d4c <__swbuf_r>:
 8008d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4e:	460e      	mov	r6, r1
 8008d50:	4614      	mov	r4, r2
 8008d52:	4605      	mov	r5, r0
 8008d54:	b118      	cbz	r0, 8008d5e <__swbuf_r+0x12>
 8008d56:	6983      	ldr	r3, [r0, #24]
 8008d58:	b90b      	cbnz	r3, 8008d5e <__swbuf_r+0x12>
 8008d5a:	f000 f9d5 	bl	8009108 <__sinit>
 8008d5e:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <__swbuf_r+0x98>)
 8008d60:	429c      	cmp	r4, r3
 8008d62:	d12b      	bne.n	8008dbc <__swbuf_r+0x70>
 8008d64:	686c      	ldr	r4, [r5, #4]
 8008d66:	69a3      	ldr	r3, [r4, #24]
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	89a3      	ldrh	r3, [r4, #12]
 8008d6c:	071a      	lsls	r2, r3, #28
 8008d6e:	d52f      	bpl.n	8008dd0 <__swbuf_r+0x84>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	b36b      	cbz	r3, 8008dd0 <__swbuf_r+0x84>
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6820      	ldr	r0, [r4, #0]
 8008d78:	b2f6      	uxtb	r6, r6
 8008d7a:	1ac0      	subs	r0, r0, r3
 8008d7c:	6963      	ldr	r3, [r4, #20]
 8008d7e:	4637      	mov	r7, r6
 8008d80:	4283      	cmp	r3, r0
 8008d82:	dc04      	bgt.n	8008d8e <__swbuf_r+0x42>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f92a 	bl	8008fe0 <_fflush_r>
 8008d8c:	bb30      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	3001      	adds	r0, #1
 8008d92:	3b01      	subs	r3, #1
 8008d94:	60a3      	str	r3, [r4, #8]
 8008d96:	6823      	ldr	r3, [r4, #0]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	6022      	str	r2, [r4, #0]
 8008d9c:	701e      	strb	r6, [r3, #0]
 8008d9e:	6963      	ldr	r3, [r4, #20]
 8008da0:	4283      	cmp	r3, r0
 8008da2:	d004      	beq.n	8008dae <__swbuf_r+0x62>
 8008da4:	89a3      	ldrh	r3, [r4, #12]
 8008da6:	07db      	lsls	r3, r3, #31
 8008da8:	d506      	bpl.n	8008db8 <__swbuf_r+0x6c>
 8008daa:	2e0a      	cmp	r6, #10
 8008dac:	d104      	bne.n	8008db8 <__swbuf_r+0x6c>
 8008dae:	4621      	mov	r1, r4
 8008db0:	4628      	mov	r0, r5
 8008db2:	f000 f915 	bl	8008fe0 <_fflush_r>
 8008db6:	b988      	cbnz	r0, 8008ddc <__swbuf_r+0x90>
 8008db8:	4638      	mov	r0, r7
 8008dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbc:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <__swbuf_r+0x9c>)
 8008dbe:	429c      	cmp	r4, r3
 8008dc0:	d101      	bne.n	8008dc6 <__swbuf_r+0x7a>
 8008dc2:	68ac      	ldr	r4, [r5, #8]
 8008dc4:	e7cf      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	; (8008dec <__swbuf_r+0xa0>)
 8008dc8:	429c      	cmp	r4, r3
 8008dca:	bf08      	it	eq
 8008dcc:	68ec      	ldreq	r4, [r5, #12]
 8008dce:	e7ca      	b.n	8008d66 <__swbuf_r+0x1a>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	f000 f80c 	bl	8008df0 <__swsetup_r>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	d0cb      	beq.n	8008d74 <__swbuf_r+0x28>
 8008ddc:	f04f 37ff 	mov.w	r7, #4294967295
 8008de0:	e7ea      	b.n	8008db8 <__swbuf_r+0x6c>
 8008de2:	bf00      	nop
 8008de4:	08009c4c 	.word	0x08009c4c
 8008de8:	08009c6c 	.word	0x08009c6c
 8008dec:	08009c2c 	.word	0x08009c2c

08008df0 <__swsetup_r>:
 8008df0:	4b32      	ldr	r3, [pc, #200]	; (8008ebc <__swsetup_r+0xcc>)
 8008df2:	b570      	push	{r4, r5, r6, lr}
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	4606      	mov	r6, r0
 8008df8:	460c      	mov	r4, r1
 8008dfa:	b125      	cbz	r5, 8008e06 <__swsetup_r+0x16>
 8008dfc:	69ab      	ldr	r3, [r5, #24]
 8008dfe:	b913      	cbnz	r3, 8008e06 <__swsetup_r+0x16>
 8008e00:	4628      	mov	r0, r5
 8008e02:	f000 f981 	bl	8009108 <__sinit>
 8008e06:	4b2e      	ldr	r3, [pc, #184]	; (8008ec0 <__swsetup_r+0xd0>)
 8008e08:	429c      	cmp	r4, r3
 8008e0a:	d10f      	bne.n	8008e2c <__swsetup_r+0x3c>
 8008e0c:	686c      	ldr	r4, [r5, #4]
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e14:	0719      	lsls	r1, r3, #28
 8008e16:	d42c      	bmi.n	8008e72 <__swsetup_r+0x82>
 8008e18:	06dd      	lsls	r5, r3, #27
 8008e1a:	d411      	bmi.n	8008e40 <__swsetup_r+0x50>
 8008e1c:	2309      	movs	r3, #9
 8008e1e:	6033      	str	r3, [r6, #0]
 8008e20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	81a3      	strh	r3, [r4, #12]
 8008e2a:	e03e      	b.n	8008eaa <__swsetup_r+0xba>
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <__swsetup_r+0xd4>)
 8008e2e:	429c      	cmp	r4, r3
 8008e30:	d101      	bne.n	8008e36 <__swsetup_r+0x46>
 8008e32:	68ac      	ldr	r4, [r5, #8]
 8008e34:	e7eb      	b.n	8008e0e <__swsetup_r+0x1e>
 8008e36:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <__swsetup_r+0xd8>)
 8008e38:	429c      	cmp	r4, r3
 8008e3a:	bf08      	it	eq
 8008e3c:	68ec      	ldreq	r4, [r5, #12]
 8008e3e:	e7e6      	b.n	8008e0e <__swsetup_r+0x1e>
 8008e40:	0758      	lsls	r0, r3, #29
 8008e42:	d512      	bpl.n	8008e6a <__swsetup_r+0x7a>
 8008e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e46:	b141      	cbz	r1, 8008e5a <__swsetup_r+0x6a>
 8008e48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	d002      	beq.n	8008e56 <__swsetup_r+0x66>
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff fb2f 	bl	80084b4 <_free_r>
 8008e56:	2300      	movs	r3, #0
 8008e58:	6363      	str	r3, [r4, #52]	; 0x34
 8008e5a:	89a3      	ldrh	r3, [r4, #12]
 8008e5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e60:	81a3      	strh	r3, [r4, #12]
 8008e62:	2300      	movs	r3, #0
 8008e64:	6063      	str	r3, [r4, #4]
 8008e66:	6923      	ldr	r3, [r4, #16]
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	89a3      	ldrh	r3, [r4, #12]
 8008e6c:	f043 0308 	orr.w	r3, r3, #8
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	b94b      	cbnz	r3, 8008e8a <__swsetup_r+0x9a>
 8008e76:	89a3      	ldrh	r3, [r4, #12]
 8008e78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e80:	d003      	beq.n	8008e8a <__swsetup_r+0x9a>
 8008e82:	4621      	mov	r1, r4
 8008e84:	4630      	mov	r0, r6
 8008e86:	f000 fa05 	bl	8009294 <__smakebuf_r>
 8008e8a:	89a0      	ldrh	r0, [r4, #12]
 8008e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e90:	f010 0301 	ands.w	r3, r0, #1
 8008e94:	d00a      	beq.n	8008eac <__swsetup_r+0xbc>
 8008e96:	2300      	movs	r3, #0
 8008e98:	60a3      	str	r3, [r4, #8]
 8008e9a:	6963      	ldr	r3, [r4, #20]
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	61a3      	str	r3, [r4, #24]
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	b943      	cbnz	r3, 8008eb6 <__swsetup_r+0xc6>
 8008ea4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ea8:	d1ba      	bne.n	8008e20 <__swsetup_r+0x30>
 8008eaa:	bd70      	pop	{r4, r5, r6, pc}
 8008eac:	0781      	lsls	r1, r0, #30
 8008eae:	bf58      	it	pl
 8008eb0:	6963      	ldrpl	r3, [r4, #20]
 8008eb2:	60a3      	str	r3, [r4, #8]
 8008eb4:	e7f4      	b.n	8008ea0 <__swsetup_r+0xb0>
 8008eb6:	2000      	movs	r0, #0
 8008eb8:	e7f7      	b.n	8008eaa <__swsetup_r+0xba>
 8008eba:	bf00      	nop
 8008ebc:	2000000c 	.word	0x2000000c
 8008ec0:	08009c4c 	.word	0x08009c4c
 8008ec4:	08009c6c 	.word	0x08009c6c
 8008ec8:	08009c2c 	.word	0x08009c2c

08008ecc <abort>:
 8008ecc:	2006      	movs	r0, #6
 8008ece:	b508      	push	{r3, lr}
 8008ed0:	f000 fa50 	bl	8009374 <raise>
 8008ed4:	2001      	movs	r0, #1
 8008ed6:	f7f9 fb04 	bl	80024e2 <_exit>
	...

08008edc <__sflush_r>:
 8008edc:	898a      	ldrh	r2, [r1, #12]
 8008ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	0710      	lsls	r0, r2, #28
 8008ee4:	460c      	mov	r4, r1
 8008ee6:	d457      	bmi.n	8008f98 <__sflush_r+0xbc>
 8008ee8:	684b      	ldr	r3, [r1, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc04      	bgt.n	8008ef8 <__sflush_r+0x1c>
 8008eee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dc01      	bgt.n	8008ef8 <__sflush_r+0x1c>
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ef8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008efa:	2e00      	cmp	r6, #0
 8008efc:	d0fa      	beq.n	8008ef4 <__sflush_r+0x18>
 8008efe:	2300      	movs	r3, #0
 8008f00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f04:	682f      	ldr	r7, [r5, #0]
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	d032      	beq.n	8008f70 <__sflush_r+0x94>
 8008f0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	075a      	lsls	r2, r3, #29
 8008f10:	d505      	bpl.n	8008f1e <__sflush_r+0x42>
 8008f12:	6863      	ldr	r3, [r4, #4]
 8008f14:	1ac0      	subs	r0, r0, r3
 8008f16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f18:	b10b      	cbz	r3, 8008f1e <__sflush_r+0x42>
 8008f1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f1c:	1ac0      	subs	r0, r0, r3
 8008f1e:	2300      	movs	r3, #0
 8008f20:	4602      	mov	r2, r0
 8008f22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f24:	4628      	mov	r0, r5
 8008f26:	6a21      	ldr	r1, [r4, #32]
 8008f28:	47b0      	blx	r6
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	d106      	bne.n	8008f3e <__sflush_r+0x62>
 8008f30:	6829      	ldr	r1, [r5, #0]
 8008f32:	291d      	cmp	r1, #29
 8008f34:	d82c      	bhi.n	8008f90 <__sflush_r+0xb4>
 8008f36:	4a29      	ldr	r2, [pc, #164]	; (8008fdc <__sflush_r+0x100>)
 8008f38:	40ca      	lsrs	r2, r1
 8008f3a:	07d6      	lsls	r6, r2, #31
 8008f3c:	d528      	bpl.n	8008f90 <__sflush_r+0xb4>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	6062      	str	r2, [r4, #4]
 8008f42:	6922      	ldr	r2, [r4, #16]
 8008f44:	04d9      	lsls	r1, r3, #19
 8008f46:	6022      	str	r2, [r4, #0]
 8008f48:	d504      	bpl.n	8008f54 <__sflush_r+0x78>
 8008f4a:	1c42      	adds	r2, r0, #1
 8008f4c:	d101      	bne.n	8008f52 <__sflush_r+0x76>
 8008f4e:	682b      	ldr	r3, [r5, #0]
 8008f50:	b903      	cbnz	r3, 8008f54 <__sflush_r+0x78>
 8008f52:	6560      	str	r0, [r4, #84]	; 0x54
 8008f54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f56:	602f      	str	r7, [r5, #0]
 8008f58:	2900      	cmp	r1, #0
 8008f5a:	d0cb      	beq.n	8008ef4 <__sflush_r+0x18>
 8008f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f60:	4299      	cmp	r1, r3
 8008f62:	d002      	beq.n	8008f6a <__sflush_r+0x8e>
 8008f64:	4628      	mov	r0, r5
 8008f66:	f7ff faa5 	bl	80084b4 <_free_r>
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f6e:	e7c2      	b.n	8008ef6 <__sflush_r+0x1a>
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	2301      	movs	r3, #1
 8008f74:	4628      	mov	r0, r5
 8008f76:	47b0      	blx	r6
 8008f78:	1c41      	adds	r1, r0, #1
 8008f7a:	d1c7      	bne.n	8008f0c <__sflush_r+0x30>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0c4      	beq.n	8008f0c <__sflush_r+0x30>
 8008f82:	2b1d      	cmp	r3, #29
 8008f84:	d001      	beq.n	8008f8a <__sflush_r+0xae>
 8008f86:	2b16      	cmp	r3, #22
 8008f88:	d101      	bne.n	8008f8e <__sflush_r+0xb2>
 8008f8a:	602f      	str	r7, [r5, #0]
 8008f8c:	e7b2      	b.n	8008ef4 <__sflush_r+0x18>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f94:	81a3      	strh	r3, [r4, #12]
 8008f96:	e7ae      	b.n	8008ef6 <__sflush_r+0x1a>
 8008f98:	690f      	ldr	r7, [r1, #16]
 8008f9a:	2f00      	cmp	r7, #0
 8008f9c:	d0aa      	beq.n	8008ef4 <__sflush_r+0x18>
 8008f9e:	0793      	lsls	r3, r2, #30
 8008fa0:	bf18      	it	ne
 8008fa2:	2300      	movne	r3, #0
 8008fa4:	680e      	ldr	r6, [r1, #0]
 8008fa6:	bf08      	it	eq
 8008fa8:	694b      	ldreq	r3, [r1, #20]
 8008faa:	1bf6      	subs	r6, r6, r7
 8008fac:	600f      	str	r7, [r1, #0]
 8008fae:	608b      	str	r3, [r1, #8]
 8008fb0:	2e00      	cmp	r6, #0
 8008fb2:	dd9f      	ble.n	8008ef4 <__sflush_r+0x18>
 8008fb4:	4633      	mov	r3, r6
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	4628      	mov	r0, r5
 8008fba:	6a21      	ldr	r1, [r4, #32]
 8008fbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008fc0:	47e0      	blx	ip
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	dc06      	bgt.n	8008fd4 <__sflush_r+0xf8>
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e790      	b.n	8008ef6 <__sflush_r+0x1a>
 8008fd4:	4407      	add	r7, r0
 8008fd6:	1a36      	subs	r6, r6, r0
 8008fd8:	e7ea      	b.n	8008fb0 <__sflush_r+0xd4>
 8008fda:	bf00      	nop
 8008fdc:	20400001 	.word	0x20400001

08008fe0 <_fflush_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	690b      	ldr	r3, [r1, #16]
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	b913      	cbnz	r3, 8008ff0 <_fflush_r+0x10>
 8008fea:	2500      	movs	r5, #0
 8008fec:	4628      	mov	r0, r5
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	b118      	cbz	r0, 8008ffa <_fflush_r+0x1a>
 8008ff2:	6983      	ldr	r3, [r0, #24]
 8008ff4:	b90b      	cbnz	r3, 8008ffa <_fflush_r+0x1a>
 8008ff6:	f000 f887 	bl	8009108 <__sinit>
 8008ffa:	4b14      	ldr	r3, [pc, #80]	; (800904c <_fflush_r+0x6c>)
 8008ffc:	429c      	cmp	r4, r3
 8008ffe:	d11b      	bne.n	8009038 <_fflush_r+0x58>
 8009000:	686c      	ldr	r4, [r5, #4]
 8009002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0ef      	beq.n	8008fea <_fflush_r+0xa>
 800900a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800900c:	07d0      	lsls	r0, r2, #31
 800900e:	d404      	bmi.n	800901a <_fflush_r+0x3a>
 8009010:	0599      	lsls	r1, r3, #22
 8009012:	d402      	bmi.n	800901a <_fflush_r+0x3a>
 8009014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009016:	f000 f915 	bl	8009244 <__retarget_lock_acquire_recursive>
 800901a:	4628      	mov	r0, r5
 800901c:	4621      	mov	r1, r4
 800901e:	f7ff ff5d 	bl	8008edc <__sflush_r>
 8009022:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009024:	4605      	mov	r5, r0
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d4e0      	bmi.n	8008fec <_fflush_r+0xc>
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	059b      	lsls	r3, r3, #22
 800902e:	d4dd      	bmi.n	8008fec <_fflush_r+0xc>
 8009030:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009032:	f000 f908 	bl	8009246 <__retarget_lock_release_recursive>
 8009036:	e7d9      	b.n	8008fec <_fflush_r+0xc>
 8009038:	4b05      	ldr	r3, [pc, #20]	; (8009050 <_fflush_r+0x70>)
 800903a:	429c      	cmp	r4, r3
 800903c:	d101      	bne.n	8009042 <_fflush_r+0x62>
 800903e:	68ac      	ldr	r4, [r5, #8]
 8009040:	e7df      	b.n	8009002 <_fflush_r+0x22>
 8009042:	4b04      	ldr	r3, [pc, #16]	; (8009054 <_fflush_r+0x74>)
 8009044:	429c      	cmp	r4, r3
 8009046:	bf08      	it	eq
 8009048:	68ec      	ldreq	r4, [r5, #12]
 800904a:	e7da      	b.n	8009002 <_fflush_r+0x22>
 800904c:	08009c4c 	.word	0x08009c4c
 8009050:	08009c6c 	.word	0x08009c6c
 8009054:	08009c2c 	.word	0x08009c2c

08009058 <std>:
 8009058:	2300      	movs	r3, #0
 800905a:	b510      	push	{r4, lr}
 800905c:	4604      	mov	r4, r0
 800905e:	e9c0 3300 	strd	r3, r3, [r0]
 8009062:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009066:	6083      	str	r3, [r0, #8]
 8009068:	8181      	strh	r1, [r0, #12]
 800906a:	6643      	str	r3, [r0, #100]	; 0x64
 800906c:	81c2      	strh	r2, [r0, #14]
 800906e:	6183      	str	r3, [r0, #24]
 8009070:	4619      	mov	r1, r3
 8009072:	2208      	movs	r2, #8
 8009074:	305c      	adds	r0, #92	; 0x5c
 8009076:	f7fb fe0d 	bl	8004c94 <memset>
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <std+0x38>)
 800907c:	6224      	str	r4, [r4, #32]
 800907e:	6263      	str	r3, [r4, #36]	; 0x24
 8009080:	4b04      	ldr	r3, [pc, #16]	; (8009094 <std+0x3c>)
 8009082:	62a3      	str	r3, [r4, #40]	; 0x28
 8009084:	4b04      	ldr	r3, [pc, #16]	; (8009098 <std+0x40>)
 8009086:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <std+0x44>)
 800908a:	6323      	str	r3, [r4, #48]	; 0x30
 800908c:	bd10      	pop	{r4, pc}
 800908e:	bf00      	nop
 8009090:	080093ad 	.word	0x080093ad
 8009094:	080093cf 	.word	0x080093cf
 8009098:	08009407 	.word	0x08009407
 800909c:	0800942b 	.word	0x0800942b

080090a0 <_cleanup_r>:
 80090a0:	4901      	ldr	r1, [pc, #4]	; (80090a8 <_cleanup_r+0x8>)
 80090a2:	f000 b8af 	b.w	8009204 <_fwalk_reent>
 80090a6:	bf00      	nop
 80090a8:	08008fe1 	.word	0x08008fe1

080090ac <__sfmoreglue>:
 80090ac:	2268      	movs	r2, #104	; 0x68
 80090ae:	b570      	push	{r4, r5, r6, lr}
 80090b0:	1e4d      	subs	r5, r1, #1
 80090b2:	4355      	muls	r5, r2
 80090b4:	460e      	mov	r6, r1
 80090b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ba:	f7ff fa63 	bl	8008584 <_malloc_r>
 80090be:	4604      	mov	r4, r0
 80090c0:	b140      	cbz	r0, 80090d4 <__sfmoreglue+0x28>
 80090c2:	2100      	movs	r1, #0
 80090c4:	e9c0 1600 	strd	r1, r6, [r0]
 80090c8:	300c      	adds	r0, #12
 80090ca:	60a0      	str	r0, [r4, #8]
 80090cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090d0:	f7fb fde0 	bl	8004c94 <memset>
 80090d4:	4620      	mov	r0, r4
 80090d6:	bd70      	pop	{r4, r5, r6, pc}

080090d8 <__sfp_lock_acquire>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__sfp_lock_acquire+0x8>)
 80090da:	f000 b8b3 	b.w	8009244 <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	20000449 	.word	0x20000449

080090e4 <__sfp_lock_release>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__sfp_lock_release+0x8>)
 80090e6:	f000 b8ae 	b.w	8009246 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	20000449 	.word	0x20000449

080090f0 <__sinit_lock_acquire>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__sinit_lock_acquire+0x8>)
 80090f2:	f000 b8a7 	b.w	8009244 <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	2000044a 	.word	0x2000044a

080090fc <__sinit_lock_release>:
 80090fc:	4801      	ldr	r0, [pc, #4]	; (8009104 <__sinit_lock_release+0x8>)
 80090fe:	f000 b8a2 	b.w	8009246 <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	2000044a 	.word	0x2000044a

08009108 <__sinit>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4604      	mov	r4, r0
 800910c:	f7ff fff0 	bl	80090f0 <__sinit_lock_acquire>
 8009110:	69a3      	ldr	r3, [r4, #24]
 8009112:	b11b      	cbz	r3, 800911c <__sinit+0x14>
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f7ff bff0 	b.w	80090fc <__sinit_lock_release>
 800911c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009120:	6523      	str	r3, [r4, #80]	; 0x50
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <__sinit+0x68>)
 8009124:	4a13      	ldr	r2, [pc, #76]	; (8009174 <__sinit+0x6c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	62a2      	str	r2, [r4, #40]	; 0x28
 800912a:	42a3      	cmp	r3, r4
 800912c:	bf08      	it	eq
 800912e:	2301      	moveq	r3, #1
 8009130:	4620      	mov	r0, r4
 8009132:	bf08      	it	eq
 8009134:	61a3      	streq	r3, [r4, #24]
 8009136:	f000 f81f 	bl	8009178 <__sfp>
 800913a:	6060      	str	r0, [r4, #4]
 800913c:	4620      	mov	r0, r4
 800913e:	f000 f81b 	bl	8009178 <__sfp>
 8009142:	60a0      	str	r0, [r4, #8]
 8009144:	4620      	mov	r0, r4
 8009146:	f000 f817 	bl	8009178 <__sfp>
 800914a:	2200      	movs	r2, #0
 800914c:	2104      	movs	r1, #4
 800914e:	60e0      	str	r0, [r4, #12]
 8009150:	6860      	ldr	r0, [r4, #4]
 8009152:	f7ff ff81 	bl	8009058 <std>
 8009156:	2201      	movs	r2, #1
 8009158:	2109      	movs	r1, #9
 800915a:	68a0      	ldr	r0, [r4, #8]
 800915c:	f7ff ff7c 	bl	8009058 <std>
 8009160:	2202      	movs	r2, #2
 8009162:	2112      	movs	r1, #18
 8009164:	68e0      	ldr	r0, [r4, #12]
 8009166:	f7ff ff77 	bl	8009058 <std>
 800916a:	2301      	movs	r3, #1
 800916c:	61a3      	str	r3, [r4, #24]
 800916e:	e7d1      	b.n	8009114 <__sinit+0xc>
 8009170:	080097e8 	.word	0x080097e8
 8009174:	080090a1 	.word	0x080090a1

08009178 <__sfp>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	4607      	mov	r7, r0
 800917c:	f7ff ffac 	bl	80090d8 <__sfp_lock_acquire>
 8009180:	4b1e      	ldr	r3, [pc, #120]	; (80091fc <__sfp+0x84>)
 8009182:	681e      	ldr	r6, [r3, #0]
 8009184:	69b3      	ldr	r3, [r6, #24]
 8009186:	b913      	cbnz	r3, 800918e <__sfp+0x16>
 8009188:	4630      	mov	r0, r6
 800918a:	f7ff ffbd 	bl	8009108 <__sinit>
 800918e:	3648      	adds	r6, #72	; 0x48
 8009190:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009194:	3b01      	subs	r3, #1
 8009196:	d503      	bpl.n	80091a0 <__sfp+0x28>
 8009198:	6833      	ldr	r3, [r6, #0]
 800919a:	b30b      	cbz	r3, 80091e0 <__sfp+0x68>
 800919c:	6836      	ldr	r6, [r6, #0]
 800919e:	e7f7      	b.n	8009190 <__sfp+0x18>
 80091a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80091a4:	b9d5      	cbnz	r5, 80091dc <__sfp+0x64>
 80091a6:	4b16      	ldr	r3, [pc, #88]	; (8009200 <__sfp+0x88>)
 80091a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091ac:	60e3      	str	r3, [r4, #12]
 80091ae:	6665      	str	r5, [r4, #100]	; 0x64
 80091b0:	f000 f847 	bl	8009242 <__retarget_lock_init_recursive>
 80091b4:	f7ff ff96 	bl	80090e4 <__sfp_lock_release>
 80091b8:	2208      	movs	r2, #8
 80091ba:	4629      	mov	r1, r5
 80091bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091c4:	6025      	str	r5, [r4, #0]
 80091c6:	61a5      	str	r5, [r4, #24]
 80091c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091cc:	f7fb fd62 	bl	8004c94 <memset>
 80091d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091d8:	4620      	mov	r0, r4
 80091da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091dc:	3468      	adds	r4, #104	; 0x68
 80091de:	e7d9      	b.n	8009194 <__sfp+0x1c>
 80091e0:	2104      	movs	r1, #4
 80091e2:	4638      	mov	r0, r7
 80091e4:	f7ff ff62 	bl	80090ac <__sfmoreglue>
 80091e8:	4604      	mov	r4, r0
 80091ea:	6030      	str	r0, [r6, #0]
 80091ec:	2800      	cmp	r0, #0
 80091ee:	d1d5      	bne.n	800919c <__sfp+0x24>
 80091f0:	f7ff ff78 	bl	80090e4 <__sfp_lock_release>
 80091f4:	230c      	movs	r3, #12
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	e7ee      	b.n	80091d8 <__sfp+0x60>
 80091fa:	bf00      	nop
 80091fc:	080097e8 	.word	0x080097e8
 8009200:	ffff0001 	.word	0xffff0001

08009204 <_fwalk_reent>:
 8009204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009208:	4606      	mov	r6, r0
 800920a:	4688      	mov	r8, r1
 800920c:	2700      	movs	r7, #0
 800920e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009212:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009216:	f1b9 0901 	subs.w	r9, r9, #1
 800921a:	d505      	bpl.n	8009228 <_fwalk_reent+0x24>
 800921c:	6824      	ldr	r4, [r4, #0]
 800921e:	2c00      	cmp	r4, #0
 8009220:	d1f7      	bne.n	8009212 <_fwalk_reent+0xe>
 8009222:	4638      	mov	r0, r7
 8009224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009228:	89ab      	ldrh	r3, [r5, #12]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d907      	bls.n	800923e <_fwalk_reent+0x3a>
 800922e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009232:	3301      	adds	r3, #1
 8009234:	d003      	beq.n	800923e <_fwalk_reent+0x3a>
 8009236:	4629      	mov	r1, r5
 8009238:	4630      	mov	r0, r6
 800923a:	47c0      	blx	r8
 800923c:	4307      	orrs	r7, r0
 800923e:	3568      	adds	r5, #104	; 0x68
 8009240:	e7e9      	b.n	8009216 <_fwalk_reent+0x12>

08009242 <__retarget_lock_init_recursive>:
 8009242:	4770      	bx	lr

08009244 <__retarget_lock_acquire_recursive>:
 8009244:	4770      	bx	lr

08009246 <__retarget_lock_release_recursive>:
 8009246:	4770      	bx	lr

08009248 <__swhatbuf_r>:
 8009248:	b570      	push	{r4, r5, r6, lr}
 800924a:	460e      	mov	r6, r1
 800924c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009250:	4614      	mov	r4, r2
 8009252:	2900      	cmp	r1, #0
 8009254:	461d      	mov	r5, r3
 8009256:	b096      	sub	sp, #88	; 0x58
 8009258:	da08      	bge.n	800926c <__swhatbuf_r+0x24>
 800925a:	2200      	movs	r2, #0
 800925c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009260:	602a      	str	r2, [r5, #0]
 8009262:	061a      	lsls	r2, r3, #24
 8009264:	d410      	bmi.n	8009288 <__swhatbuf_r+0x40>
 8009266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800926a:	e00e      	b.n	800928a <__swhatbuf_r+0x42>
 800926c:	466a      	mov	r2, sp
 800926e:	f000 f903 	bl	8009478 <_fstat_r>
 8009272:	2800      	cmp	r0, #0
 8009274:	dbf1      	blt.n	800925a <__swhatbuf_r+0x12>
 8009276:	9a01      	ldr	r2, [sp, #4]
 8009278:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800927c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009280:	425a      	negs	r2, r3
 8009282:	415a      	adcs	r2, r3
 8009284:	602a      	str	r2, [r5, #0]
 8009286:	e7ee      	b.n	8009266 <__swhatbuf_r+0x1e>
 8009288:	2340      	movs	r3, #64	; 0x40
 800928a:	2000      	movs	r0, #0
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	b016      	add	sp, #88	; 0x58
 8009290:	bd70      	pop	{r4, r5, r6, pc}
	...

08009294 <__smakebuf_r>:
 8009294:	898b      	ldrh	r3, [r1, #12]
 8009296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009298:	079d      	lsls	r5, r3, #30
 800929a:	4606      	mov	r6, r0
 800929c:	460c      	mov	r4, r1
 800929e:	d507      	bpl.n	80092b0 <__smakebuf_r+0x1c>
 80092a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092a4:	6023      	str	r3, [r4, #0]
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	2301      	movs	r3, #1
 80092aa:	6163      	str	r3, [r4, #20]
 80092ac:	b002      	add	sp, #8
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	466a      	mov	r2, sp
 80092b2:	ab01      	add	r3, sp, #4
 80092b4:	f7ff ffc8 	bl	8009248 <__swhatbuf_r>
 80092b8:	9900      	ldr	r1, [sp, #0]
 80092ba:	4605      	mov	r5, r0
 80092bc:	4630      	mov	r0, r6
 80092be:	f7ff f961 	bl	8008584 <_malloc_r>
 80092c2:	b948      	cbnz	r0, 80092d8 <__smakebuf_r+0x44>
 80092c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092c8:	059a      	lsls	r2, r3, #22
 80092ca:	d4ef      	bmi.n	80092ac <__smakebuf_r+0x18>
 80092cc:	f023 0303 	bic.w	r3, r3, #3
 80092d0:	f043 0302 	orr.w	r3, r3, #2
 80092d4:	81a3      	strh	r3, [r4, #12]
 80092d6:	e7e3      	b.n	80092a0 <__smakebuf_r+0xc>
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <__smakebuf_r+0x7c>)
 80092da:	62b3      	str	r3, [r6, #40]	; 0x28
 80092dc:	89a3      	ldrh	r3, [r4, #12]
 80092de:	6020      	str	r0, [r4, #0]
 80092e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092e4:	81a3      	strh	r3, [r4, #12]
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	6120      	str	r0, [r4, #16]
 80092ea:	6163      	str	r3, [r4, #20]
 80092ec:	9b01      	ldr	r3, [sp, #4]
 80092ee:	b15b      	cbz	r3, 8009308 <__smakebuf_r+0x74>
 80092f0:	4630      	mov	r0, r6
 80092f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092f6:	f000 f8d1 	bl	800949c <_isatty_r>
 80092fa:	b128      	cbz	r0, 8009308 <__smakebuf_r+0x74>
 80092fc:	89a3      	ldrh	r3, [r4, #12]
 80092fe:	f023 0303 	bic.w	r3, r3, #3
 8009302:	f043 0301 	orr.w	r3, r3, #1
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	89a0      	ldrh	r0, [r4, #12]
 800930a:	4305      	orrs	r5, r0
 800930c:	81a5      	strh	r5, [r4, #12]
 800930e:	e7cd      	b.n	80092ac <__smakebuf_r+0x18>
 8009310:	080090a1 	.word	0x080090a1

08009314 <_malloc_usable_size_r>:
 8009314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009318:	1f18      	subs	r0, r3, #4
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfbc      	itt	lt
 800931e:	580b      	ldrlt	r3, [r1, r0]
 8009320:	18c0      	addlt	r0, r0, r3
 8009322:	4770      	bx	lr

08009324 <_raise_r>:
 8009324:	291f      	cmp	r1, #31
 8009326:	b538      	push	{r3, r4, r5, lr}
 8009328:	4604      	mov	r4, r0
 800932a:	460d      	mov	r5, r1
 800932c:	d904      	bls.n	8009338 <_raise_r+0x14>
 800932e:	2316      	movs	r3, #22
 8009330:	6003      	str	r3, [r0, #0]
 8009332:	f04f 30ff 	mov.w	r0, #4294967295
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800933a:	b112      	cbz	r2, 8009342 <_raise_r+0x1e>
 800933c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009340:	b94b      	cbnz	r3, 8009356 <_raise_r+0x32>
 8009342:	4620      	mov	r0, r4
 8009344:	f000 f830 	bl	80093a8 <_getpid_r>
 8009348:	462a      	mov	r2, r5
 800934a:	4601      	mov	r1, r0
 800934c:	4620      	mov	r0, r4
 800934e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009352:	f000 b817 	b.w	8009384 <_kill_r>
 8009356:	2b01      	cmp	r3, #1
 8009358:	d00a      	beq.n	8009370 <_raise_r+0x4c>
 800935a:	1c59      	adds	r1, r3, #1
 800935c:	d103      	bne.n	8009366 <_raise_r+0x42>
 800935e:	2316      	movs	r3, #22
 8009360:	6003      	str	r3, [r0, #0]
 8009362:	2001      	movs	r0, #1
 8009364:	e7e7      	b.n	8009336 <_raise_r+0x12>
 8009366:	2400      	movs	r4, #0
 8009368:	4628      	mov	r0, r5
 800936a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800936e:	4798      	blx	r3
 8009370:	2000      	movs	r0, #0
 8009372:	e7e0      	b.n	8009336 <_raise_r+0x12>

08009374 <raise>:
 8009374:	4b02      	ldr	r3, [pc, #8]	; (8009380 <raise+0xc>)
 8009376:	4601      	mov	r1, r0
 8009378:	6818      	ldr	r0, [r3, #0]
 800937a:	f7ff bfd3 	b.w	8009324 <_raise_r>
 800937e:	bf00      	nop
 8009380:	2000000c 	.word	0x2000000c

08009384 <_kill_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	2300      	movs	r3, #0
 8009388:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_kill_r+0x20>)
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	4611      	mov	r1, r2
 8009390:	602b      	str	r3, [r5, #0]
 8009392:	f7f9 f896 	bl	80024c2 <_kill>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	d102      	bne.n	80093a0 <_kill_r+0x1c>
 800939a:	682b      	ldr	r3, [r5, #0]
 800939c:	b103      	cbz	r3, 80093a0 <_kill_r+0x1c>
 800939e:	6023      	str	r3, [r4, #0]
 80093a0:	bd38      	pop	{r3, r4, r5, pc}
 80093a2:	bf00      	nop
 80093a4:	20000444 	.word	0x20000444

080093a8 <_getpid_r>:
 80093a8:	f7f9 b884 	b.w	80024b4 <_getpid>

080093ac <__sread>:
 80093ac:	b510      	push	{r4, lr}
 80093ae:	460c      	mov	r4, r1
 80093b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b4:	f000 f894 	bl	80094e0 <_read_r>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	bfab      	itete	ge
 80093bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093be:	89a3      	ldrhlt	r3, [r4, #12]
 80093c0:	181b      	addge	r3, r3, r0
 80093c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093c6:	bfac      	ite	ge
 80093c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093ca:	81a3      	strhlt	r3, [r4, #12]
 80093cc:	bd10      	pop	{r4, pc}

080093ce <__swrite>:
 80093ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d2:	461f      	mov	r7, r3
 80093d4:	898b      	ldrh	r3, [r1, #12]
 80093d6:	4605      	mov	r5, r0
 80093d8:	05db      	lsls	r3, r3, #23
 80093da:	460c      	mov	r4, r1
 80093dc:	4616      	mov	r6, r2
 80093de:	d505      	bpl.n	80093ec <__swrite+0x1e>
 80093e0:	2302      	movs	r3, #2
 80093e2:	2200      	movs	r2, #0
 80093e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e8:	f000 f868 	bl	80094bc <_lseek_r>
 80093ec:	89a3      	ldrh	r3, [r4, #12]
 80093ee:	4632      	mov	r2, r6
 80093f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093f4:	81a3      	strh	r3, [r4, #12]
 80093f6:	4628      	mov	r0, r5
 80093f8:	463b      	mov	r3, r7
 80093fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009402:	f000 b817 	b.w	8009434 <_write_r>

08009406 <__sseek>:
 8009406:	b510      	push	{r4, lr}
 8009408:	460c      	mov	r4, r1
 800940a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940e:	f000 f855 	bl	80094bc <_lseek_r>
 8009412:	1c43      	adds	r3, r0, #1
 8009414:	89a3      	ldrh	r3, [r4, #12]
 8009416:	bf15      	itete	ne
 8009418:	6560      	strne	r0, [r4, #84]	; 0x54
 800941a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800941e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009422:	81a3      	strheq	r3, [r4, #12]
 8009424:	bf18      	it	ne
 8009426:	81a3      	strhne	r3, [r4, #12]
 8009428:	bd10      	pop	{r4, pc}

0800942a <__sclose>:
 800942a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942e:	f000 b813 	b.w	8009458 <_close_r>
	...

08009434 <_write_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4604      	mov	r4, r0
 8009438:	4608      	mov	r0, r1
 800943a:	4611      	mov	r1, r2
 800943c:	2200      	movs	r2, #0
 800943e:	4d05      	ldr	r5, [pc, #20]	; (8009454 <_write_r+0x20>)
 8009440:	602a      	str	r2, [r5, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	f7f9 f874 	bl	8002530 <_write>
 8009448:	1c43      	adds	r3, r0, #1
 800944a:	d102      	bne.n	8009452 <_write_r+0x1e>
 800944c:	682b      	ldr	r3, [r5, #0]
 800944e:	b103      	cbz	r3, 8009452 <_write_r+0x1e>
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20000444 	.word	0x20000444

08009458 <_close_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	2300      	movs	r3, #0
 800945c:	4d05      	ldr	r5, [pc, #20]	; (8009474 <_close_r+0x1c>)
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	f7f9 f880 	bl	8002568 <_close>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_close_r+0x1a>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_close_r+0x1a>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	20000444 	.word	0x20000444

08009478 <_fstat_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	2300      	movs	r3, #0
 800947c:	4d06      	ldr	r5, [pc, #24]	; (8009498 <_fstat_r+0x20>)
 800947e:	4604      	mov	r4, r0
 8009480:	4608      	mov	r0, r1
 8009482:	4611      	mov	r1, r2
 8009484:	602b      	str	r3, [r5, #0]
 8009486:	f7f9 f87a 	bl	800257e <_fstat>
 800948a:	1c43      	adds	r3, r0, #1
 800948c:	d102      	bne.n	8009494 <_fstat_r+0x1c>
 800948e:	682b      	ldr	r3, [r5, #0]
 8009490:	b103      	cbz	r3, 8009494 <_fstat_r+0x1c>
 8009492:	6023      	str	r3, [r4, #0]
 8009494:	bd38      	pop	{r3, r4, r5, pc}
 8009496:	bf00      	nop
 8009498:	20000444 	.word	0x20000444

0800949c <_isatty_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	2300      	movs	r3, #0
 80094a0:	4d05      	ldr	r5, [pc, #20]	; (80094b8 <_isatty_r+0x1c>)
 80094a2:	4604      	mov	r4, r0
 80094a4:	4608      	mov	r0, r1
 80094a6:	602b      	str	r3, [r5, #0]
 80094a8:	f7f9 f878 	bl	800259c <_isatty>
 80094ac:	1c43      	adds	r3, r0, #1
 80094ae:	d102      	bne.n	80094b6 <_isatty_r+0x1a>
 80094b0:	682b      	ldr	r3, [r5, #0]
 80094b2:	b103      	cbz	r3, 80094b6 <_isatty_r+0x1a>
 80094b4:	6023      	str	r3, [r4, #0]
 80094b6:	bd38      	pop	{r3, r4, r5, pc}
 80094b8:	20000444 	.word	0x20000444

080094bc <_lseek_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	4611      	mov	r1, r2
 80094c4:	2200      	movs	r2, #0
 80094c6:	4d05      	ldr	r5, [pc, #20]	; (80094dc <_lseek_r+0x20>)
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	f7f9 f870 	bl	80025b0 <_lseek>
 80094d0:	1c43      	adds	r3, r0, #1
 80094d2:	d102      	bne.n	80094da <_lseek_r+0x1e>
 80094d4:	682b      	ldr	r3, [r5, #0]
 80094d6:	b103      	cbz	r3, 80094da <_lseek_r+0x1e>
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	bd38      	pop	{r3, r4, r5, pc}
 80094dc:	20000444 	.word	0x20000444

080094e0 <_read_r>:
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4604      	mov	r4, r0
 80094e4:	4608      	mov	r0, r1
 80094e6:	4611      	mov	r1, r2
 80094e8:	2200      	movs	r2, #0
 80094ea:	4d05      	ldr	r5, [pc, #20]	; (8009500 <_read_r+0x20>)
 80094ec:	602a      	str	r2, [r5, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7f9 f801 	bl	80024f6 <_read>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_read_r+0x1e>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_read_r+0x1e>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	20000444 	.word	0x20000444

08009504 <_init>:
 8009504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009506:	bf00      	nop
 8009508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800950a:	bc08      	pop	{r3}
 800950c:	469e      	mov	lr, r3
 800950e:	4770      	bx	lr

08009510 <_fini>:
 8009510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009512:	bf00      	nop
 8009514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009516:	bc08      	pop	{r3}
 8009518:	469e      	mov	lr, r3
 800951a:	4770      	bx	lr
